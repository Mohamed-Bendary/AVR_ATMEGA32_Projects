
TWI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001e38  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00001e38  00001ecc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800068  00800068  00001ed4  2**0
                  ALLOC
  3 .stab         00001b60  00000000  00000000  00001ed4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000fbe  00000000  00000000  00003a34  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000049f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00004b32  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00004ca2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000068eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000077d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00008584  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  000086e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00008971  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000913f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 7f 09 	jmp	0x12fe	; 0x12fe <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	ac 36       	cpi	r26, 0x6C	; 108
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e8 e3       	ldi	r30, 0x38	; 56
      78:	fe e1       	ldi	r31, 0x1E	; 30
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <main>
      8a:	0c 94 1a 0f 	jmp	0x1e34	; 0x1e34 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 e3 0e 	jmp	0x1dc6	; 0x1dc6 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ff 0e 	jmp	0x1dfe	; 0x1dfe <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 ef 0e 	jmp	0x1dde	; 0x1dde <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 0b 0f 	jmp	0x1e16	; 0x1e16 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 ef 0e 	jmp	0x1dde	; 0x1dde <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 0b 0f 	jmp	0x1e16	; 0x1e16 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 e3 0e 	jmp	0x1dc6	; 0x1dc6 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ff 0e 	jmp	0x1dfe	; 0x1dfe <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 ef 0e 	jmp	0x1dde	; 0x1dde <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 0b 0f 	jmp	0x1e16	; 0x1e16 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 ef 0e 	jmp	0x1dde	; 0x1dde <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 0b 0f 	jmp	0x1e16	; 0x1e16 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 ef 0e 	jmp	0x1dde	; 0x1dde <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 0b 0f 	jmp	0x1e16	; 0x1e16 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 f3 0e 	jmp	0x1de6	; 0x1de6 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 0f 0f 	jmp	0x1e1e	; 0x1e1e <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <DIO_voidSetPinDirection>:
#include "DIO_interface.h"
#include "DIO_private.h"



void DIO_voidSetPinDirection(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8PinDirection){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	27 97       	sbiw	r28, 0x07	; 7
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	89 83       	std	Y+1, r24	; 0x01
     b5c:	6a 83       	std	Y+2, r22	; 0x02
     b5e:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8Pin<=DIO_u8PIN7){
     b60:	8a 81       	ldd	r24, Y+2	; 0x02
     b62:	88 30       	cpi	r24, 0x08	; 8
     b64:	08 f0       	brcs	.+2      	; 0xb68 <DIO_voidSetPinDirection+0x22>
     b66:	ec c0       	rjmp	.+472    	; 0xd40 <DIO_voidSetPinDirection+0x1fa>
		if(Copy_u8PinDirection==DIO_u8PIN_INPUT){
     b68:	8b 81       	ldd	r24, Y+3	; 0x03
     b6a:	88 23       	and	r24, r24
     b6c:	09 f0       	breq	.+2      	; 0xb70 <DIO_voidSetPinDirection+0x2a>
     b6e:	75 c0       	rjmp	.+234    	; 0xc5a <DIO_voidSetPinDirection+0x114>
			switch(Copy_u8Port)
     b70:	89 81       	ldd	r24, Y+1	; 0x01
     b72:	28 2f       	mov	r18, r24
     b74:	30 e0       	ldi	r19, 0x00	; 0
     b76:	3f 83       	std	Y+7, r19	; 0x07
     b78:	2e 83       	std	Y+6, r18	; 0x06
     b7a:	8e 81       	ldd	r24, Y+6	; 0x06
     b7c:	9f 81       	ldd	r25, Y+7	; 0x07
     b7e:	82 30       	cpi	r24, 0x02	; 2
     b80:	91 05       	cpc	r25, r1
     b82:	61 f1       	breq	.+88     	; 0xbdc <DIO_voidSetPinDirection+0x96>
     b84:	2e 81       	ldd	r18, Y+6	; 0x06
     b86:	3f 81       	ldd	r19, Y+7	; 0x07
     b88:	23 30       	cpi	r18, 0x03	; 3
     b8a:	31 05       	cpc	r19, r1
     b8c:	34 f4       	brge	.+12     	; 0xb9a <DIO_voidSetPinDirection+0x54>
     b8e:	8e 81       	ldd	r24, Y+6	; 0x06
     b90:	9f 81       	ldd	r25, Y+7	; 0x07
     b92:	81 30       	cpi	r24, 0x01	; 1
     b94:	91 05       	cpc	r25, r1
     b96:	69 f0       	breq	.+26     	; 0xbb2 <DIO_voidSetPinDirection+0x6c>
     b98:	d3 c0       	rjmp	.+422    	; 0xd40 <DIO_voidSetPinDirection+0x1fa>
     b9a:	2e 81       	ldd	r18, Y+6	; 0x06
     b9c:	3f 81       	ldd	r19, Y+7	; 0x07
     b9e:	23 30       	cpi	r18, 0x03	; 3
     ba0:	31 05       	cpc	r19, r1
     ba2:	89 f1       	breq	.+98     	; 0xc06 <DIO_voidSetPinDirection+0xc0>
     ba4:	8e 81       	ldd	r24, Y+6	; 0x06
     ba6:	9f 81       	ldd	r25, Y+7	; 0x07
     ba8:	84 30       	cpi	r24, 0x04	; 4
     baa:	91 05       	cpc	r25, r1
     bac:	09 f4       	brne	.+2      	; 0xbb0 <DIO_voidSetPinDirection+0x6a>
     bae:	40 c0       	rjmp	.+128    	; 0xc30 <DIO_voidSetPinDirection+0xea>
     bb0:	c7 c0       	rjmp	.+398    	; 0xd40 <DIO_voidSetPinDirection+0x1fa>
			{
			case DIO_u8PORTA: CLR_BIT(DDRA,Copy_u8Pin);break;
     bb2:	aa e3       	ldi	r26, 0x3A	; 58
     bb4:	b0 e0       	ldi	r27, 0x00	; 0
     bb6:	ea e3       	ldi	r30, 0x3A	; 58
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	80 81       	ld	r24, Z
     bbc:	48 2f       	mov	r20, r24
     bbe:	8a 81       	ldd	r24, Y+2	; 0x02
     bc0:	28 2f       	mov	r18, r24
     bc2:	30 e0       	ldi	r19, 0x00	; 0
     bc4:	81 e0       	ldi	r24, 0x01	; 1
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	02 2e       	mov	r0, r18
     bca:	02 c0       	rjmp	.+4      	; 0xbd0 <DIO_voidSetPinDirection+0x8a>
     bcc:	88 0f       	add	r24, r24
     bce:	99 1f       	adc	r25, r25
     bd0:	0a 94       	dec	r0
     bd2:	e2 f7       	brpl	.-8      	; 0xbcc <DIO_voidSetPinDirection+0x86>
     bd4:	80 95       	com	r24
     bd6:	84 23       	and	r24, r20
     bd8:	8c 93       	st	X, r24
     bda:	b2 c0       	rjmp	.+356    	; 0xd40 <DIO_voidSetPinDirection+0x1fa>
			case DIO_u8PORTB: CLR_BIT(DDRB,Copy_u8Pin);break;
     bdc:	a7 e3       	ldi	r26, 0x37	; 55
     bde:	b0 e0       	ldi	r27, 0x00	; 0
     be0:	e7 e3       	ldi	r30, 0x37	; 55
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	80 81       	ld	r24, Z
     be6:	48 2f       	mov	r20, r24
     be8:	8a 81       	ldd	r24, Y+2	; 0x02
     bea:	28 2f       	mov	r18, r24
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	81 e0       	ldi	r24, 0x01	; 1
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	02 2e       	mov	r0, r18
     bf4:	02 c0       	rjmp	.+4      	; 0xbfa <DIO_voidSetPinDirection+0xb4>
     bf6:	88 0f       	add	r24, r24
     bf8:	99 1f       	adc	r25, r25
     bfa:	0a 94       	dec	r0
     bfc:	e2 f7       	brpl	.-8      	; 0xbf6 <DIO_voidSetPinDirection+0xb0>
     bfe:	80 95       	com	r24
     c00:	84 23       	and	r24, r20
     c02:	8c 93       	st	X, r24
     c04:	9d c0       	rjmp	.+314    	; 0xd40 <DIO_voidSetPinDirection+0x1fa>
			case DIO_u8PORTC: CLR_BIT(DDRC,Copy_u8Pin);break;
     c06:	a4 e3       	ldi	r26, 0x34	; 52
     c08:	b0 e0       	ldi	r27, 0x00	; 0
     c0a:	e4 e3       	ldi	r30, 0x34	; 52
     c0c:	f0 e0       	ldi	r31, 0x00	; 0
     c0e:	80 81       	ld	r24, Z
     c10:	48 2f       	mov	r20, r24
     c12:	8a 81       	ldd	r24, Y+2	; 0x02
     c14:	28 2f       	mov	r18, r24
     c16:	30 e0       	ldi	r19, 0x00	; 0
     c18:	81 e0       	ldi	r24, 0x01	; 1
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	02 2e       	mov	r0, r18
     c1e:	02 c0       	rjmp	.+4      	; 0xc24 <DIO_voidSetPinDirection+0xde>
     c20:	88 0f       	add	r24, r24
     c22:	99 1f       	adc	r25, r25
     c24:	0a 94       	dec	r0
     c26:	e2 f7       	brpl	.-8      	; 0xc20 <DIO_voidSetPinDirection+0xda>
     c28:	80 95       	com	r24
     c2a:	84 23       	and	r24, r20
     c2c:	8c 93       	st	X, r24
     c2e:	88 c0       	rjmp	.+272    	; 0xd40 <DIO_voidSetPinDirection+0x1fa>
			case DIO_u8PORTD: CLR_BIT(DDRD,Copy_u8Pin);break;
     c30:	a1 e3       	ldi	r26, 0x31	; 49
     c32:	b0 e0       	ldi	r27, 0x00	; 0
     c34:	e1 e3       	ldi	r30, 0x31	; 49
     c36:	f0 e0       	ldi	r31, 0x00	; 0
     c38:	80 81       	ld	r24, Z
     c3a:	48 2f       	mov	r20, r24
     c3c:	8a 81       	ldd	r24, Y+2	; 0x02
     c3e:	28 2f       	mov	r18, r24
     c40:	30 e0       	ldi	r19, 0x00	; 0
     c42:	81 e0       	ldi	r24, 0x01	; 1
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	02 2e       	mov	r0, r18
     c48:	02 c0       	rjmp	.+4      	; 0xc4e <DIO_voidSetPinDirection+0x108>
     c4a:	88 0f       	add	r24, r24
     c4c:	99 1f       	adc	r25, r25
     c4e:	0a 94       	dec	r0
     c50:	e2 f7       	brpl	.-8      	; 0xc4a <DIO_voidSetPinDirection+0x104>
     c52:	80 95       	com	r24
     c54:	84 23       	and	r24, r20
     c56:	8c 93       	st	X, r24
     c58:	73 c0       	rjmp	.+230    	; 0xd40 <DIO_voidSetPinDirection+0x1fa>

			}

		}
		else if(Copy_u8PinDirection==DIO_u8PIN_OUTPUT)
     c5a:	8b 81       	ldd	r24, Y+3	; 0x03
     c5c:	81 30       	cpi	r24, 0x01	; 1
     c5e:	09 f0       	breq	.+2      	; 0xc62 <DIO_voidSetPinDirection+0x11c>
     c60:	6f c0       	rjmp	.+222    	; 0xd40 <DIO_voidSetPinDirection+0x1fa>
		{
			switch(Copy_u8Port)
     c62:	89 81       	ldd	r24, Y+1	; 0x01
     c64:	28 2f       	mov	r18, r24
     c66:	30 e0       	ldi	r19, 0x00	; 0
     c68:	3d 83       	std	Y+5, r19	; 0x05
     c6a:	2c 83       	std	Y+4, r18	; 0x04
     c6c:	8c 81       	ldd	r24, Y+4	; 0x04
     c6e:	9d 81       	ldd	r25, Y+5	; 0x05
     c70:	82 30       	cpi	r24, 0x02	; 2
     c72:	91 05       	cpc	r25, r1
     c74:	51 f1       	breq	.+84     	; 0xcca <DIO_voidSetPinDirection+0x184>
     c76:	2c 81       	ldd	r18, Y+4	; 0x04
     c78:	3d 81       	ldd	r19, Y+5	; 0x05
     c7a:	23 30       	cpi	r18, 0x03	; 3
     c7c:	31 05       	cpc	r19, r1
     c7e:	34 f4       	brge	.+12     	; 0xc8c <DIO_voidSetPinDirection+0x146>
     c80:	8c 81       	ldd	r24, Y+4	; 0x04
     c82:	9d 81       	ldd	r25, Y+5	; 0x05
     c84:	81 30       	cpi	r24, 0x01	; 1
     c86:	91 05       	cpc	r25, r1
     c88:	61 f0       	breq	.+24     	; 0xca2 <DIO_voidSetPinDirection+0x15c>
     c8a:	5a c0       	rjmp	.+180    	; 0xd40 <DIO_voidSetPinDirection+0x1fa>
     c8c:	2c 81       	ldd	r18, Y+4	; 0x04
     c8e:	3d 81       	ldd	r19, Y+5	; 0x05
     c90:	23 30       	cpi	r18, 0x03	; 3
     c92:	31 05       	cpc	r19, r1
     c94:	71 f1       	breq	.+92     	; 0xcf2 <DIO_voidSetPinDirection+0x1ac>
     c96:	8c 81       	ldd	r24, Y+4	; 0x04
     c98:	9d 81       	ldd	r25, Y+5	; 0x05
     c9a:	84 30       	cpi	r24, 0x04	; 4
     c9c:	91 05       	cpc	r25, r1
     c9e:	e9 f1       	breq	.+122    	; 0xd1a <DIO_voidSetPinDirection+0x1d4>
     ca0:	4f c0       	rjmp	.+158    	; 0xd40 <DIO_voidSetPinDirection+0x1fa>
			{
			case DIO_u8PORTA: SET_BIT(DDRA,Copy_u8Pin);break;
     ca2:	aa e3       	ldi	r26, 0x3A	; 58
     ca4:	b0 e0       	ldi	r27, 0x00	; 0
     ca6:	ea e3       	ldi	r30, 0x3A	; 58
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	80 81       	ld	r24, Z
     cac:	48 2f       	mov	r20, r24
     cae:	8a 81       	ldd	r24, Y+2	; 0x02
     cb0:	28 2f       	mov	r18, r24
     cb2:	30 e0       	ldi	r19, 0x00	; 0
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	02 2e       	mov	r0, r18
     cba:	02 c0       	rjmp	.+4      	; 0xcc0 <DIO_voidSetPinDirection+0x17a>
     cbc:	88 0f       	add	r24, r24
     cbe:	99 1f       	adc	r25, r25
     cc0:	0a 94       	dec	r0
     cc2:	e2 f7       	brpl	.-8      	; 0xcbc <DIO_voidSetPinDirection+0x176>
     cc4:	84 2b       	or	r24, r20
     cc6:	8c 93       	st	X, r24
     cc8:	3b c0       	rjmp	.+118    	; 0xd40 <DIO_voidSetPinDirection+0x1fa>
			case DIO_u8PORTB: SET_BIT(DDRB,Copy_u8Pin);break;
     cca:	a7 e3       	ldi	r26, 0x37	; 55
     ccc:	b0 e0       	ldi	r27, 0x00	; 0
     cce:	e7 e3       	ldi	r30, 0x37	; 55
     cd0:	f0 e0       	ldi	r31, 0x00	; 0
     cd2:	80 81       	ld	r24, Z
     cd4:	48 2f       	mov	r20, r24
     cd6:	8a 81       	ldd	r24, Y+2	; 0x02
     cd8:	28 2f       	mov	r18, r24
     cda:	30 e0       	ldi	r19, 0x00	; 0
     cdc:	81 e0       	ldi	r24, 0x01	; 1
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	02 2e       	mov	r0, r18
     ce2:	02 c0       	rjmp	.+4      	; 0xce8 <DIO_voidSetPinDirection+0x1a2>
     ce4:	88 0f       	add	r24, r24
     ce6:	99 1f       	adc	r25, r25
     ce8:	0a 94       	dec	r0
     cea:	e2 f7       	brpl	.-8      	; 0xce4 <DIO_voidSetPinDirection+0x19e>
     cec:	84 2b       	or	r24, r20
     cee:	8c 93       	st	X, r24
     cf0:	27 c0       	rjmp	.+78     	; 0xd40 <DIO_voidSetPinDirection+0x1fa>
			case DIO_u8PORTC: SET_BIT(DDRC,Copy_u8Pin);break;
     cf2:	a4 e3       	ldi	r26, 0x34	; 52
     cf4:	b0 e0       	ldi	r27, 0x00	; 0
     cf6:	e4 e3       	ldi	r30, 0x34	; 52
     cf8:	f0 e0       	ldi	r31, 0x00	; 0
     cfa:	80 81       	ld	r24, Z
     cfc:	48 2f       	mov	r20, r24
     cfe:	8a 81       	ldd	r24, Y+2	; 0x02
     d00:	28 2f       	mov	r18, r24
     d02:	30 e0       	ldi	r19, 0x00	; 0
     d04:	81 e0       	ldi	r24, 0x01	; 1
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	02 2e       	mov	r0, r18
     d0a:	02 c0       	rjmp	.+4      	; 0xd10 <DIO_voidSetPinDirection+0x1ca>
     d0c:	88 0f       	add	r24, r24
     d0e:	99 1f       	adc	r25, r25
     d10:	0a 94       	dec	r0
     d12:	e2 f7       	brpl	.-8      	; 0xd0c <DIO_voidSetPinDirection+0x1c6>
     d14:	84 2b       	or	r24, r20
     d16:	8c 93       	st	X, r24
     d18:	13 c0       	rjmp	.+38     	; 0xd40 <DIO_voidSetPinDirection+0x1fa>
			case DIO_u8PORTD: SET_BIT(DDRD,Copy_u8Pin);break;
     d1a:	a1 e3       	ldi	r26, 0x31	; 49
     d1c:	b0 e0       	ldi	r27, 0x00	; 0
     d1e:	e1 e3       	ldi	r30, 0x31	; 49
     d20:	f0 e0       	ldi	r31, 0x00	; 0
     d22:	80 81       	ld	r24, Z
     d24:	48 2f       	mov	r20, r24
     d26:	8a 81       	ldd	r24, Y+2	; 0x02
     d28:	28 2f       	mov	r18, r24
     d2a:	30 e0       	ldi	r19, 0x00	; 0
     d2c:	81 e0       	ldi	r24, 0x01	; 1
     d2e:	90 e0       	ldi	r25, 0x00	; 0
     d30:	02 2e       	mov	r0, r18
     d32:	02 c0       	rjmp	.+4      	; 0xd38 <DIO_voidSetPinDirection+0x1f2>
     d34:	88 0f       	add	r24, r24
     d36:	99 1f       	adc	r25, r25
     d38:	0a 94       	dec	r0
     d3a:	e2 f7       	brpl	.-8      	; 0xd34 <DIO_voidSetPinDirection+0x1ee>
     d3c:	84 2b       	or	r24, r20
     d3e:	8c 93       	st	X, r24
			}
		}

	}
}
     d40:	27 96       	adiw	r28, 0x07	; 7
     d42:	0f b6       	in	r0, 0x3f	; 63
     d44:	f8 94       	cli
     d46:	de bf       	out	0x3e, r29	; 62
     d48:	0f be       	out	0x3f, r0	; 63
     d4a:	cd bf       	out	0x3d, r28	; 61
     d4c:	cf 91       	pop	r28
     d4e:	df 91       	pop	r29
     d50:	08 95       	ret

00000d52 <DIO_voidSetPortDirection>:

	void DIO_voidSetPortDirection(u8 Copy_u8Port,u8 Copy_u8PortDirection)
	{
     d52:	df 93       	push	r29
     d54:	cf 93       	push	r28
     d56:	00 d0       	rcall	.+0      	; 0xd58 <DIO_voidSetPortDirection+0x6>
     d58:	00 d0       	rcall	.+0      	; 0xd5a <DIO_voidSetPortDirection+0x8>
     d5a:	cd b7       	in	r28, 0x3d	; 61
     d5c:	de b7       	in	r29, 0x3e	; 62
     d5e:	89 83       	std	Y+1, r24	; 0x01
     d60:	6a 83       	std	Y+2, r22	; 0x02



		switch(Copy_u8Port)
     d62:	89 81       	ldd	r24, Y+1	; 0x01
     d64:	28 2f       	mov	r18, r24
     d66:	30 e0       	ldi	r19, 0x00	; 0
     d68:	3c 83       	std	Y+4, r19	; 0x04
     d6a:	2b 83       	std	Y+3, r18	; 0x03
     d6c:	8b 81       	ldd	r24, Y+3	; 0x03
     d6e:	9c 81       	ldd	r25, Y+4	; 0x04
     d70:	82 30       	cpi	r24, 0x02	; 2
     d72:	91 05       	cpc	r25, r1
     d74:	d9 f0       	breq	.+54     	; 0xdac <DIO_voidSetPortDirection+0x5a>
     d76:	2b 81       	ldd	r18, Y+3	; 0x03
     d78:	3c 81       	ldd	r19, Y+4	; 0x04
     d7a:	23 30       	cpi	r18, 0x03	; 3
     d7c:	31 05       	cpc	r19, r1
     d7e:	34 f4       	brge	.+12     	; 0xd8c <DIO_voidSetPortDirection+0x3a>
     d80:	8b 81       	ldd	r24, Y+3	; 0x03
     d82:	9c 81       	ldd	r25, Y+4	; 0x04
     d84:	81 30       	cpi	r24, 0x01	; 1
     d86:	91 05       	cpc	r25, r1
     d88:	61 f0       	breq	.+24     	; 0xda2 <DIO_voidSetPortDirection+0x50>
     d8a:	1e c0       	rjmp	.+60     	; 0xdc8 <DIO_voidSetPortDirection+0x76>
     d8c:	2b 81       	ldd	r18, Y+3	; 0x03
     d8e:	3c 81       	ldd	r19, Y+4	; 0x04
     d90:	23 30       	cpi	r18, 0x03	; 3
     d92:	31 05       	cpc	r19, r1
     d94:	81 f0       	breq	.+32     	; 0xdb6 <DIO_voidSetPortDirection+0x64>
     d96:	8b 81       	ldd	r24, Y+3	; 0x03
     d98:	9c 81       	ldd	r25, Y+4	; 0x04
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	91 05       	cpc	r25, r1
     d9e:	81 f0       	breq	.+32     	; 0xdc0 <DIO_voidSetPortDirection+0x6e>
     da0:	13 c0       	rjmp	.+38     	; 0xdc8 <DIO_voidSetPortDirection+0x76>
		{
		case DIO_u8PORTA: DDRA=Copy_u8PortDirection;break;
     da2:	ea e3       	ldi	r30, 0x3A	; 58
     da4:	f0 e0       	ldi	r31, 0x00	; 0
     da6:	8a 81       	ldd	r24, Y+2	; 0x02
     da8:	80 83       	st	Z, r24
     daa:	0e c0       	rjmp	.+28     	; 0xdc8 <DIO_voidSetPortDirection+0x76>
		case DIO_u8PORTB: DDRB=Copy_u8PortDirection;break;
     dac:	e7 e3       	ldi	r30, 0x37	; 55
     dae:	f0 e0       	ldi	r31, 0x00	; 0
     db0:	8a 81       	ldd	r24, Y+2	; 0x02
     db2:	80 83       	st	Z, r24
     db4:	09 c0       	rjmp	.+18     	; 0xdc8 <DIO_voidSetPortDirection+0x76>
		case DIO_u8PORTC: DDRC=Copy_u8PortDirection;break;
     db6:	e4 e3       	ldi	r30, 0x34	; 52
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	8a 81       	ldd	r24, Y+2	; 0x02
     dbc:	80 83       	st	Z, r24
     dbe:	04 c0       	rjmp	.+8      	; 0xdc8 <DIO_voidSetPortDirection+0x76>
		case DIO_u8PORTD: DDRD=Copy_u8PortDirection;break;
     dc0:	e1 e3       	ldi	r30, 0x31	; 49
     dc2:	f0 e0       	ldi	r31, 0x00	; 0
     dc4:	8a 81       	ldd	r24, Y+2	; 0x02
     dc6:	80 83       	st	Z, r24
		}

	}
     dc8:	0f 90       	pop	r0
     dca:	0f 90       	pop	r0
     dcc:	0f 90       	pop	r0
     dce:	0f 90       	pop	r0
     dd0:	cf 91       	pop	r28
     dd2:	df 91       	pop	r29
     dd4:	08 95       	ret

00000dd6 <DIO_voidSetPinValue>:


	void DIO_voidSetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8PinValue)
	{
     dd6:	df 93       	push	r29
     dd8:	cf 93       	push	r28
     dda:	cd b7       	in	r28, 0x3d	; 61
     ddc:	de b7       	in	r29, 0x3e	; 62
     dde:	27 97       	sbiw	r28, 0x07	; 7
     de0:	0f b6       	in	r0, 0x3f	; 63
     de2:	f8 94       	cli
     de4:	de bf       	out	0x3e, r29	; 62
     de6:	0f be       	out	0x3f, r0	; 63
     de8:	cd bf       	out	0x3d, r28	; 61
     dea:	89 83       	std	Y+1, r24	; 0x01
     dec:	6a 83       	std	Y+2, r22	; 0x02
     dee:	4b 83       	std	Y+3, r20	; 0x03

		if(Copy_u8Pin<=DIO_u8PIN7){
     df0:	8a 81       	ldd	r24, Y+2	; 0x02
     df2:	88 30       	cpi	r24, 0x08	; 8
     df4:	08 f0       	brcs	.+2      	; 0xdf8 <DIO_voidSetPinValue+0x22>
     df6:	ec c0       	rjmp	.+472    	; 0xfd0 <DIO_voidSetPinValue+0x1fa>
			if(Copy_u8PinValue==DIO_u8PIN_LOW){
     df8:	8b 81       	ldd	r24, Y+3	; 0x03
     dfa:	88 23       	and	r24, r24
     dfc:	09 f0       	breq	.+2      	; 0xe00 <DIO_voidSetPinValue+0x2a>
     dfe:	75 c0       	rjmp	.+234    	; 0xeea <DIO_voidSetPinValue+0x114>
				switch(Copy_u8Port)
     e00:	89 81       	ldd	r24, Y+1	; 0x01
     e02:	28 2f       	mov	r18, r24
     e04:	30 e0       	ldi	r19, 0x00	; 0
     e06:	3f 83       	std	Y+7, r19	; 0x07
     e08:	2e 83       	std	Y+6, r18	; 0x06
     e0a:	8e 81       	ldd	r24, Y+6	; 0x06
     e0c:	9f 81       	ldd	r25, Y+7	; 0x07
     e0e:	82 30       	cpi	r24, 0x02	; 2
     e10:	91 05       	cpc	r25, r1
     e12:	61 f1       	breq	.+88     	; 0xe6c <DIO_voidSetPinValue+0x96>
     e14:	2e 81       	ldd	r18, Y+6	; 0x06
     e16:	3f 81       	ldd	r19, Y+7	; 0x07
     e18:	23 30       	cpi	r18, 0x03	; 3
     e1a:	31 05       	cpc	r19, r1
     e1c:	34 f4       	brge	.+12     	; 0xe2a <DIO_voidSetPinValue+0x54>
     e1e:	8e 81       	ldd	r24, Y+6	; 0x06
     e20:	9f 81       	ldd	r25, Y+7	; 0x07
     e22:	81 30       	cpi	r24, 0x01	; 1
     e24:	91 05       	cpc	r25, r1
     e26:	69 f0       	breq	.+26     	; 0xe42 <DIO_voidSetPinValue+0x6c>
     e28:	d3 c0       	rjmp	.+422    	; 0xfd0 <DIO_voidSetPinValue+0x1fa>
     e2a:	2e 81       	ldd	r18, Y+6	; 0x06
     e2c:	3f 81       	ldd	r19, Y+7	; 0x07
     e2e:	23 30       	cpi	r18, 0x03	; 3
     e30:	31 05       	cpc	r19, r1
     e32:	89 f1       	breq	.+98     	; 0xe96 <DIO_voidSetPinValue+0xc0>
     e34:	8e 81       	ldd	r24, Y+6	; 0x06
     e36:	9f 81       	ldd	r25, Y+7	; 0x07
     e38:	84 30       	cpi	r24, 0x04	; 4
     e3a:	91 05       	cpc	r25, r1
     e3c:	09 f4       	brne	.+2      	; 0xe40 <DIO_voidSetPinValue+0x6a>
     e3e:	40 c0       	rjmp	.+128    	; 0xec0 <DIO_voidSetPinValue+0xea>
     e40:	c7 c0       	rjmp	.+398    	; 0xfd0 <DIO_voidSetPinValue+0x1fa>
				{
				case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin);break;
     e42:	ab e3       	ldi	r26, 0x3B	; 59
     e44:	b0 e0       	ldi	r27, 0x00	; 0
     e46:	eb e3       	ldi	r30, 0x3B	; 59
     e48:	f0 e0       	ldi	r31, 0x00	; 0
     e4a:	80 81       	ld	r24, Z
     e4c:	48 2f       	mov	r20, r24
     e4e:	8a 81       	ldd	r24, Y+2	; 0x02
     e50:	28 2f       	mov	r18, r24
     e52:	30 e0       	ldi	r19, 0x00	; 0
     e54:	81 e0       	ldi	r24, 0x01	; 1
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	02 2e       	mov	r0, r18
     e5a:	02 c0       	rjmp	.+4      	; 0xe60 <DIO_voidSetPinValue+0x8a>
     e5c:	88 0f       	add	r24, r24
     e5e:	99 1f       	adc	r25, r25
     e60:	0a 94       	dec	r0
     e62:	e2 f7       	brpl	.-8      	; 0xe5c <DIO_voidSetPinValue+0x86>
     e64:	80 95       	com	r24
     e66:	84 23       	and	r24, r20
     e68:	8c 93       	st	X, r24
     e6a:	b2 c0       	rjmp	.+356    	; 0xfd0 <DIO_voidSetPinValue+0x1fa>
				case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin);break;
     e6c:	a8 e3       	ldi	r26, 0x38	; 56
     e6e:	b0 e0       	ldi	r27, 0x00	; 0
     e70:	e8 e3       	ldi	r30, 0x38	; 56
     e72:	f0 e0       	ldi	r31, 0x00	; 0
     e74:	80 81       	ld	r24, Z
     e76:	48 2f       	mov	r20, r24
     e78:	8a 81       	ldd	r24, Y+2	; 0x02
     e7a:	28 2f       	mov	r18, r24
     e7c:	30 e0       	ldi	r19, 0x00	; 0
     e7e:	81 e0       	ldi	r24, 0x01	; 1
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	02 2e       	mov	r0, r18
     e84:	02 c0       	rjmp	.+4      	; 0xe8a <DIO_voidSetPinValue+0xb4>
     e86:	88 0f       	add	r24, r24
     e88:	99 1f       	adc	r25, r25
     e8a:	0a 94       	dec	r0
     e8c:	e2 f7       	brpl	.-8      	; 0xe86 <DIO_voidSetPinValue+0xb0>
     e8e:	80 95       	com	r24
     e90:	84 23       	and	r24, r20
     e92:	8c 93       	st	X, r24
     e94:	9d c0       	rjmp	.+314    	; 0xfd0 <DIO_voidSetPinValue+0x1fa>
				case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin);break;
     e96:	a5 e3       	ldi	r26, 0x35	; 53
     e98:	b0 e0       	ldi	r27, 0x00	; 0
     e9a:	e5 e3       	ldi	r30, 0x35	; 53
     e9c:	f0 e0       	ldi	r31, 0x00	; 0
     e9e:	80 81       	ld	r24, Z
     ea0:	48 2f       	mov	r20, r24
     ea2:	8a 81       	ldd	r24, Y+2	; 0x02
     ea4:	28 2f       	mov	r18, r24
     ea6:	30 e0       	ldi	r19, 0x00	; 0
     ea8:	81 e0       	ldi	r24, 0x01	; 1
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	02 2e       	mov	r0, r18
     eae:	02 c0       	rjmp	.+4      	; 0xeb4 <DIO_voidSetPinValue+0xde>
     eb0:	88 0f       	add	r24, r24
     eb2:	99 1f       	adc	r25, r25
     eb4:	0a 94       	dec	r0
     eb6:	e2 f7       	brpl	.-8      	; 0xeb0 <DIO_voidSetPinValue+0xda>
     eb8:	80 95       	com	r24
     eba:	84 23       	and	r24, r20
     ebc:	8c 93       	st	X, r24
     ebe:	88 c0       	rjmp	.+272    	; 0xfd0 <DIO_voidSetPinValue+0x1fa>
				case DIO_u8PORTD: CLR_BIT(PORTD,Copy_u8Pin);break;
     ec0:	a2 e3       	ldi	r26, 0x32	; 50
     ec2:	b0 e0       	ldi	r27, 0x00	; 0
     ec4:	e2 e3       	ldi	r30, 0x32	; 50
     ec6:	f0 e0       	ldi	r31, 0x00	; 0
     ec8:	80 81       	ld	r24, Z
     eca:	48 2f       	mov	r20, r24
     ecc:	8a 81       	ldd	r24, Y+2	; 0x02
     ece:	28 2f       	mov	r18, r24
     ed0:	30 e0       	ldi	r19, 0x00	; 0
     ed2:	81 e0       	ldi	r24, 0x01	; 1
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	02 2e       	mov	r0, r18
     ed8:	02 c0       	rjmp	.+4      	; 0xede <DIO_voidSetPinValue+0x108>
     eda:	88 0f       	add	r24, r24
     edc:	99 1f       	adc	r25, r25
     ede:	0a 94       	dec	r0
     ee0:	e2 f7       	brpl	.-8      	; 0xeda <DIO_voidSetPinValue+0x104>
     ee2:	80 95       	com	r24
     ee4:	84 23       	and	r24, r20
     ee6:	8c 93       	st	X, r24
     ee8:	73 c0       	rjmp	.+230    	; 0xfd0 <DIO_voidSetPinValue+0x1fa>

				}

			}
			else if(Copy_u8PinValue==DIO_u8PIN_HIGH)
     eea:	8b 81       	ldd	r24, Y+3	; 0x03
     eec:	81 30       	cpi	r24, 0x01	; 1
     eee:	09 f0       	breq	.+2      	; 0xef2 <DIO_voidSetPinValue+0x11c>
     ef0:	6f c0       	rjmp	.+222    	; 0xfd0 <DIO_voidSetPinValue+0x1fa>
			{
				switch(Copy_u8Port)
     ef2:	89 81       	ldd	r24, Y+1	; 0x01
     ef4:	28 2f       	mov	r18, r24
     ef6:	30 e0       	ldi	r19, 0x00	; 0
     ef8:	3d 83       	std	Y+5, r19	; 0x05
     efa:	2c 83       	std	Y+4, r18	; 0x04
     efc:	8c 81       	ldd	r24, Y+4	; 0x04
     efe:	9d 81       	ldd	r25, Y+5	; 0x05
     f00:	82 30       	cpi	r24, 0x02	; 2
     f02:	91 05       	cpc	r25, r1
     f04:	51 f1       	breq	.+84     	; 0xf5a <DIO_voidSetPinValue+0x184>
     f06:	2c 81       	ldd	r18, Y+4	; 0x04
     f08:	3d 81       	ldd	r19, Y+5	; 0x05
     f0a:	23 30       	cpi	r18, 0x03	; 3
     f0c:	31 05       	cpc	r19, r1
     f0e:	34 f4       	brge	.+12     	; 0xf1c <DIO_voidSetPinValue+0x146>
     f10:	8c 81       	ldd	r24, Y+4	; 0x04
     f12:	9d 81       	ldd	r25, Y+5	; 0x05
     f14:	81 30       	cpi	r24, 0x01	; 1
     f16:	91 05       	cpc	r25, r1
     f18:	61 f0       	breq	.+24     	; 0xf32 <DIO_voidSetPinValue+0x15c>
     f1a:	5a c0       	rjmp	.+180    	; 0xfd0 <DIO_voidSetPinValue+0x1fa>
     f1c:	2c 81       	ldd	r18, Y+4	; 0x04
     f1e:	3d 81       	ldd	r19, Y+5	; 0x05
     f20:	23 30       	cpi	r18, 0x03	; 3
     f22:	31 05       	cpc	r19, r1
     f24:	71 f1       	breq	.+92     	; 0xf82 <DIO_voidSetPinValue+0x1ac>
     f26:	8c 81       	ldd	r24, Y+4	; 0x04
     f28:	9d 81       	ldd	r25, Y+5	; 0x05
     f2a:	84 30       	cpi	r24, 0x04	; 4
     f2c:	91 05       	cpc	r25, r1
     f2e:	e9 f1       	breq	.+122    	; 0xfaa <DIO_voidSetPinValue+0x1d4>
     f30:	4f c0       	rjmp	.+158    	; 0xfd0 <DIO_voidSetPinValue+0x1fa>
				{
				case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin);break;
     f32:	ab e3       	ldi	r26, 0x3B	; 59
     f34:	b0 e0       	ldi	r27, 0x00	; 0
     f36:	eb e3       	ldi	r30, 0x3B	; 59
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	80 81       	ld	r24, Z
     f3c:	48 2f       	mov	r20, r24
     f3e:	8a 81       	ldd	r24, Y+2	; 0x02
     f40:	28 2f       	mov	r18, r24
     f42:	30 e0       	ldi	r19, 0x00	; 0
     f44:	81 e0       	ldi	r24, 0x01	; 1
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	02 2e       	mov	r0, r18
     f4a:	02 c0       	rjmp	.+4      	; 0xf50 <DIO_voidSetPinValue+0x17a>
     f4c:	88 0f       	add	r24, r24
     f4e:	99 1f       	adc	r25, r25
     f50:	0a 94       	dec	r0
     f52:	e2 f7       	brpl	.-8      	; 0xf4c <DIO_voidSetPinValue+0x176>
     f54:	84 2b       	or	r24, r20
     f56:	8c 93       	st	X, r24
     f58:	3b c0       	rjmp	.+118    	; 0xfd0 <DIO_voidSetPinValue+0x1fa>
				case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin);break;
     f5a:	a8 e3       	ldi	r26, 0x38	; 56
     f5c:	b0 e0       	ldi	r27, 0x00	; 0
     f5e:	e8 e3       	ldi	r30, 0x38	; 56
     f60:	f0 e0       	ldi	r31, 0x00	; 0
     f62:	80 81       	ld	r24, Z
     f64:	48 2f       	mov	r20, r24
     f66:	8a 81       	ldd	r24, Y+2	; 0x02
     f68:	28 2f       	mov	r18, r24
     f6a:	30 e0       	ldi	r19, 0x00	; 0
     f6c:	81 e0       	ldi	r24, 0x01	; 1
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	02 2e       	mov	r0, r18
     f72:	02 c0       	rjmp	.+4      	; 0xf78 <DIO_voidSetPinValue+0x1a2>
     f74:	88 0f       	add	r24, r24
     f76:	99 1f       	adc	r25, r25
     f78:	0a 94       	dec	r0
     f7a:	e2 f7       	brpl	.-8      	; 0xf74 <DIO_voidSetPinValue+0x19e>
     f7c:	84 2b       	or	r24, r20
     f7e:	8c 93       	st	X, r24
     f80:	27 c0       	rjmp	.+78     	; 0xfd0 <DIO_voidSetPinValue+0x1fa>
				case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin);break;
     f82:	a5 e3       	ldi	r26, 0x35	; 53
     f84:	b0 e0       	ldi	r27, 0x00	; 0
     f86:	e5 e3       	ldi	r30, 0x35	; 53
     f88:	f0 e0       	ldi	r31, 0x00	; 0
     f8a:	80 81       	ld	r24, Z
     f8c:	48 2f       	mov	r20, r24
     f8e:	8a 81       	ldd	r24, Y+2	; 0x02
     f90:	28 2f       	mov	r18, r24
     f92:	30 e0       	ldi	r19, 0x00	; 0
     f94:	81 e0       	ldi	r24, 0x01	; 1
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	02 2e       	mov	r0, r18
     f9a:	02 c0       	rjmp	.+4      	; 0xfa0 <DIO_voidSetPinValue+0x1ca>
     f9c:	88 0f       	add	r24, r24
     f9e:	99 1f       	adc	r25, r25
     fa0:	0a 94       	dec	r0
     fa2:	e2 f7       	brpl	.-8      	; 0xf9c <DIO_voidSetPinValue+0x1c6>
     fa4:	84 2b       	or	r24, r20
     fa6:	8c 93       	st	X, r24
     fa8:	13 c0       	rjmp	.+38     	; 0xfd0 <DIO_voidSetPinValue+0x1fa>
				case DIO_u8PORTD: SET_BIT(PORTD,Copy_u8Pin);break;
     faa:	a2 e3       	ldi	r26, 0x32	; 50
     fac:	b0 e0       	ldi	r27, 0x00	; 0
     fae:	e2 e3       	ldi	r30, 0x32	; 50
     fb0:	f0 e0       	ldi	r31, 0x00	; 0
     fb2:	80 81       	ld	r24, Z
     fb4:	48 2f       	mov	r20, r24
     fb6:	8a 81       	ldd	r24, Y+2	; 0x02
     fb8:	28 2f       	mov	r18, r24
     fba:	30 e0       	ldi	r19, 0x00	; 0
     fbc:	81 e0       	ldi	r24, 0x01	; 1
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	02 2e       	mov	r0, r18
     fc2:	02 c0       	rjmp	.+4      	; 0xfc8 <DIO_voidSetPinValue+0x1f2>
     fc4:	88 0f       	add	r24, r24
     fc6:	99 1f       	adc	r25, r25
     fc8:	0a 94       	dec	r0
     fca:	e2 f7       	brpl	.-8      	; 0xfc4 <DIO_voidSetPinValue+0x1ee>
     fcc:	84 2b       	or	r24, r20
     fce:	8c 93       	st	X, r24
			}



		}
	}
     fd0:	27 96       	adiw	r28, 0x07	; 7
     fd2:	0f b6       	in	r0, 0x3f	; 63
     fd4:	f8 94       	cli
     fd6:	de bf       	out	0x3e, r29	; 62
     fd8:	0f be       	out	0x3f, r0	; 63
     fda:	cd bf       	out	0x3d, r28	; 61
     fdc:	cf 91       	pop	r28
     fde:	df 91       	pop	r29
     fe0:	08 95       	ret

00000fe2 <DIO_voidSetPortValue>:
	void DIO_voidSetPortValue(u8 Copy_u8Port,u8 Copy_u8PortValue)
	{
     fe2:	df 93       	push	r29
     fe4:	cf 93       	push	r28
     fe6:	00 d0       	rcall	.+0      	; 0xfe8 <DIO_voidSetPortValue+0x6>
     fe8:	00 d0       	rcall	.+0      	; 0xfea <DIO_voidSetPortValue+0x8>
     fea:	cd b7       	in	r28, 0x3d	; 61
     fec:	de b7       	in	r29, 0x3e	; 62
     fee:	89 83       	std	Y+1, r24	; 0x01
     ff0:	6a 83       	std	Y+2, r22	; 0x02
		switch(Copy_u8Port)
     ff2:	89 81       	ldd	r24, Y+1	; 0x01
     ff4:	28 2f       	mov	r18, r24
     ff6:	30 e0       	ldi	r19, 0x00	; 0
     ff8:	3c 83       	std	Y+4, r19	; 0x04
     ffa:	2b 83       	std	Y+3, r18	; 0x03
     ffc:	8b 81       	ldd	r24, Y+3	; 0x03
     ffe:	9c 81       	ldd	r25, Y+4	; 0x04
    1000:	82 30       	cpi	r24, 0x02	; 2
    1002:	91 05       	cpc	r25, r1
    1004:	d9 f0       	breq	.+54     	; 0x103c <DIO_voidSetPortValue+0x5a>
    1006:	2b 81       	ldd	r18, Y+3	; 0x03
    1008:	3c 81       	ldd	r19, Y+4	; 0x04
    100a:	23 30       	cpi	r18, 0x03	; 3
    100c:	31 05       	cpc	r19, r1
    100e:	34 f4       	brge	.+12     	; 0x101c <DIO_voidSetPortValue+0x3a>
    1010:	8b 81       	ldd	r24, Y+3	; 0x03
    1012:	9c 81       	ldd	r25, Y+4	; 0x04
    1014:	81 30       	cpi	r24, 0x01	; 1
    1016:	91 05       	cpc	r25, r1
    1018:	61 f0       	breq	.+24     	; 0x1032 <DIO_voidSetPortValue+0x50>
    101a:	1e c0       	rjmp	.+60     	; 0x1058 <DIO_voidSetPortValue+0x76>
    101c:	2b 81       	ldd	r18, Y+3	; 0x03
    101e:	3c 81       	ldd	r19, Y+4	; 0x04
    1020:	23 30       	cpi	r18, 0x03	; 3
    1022:	31 05       	cpc	r19, r1
    1024:	81 f0       	breq	.+32     	; 0x1046 <DIO_voidSetPortValue+0x64>
    1026:	8b 81       	ldd	r24, Y+3	; 0x03
    1028:	9c 81       	ldd	r25, Y+4	; 0x04
    102a:	84 30       	cpi	r24, 0x04	; 4
    102c:	91 05       	cpc	r25, r1
    102e:	81 f0       	breq	.+32     	; 0x1050 <DIO_voidSetPortValue+0x6e>
    1030:	13 c0       	rjmp	.+38     	; 0x1058 <DIO_voidSetPortValue+0x76>
		{
		case DIO_u8PORTA: PORTA=Copy_u8PortValue;break;
    1032:	eb e3       	ldi	r30, 0x3B	; 59
    1034:	f0 e0       	ldi	r31, 0x00	; 0
    1036:	8a 81       	ldd	r24, Y+2	; 0x02
    1038:	80 83       	st	Z, r24
    103a:	0e c0       	rjmp	.+28     	; 0x1058 <DIO_voidSetPortValue+0x76>
		case DIO_u8PORTB: PORTB=Copy_u8PortValue;break;
    103c:	e8 e3       	ldi	r30, 0x38	; 56
    103e:	f0 e0       	ldi	r31, 0x00	; 0
    1040:	8a 81       	ldd	r24, Y+2	; 0x02
    1042:	80 83       	st	Z, r24
    1044:	09 c0       	rjmp	.+18     	; 0x1058 <DIO_voidSetPortValue+0x76>
		case DIO_u8PORTC: PORTC=Copy_u8PortValue;break;
    1046:	e5 e3       	ldi	r30, 0x35	; 53
    1048:	f0 e0       	ldi	r31, 0x00	; 0
    104a:	8a 81       	ldd	r24, Y+2	; 0x02
    104c:	80 83       	st	Z, r24
    104e:	04 c0       	rjmp	.+8      	; 0x1058 <DIO_voidSetPortValue+0x76>
		case DIO_u8PORTD: PORTD=Copy_u8PortValue;break;
    1050:	e2 e3       	ldi	r30, 0x32	; 50
    1052:	f0 e0       	ldi	r31, 0x00	; 0
    1054:	8a 81       	ldd	r24, Y+2	; 0x02
    1056:	80 83       	st	Z, r24
		}

	}
    1058:	0f 90       	pop	r0
    105a:	0f 90       	pop	r0
    105c:	0f 90       	pop	r0
    105e:	0f 90       	pop	r0
    1060:	cf 91       	pop	r28
    1062:	df 91       	pop	r29
    1064:	08 95       	ret

00001066 <DIO_u8GetPinValue>:


	u8 DIO_u8GetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin)
	{
    1066:	df 93       	push	r29
    1068:	cf 93       	push	r28
    106a:	00 d0       	rcall	.+0      	; 0x106c <DIO_u8GetPinValue+0x6>
    106c:	00 d0       	rcall	.+0      	; 0x106e <DIO_u8GetPinValue+0x8>
    106e:	0f 92       	push	r0
    1070:	cd b7       	in	r28, 0x3d	; 61
    1072:	de b7       	in	r29, 0x3e	; 62
    1074:	8a 83       	std	Y+2, r24	; 0x02
    1076:	6b 83       	std	Y+3, r22	; 0x03
		u8 Local_u8PinValue=0;
    1078:	19 82       	std	Y+1, r1	; 0x01
		switch(Copy_u8Port){
    107a:	8a 81       	ldd	r24, Y+2	; 0x02
    107c:	28 2f       	mov	r18, r24
    107e:	30 e0       	ldi	r19, 0x00	; 0
    1080:	3d 83       	std	Y+5, r19	; 0x05
    1082:	2c 83       	std	Y+4, r18	; 0x04
    1084:	4c 81       	ldd	r20, Y+4	; 0x04
    1086:	5d 81       	ldd	r21, Y+5	; 0x05
    1088:	42 30       	cpi	r20, 0x02	; 2
    108a:	51 05       	cpc	r21, r1
    108c:	41 f1       	breq	.+80     	; 0x10de <DIO_u8GetPinValue+0x78>
    108e:	8c 81       	ldd	r24, Y+4	; 0x04
    1090:	9d 81       	ldd	r25, Y+5	; 0x05
    1092:	83 30       	cpi	r24, 0x03	; 3
    1094:	91 05       	cpc	r25, r1
    1096:	34 f4       	brge	.+12     	; 0x10a4 <DIO_u8GetPinValue+0x3e>
    1098:	2c 81       	ldd	r18, Y+4	; 0x04
    109a:	3d 81       	ldd	r19, Y+5	; 0x05
    109c:	21 30       	cpi	r18, 0x01	; 1
    109e:	31 05       	cpc	r19, r1
    10a0:	61 f0       	breq	.+24     	; 0x10ba <DIO_u8GetPinValue+0x54>
    10a2:	52 c0       	rjmp	.+164    	; 0x1148 <DIO_u8GetPinValue+0xe2>
    10a4:	4c 81       	ldd	r20, Y+4	; 0x04
    10a6:	5d 81       	ldd	r21, Y+5	; 0x05
    10a8:	43 30       	cpi	r20, 0x03	; 3
    10aa:	51 05       	cpc	r21, r1
    10ac:	51 f1       	breq	.+84     	; 0x1102 <DIO_u8GetPinValue+0x9c>
    10ae:	8c 81       	ldd	r24, Y+4	; 0x04
    10b0:	9d 81       	ldd	r25, Y+5	; 0x05
    10b2:	84 30       	cpi	r24, 0x04	; 4
    10b4:	91 05       	cpc	r25, r1
    10b6:	b9 f1       	breq	.+110    	; 0x1126 <DIO_u8GetPinValue+0xc0>
    10b8:	47 c0       	rjmp	.+142    	; 0x1148 <DIO_u8GetPinValue+0xe2>
		case DIO_u8PORTA: Local_u8PinValue =GET_BIT(PINA,Copy_u8Pin); break;
    10ba:	e9 e3       	ldi	r30, 0x39	; 57
    10bc:	f0 e0       	ldi	r31, 0x00	; 0
    10be:	80 81       	ld	r24, Z
    10c0:	28 2f       	mov	r18, r24
    10c2:	30 e0       	ldi	r19, 0x00	; 0
    10c4:	8b 81       	ldd	r24, Y+3	; 0x03
    10c6:	88 2f       	mov	r24, r24
    10c8:	90 e0       	ldi	r25, 0x00	; 0
    10ca:	a9 01       	movw	r20, r18
    10cc:	02 c0       	rjmp	.+4      	; 0x10d2 <DIO_u8GetPinValue+0x6c>
    10ce:	55 95       	asr	r21
    10d0:	47 95       	ror	r20
    10d2:	8a 95       	dec	r24
    10d4:	e2 f7       	brpl	.-8      	; 0x10ce <DIO_u8GetPinValue+0x68>
    10d6:	ca 01       	movw	r24, r20
    10d8:	81 70       	andi	r24, 0x01	; 1
    10da:	89 83       	std	Y+1, r24	; 0x01
    10dc:	35 c0       	rjmp	.+106    	; 0x1148 <DIO_u8GetPinValue+0xe2>
        case DIO_u8PORTB: Local_u8PinValue =GET_BIT(PINB,Copy_u8Pin); break;
    10de:	e6 e3       	ldi	r30, 0x36	; 54
    10e0:	f0 e0       	ldi	r31, 0x00	; 0
    10e2:	80 81       	ld	r24, Z
    10e4:	28 2f       	mov	r18, r24
    10e6:	30 e0       	ldi	r19, 0x00	; 0
    10e8:	8b 81       	ldd	r24, Y+3	; 0x03
    10ea:	88 2f       	mov	r24, r24
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	a9 01       	movw	r20, r18
    10f0:	02 c0       	rjmp	.+4      	; 0x10f6 <DIO_u8GetPinValue+0x90>
    10f2:	55 95       	asr	r21
    10f4:	47 95       	ror	r20
    10f6:	8a 95       	dec	r24
    10f8:	e2 f7       	brpl	.-8      	; 0x10f2 <DIO_u8GetPinValue+0x8c>
    10fa:	ca 01       	movw	r24, r20
    10fc:	81 70       	andi	r24, 0x01	; 1
    10fe:	89 83       	std	Y+1, r24	; 0x01
    1100:	23 c0       	rjmp	.+70     	; 0x1148 <DIO_u8GetPinValue+0xe2>
		case DIO_u8PORTC: Local_u8PinValue =GET_BIT(PINC,Copy_u8Pin); break;
    1102:	e3 e3       	ldi	r30, 0x33	; 51
    1104:	f0 e0       	ldi	r31, 0x00	; 0
    1106:	80 81       	ld	r24, Z
    1108:	28 2f       	mov	r18, r24
    110a:	30 e0       	ldi	r19, 0x00	; 0
    110c:	8b 81       	ldd	r24, Y+3	; 0x03
    110e:	88 2f       	mov	r24, r24
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	a9 01       	movw	r20, r18
    1114:	02 c0       	rjmp	.+4      	; 0x111a <DIO_u8GetPinValue+0xb4>
    1116:	55 95       	asr	r21
    1118:	47 95       	ror	r20
    111a:	8a 95       	dec	r24
    111c:	e2 f7       	brpl	.-8      	; 0x1116 <DIO_u8GetPinValue+0xb0>
    111e:	ca 01       	movw	r24, r20
    1120:	81 70       	andi	r24, 0x01	; 1
    1122:	89 83       	std	Y+1, r24	; 0x01
    1124:	11 c0       	rjmp	.+34     	; 0x1148 <DIO_u8GetPinValue+0xe2>
		case DIO_u8PORTD: Local_u8PinValue =GET_BIT(PIND,Copy_u8Pin); break;
    1126:	e0 e3       	ldi	r30, 0x30	; 48
    1128:	f0 e0       	ldi	r31, 0x00	; 0
    112a:	80 81       	ld	r24, Z
    112c:	28 2f       	mov	r18, r24
    112e:	30 e0       	ldi	r19, 0x00	; 0
    1130:	8b 81       	ldd	r24, Y+3	; 0x03
    1132:	88 2f       	mov	r24, r24
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	a9 01       	movw	r20, r18
    1138:	02 c0       	rjmp	.+4      	; 0x113e <DIO_u8GetPinValue+0xd8>
    113a:	55 95       	asr	r21
    113c:	47 95       	ror	r20
    113e:	8a 95       	dec	r24
    1140:	e2 f7       	brpl	.-8      	; 0x113a <DIO_u8GetPinValue+0xd4>
    1142:	ca 01       	movw	r24, r20
    1144:	81 70       	andi	r24, 0x01	; 1
    1146:	89 83       	std	Y+1, r24	; 0x01
				}
		return Local_u8PinValue;
    1148:	89 81       	ldd	r24, Y+1	; 0x01
	}
    114a:	0f 90       	pop	r0
    114c:	0f 90       	pop	r0
    114e:	0f 90       	pop	r0
    1150:	0f 90       	pop	r0
    1152:	0f 90       	pop	r0
    1154:	cf 91       	pop	r28
    1156:	df 91       	pop	r29
    1158:	08 95       	ret

0000115a <EEPROM_voidSendData>:
/*Here to send data from uc to EEPROM,first argument is the data you want to send
 * Second arg is where==> 000000(A1)(A0)(00000000)
 * first 6 zeros is obligary after that you choose A1&A0 of which page to write on
 * and finally you choose in the next 8 bits which byte in the page you want to write on  */
void EEPROM_voidSendData(u8 Copy_u8DataByte,u16 Copy_u16Address)
{
    115a:	df 93       	push	r29
    115c:	cf 93       	push	r28
    115e:	00 d0       	rcall	.+0      	; 0x1160 <EEPROM_voidSendData+0x6>
    1160:	0f 92       	push	r0
    1162:	cd b7       	in	r28, 0x3d	; 61
    1164:	de b7       	in	r29, 0x3e	; 62
    1166:	89 83       	std	Y+1, r24	; 0x01
    1168:	7b 83       	std	Y+3, r23	; 0x03
    116a:	6a 83       	std	Y+2, r22	; 0x02

/*First sending the starting condition to initiate the communication between uc and EEPROM*/
TWI_SendStartCondition();
    116c:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <TWI_SendStartCondition>

/*Sending the Slave Address+Write which will be (1010(A2)(A1)(A0) to determine:
 * which EEPROM--Which page*/
TWI_SendSlaveAddressWithWrite((0b1010000)|(A2<<2)|(Copy_u16Address>>8));
    1170:	8a 81       	ldd	r24, Y+2	; 0x02
    1172:	9b 81       	ldd	r25, Y+3	; 0x03
    1174:	89 2f       	mov	r24, r25
    1176:	99 27       	eor	r25, r25
    1178:	80 65       	ori	r24, 0x50	; 80
    117a:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <TWI_SendSlaveAddressWithWrite>

/*Sending which byte in the chosen page to write on by:
 * Casting the 16 bit address to get the least 8bits which contain which byte in the page to write on*/
TWI_SendDataByte((u8)Copy_u16Address);
    117e:	8a 81       	ldd	r24, Y+2	; 0x02
    1180:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <TWI_SendDataByte>

/*Sending the actual data*/
TWI_SendDataByte(Copy_u8DataByte);
    1184:	89 81       	ldd	r24, Y+1	; 0x01
    1186:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <TWI_SendDataByte>

/*Sending the stop condtion*/
TWI_SendStopCondition();
    118a:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <TWI_SendStopCondition>


}
    118e:	0f 90       	pop	r0
    1190:	0f 90       	pop	r0
    1192:	0f 90       	pop	r0
    1194:	cf 91       	pop	r28
    1196:	df 91       	pop	r29
    1198:	08 95       	ret

0000119a <EEPROM_u8RecieveData>:
/*Recieving the data from EEPROM to the uc*/
u8 EEPROM_u8RecieveData(u16 Copy_u16Address)
{
    119a:	df 93       	push	r29
    119c:	cf 93       	push	r28
    119e:	00 d0       	rcall	.+0      	; 0x11a0 <EEPROM_u8RecieveData+0x6>
    11a0:	0f 92       	push	r0
    11a2:	cd b7       	in	r28, 0x3d	; 61
    11a4:	de b7       	in	r29, 0x3e	; 62
    11a6:	9b 83       	std	Y+3, r25	; 0x03
    11a8:	8a 83       	std	Y+2, r24	; 0x02
u8 Local_u8DataByte=NULL;
    11aa:	19 82       	std	Y+1, r1	; 0x01

/*First sending the starting condition to initiate the communication between uc and EEPROM*/
TWI_SendStartCondition();
    11ac:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <TWI_SendStartCondition>
 * 2-TWI_SendDataByte==> which byte in the page
 * 3- TWI_SendRepeatedStartCondition==> re starting to begin the receiving procedure after selecting the page and byte
 * 4-TWI_SendSlaveAddressWithRead==> To read from a certaing EEPROM and page
 * 5-TWI_RecieveDataByte==> receiving the data because the byte to read from is previously been selected
 * 6-Stop the communication*/
TWI_SendSlaveAddressWithWrite((0b1010000)|(A2<<2)|(Copy_u16Address>>8));
    11b0:	8a 81       	ldd	r24, Y+2	; 0x02
    11b2:	9b 81       	ldd	r25, Y+3	; 0x03
    11b4:	89 2f       	mov	r24, r25
    11b6:	99 27       	eor	r25, r25
    11b8:	80 65       	ori	r24, 0x50	; 80
    11ba:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <TWI_SendSlaveAddressWithWrite>


TWI_SendDataByte((u8)Copy_u16Address);
    11be:	8a 81       	ldd	r24, Y+2	; 0x02
    11c0:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <TWI_SendDataByte>


TWI_SendRepeatedStartCondition();
    11c4:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <TWI_SendRepeatedStartCondition>


TWI_SendSlaveAddressWithRead((0b1010000)|(A2<<2)|(Copy_u16Address>>8));
    11c8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ca:	9b 81       	ldd	r25, Y+3	; 0x03
    11cc:	89 2f       	mov	r24, r25
    11ce:	99 27       	eor	r25, r25
    11d0:	80 65       	ori	r24, 0x50	; 80
    11d2:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <TWI_SendSlaveAddressWithRead>


TWI_RecieveDataByte(&Local_u8DataByte);
    11d6:	ce 01       	movw	r24, r28
    11d8:	01 96       	adiw	r24, 0x01	; 1
    11da:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <TWI_RecieveDataByte>


TWI_SendStopCondition();
    11de:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <TWI_SendStopCondition>

return Local_u8DataByte;
    11e2:	89 81       	ldd	r24, Y+1	; 0x01
}
    11e4:	0f 90       	pop	r0
    11e6:	0f 90       	pop	r0
    11e8:	0f 90       	pop	r0
    11ea:	cf 91       	pop	r28
    11ec:	df 91       	pop	r29
    11ee:	08 95       	ret

000011f0 <EXTI_voidINT0Init>:

/*****************pre-build configuration******************/

//INT0 initialization
void EXTI_voidINT0Init(void)
{
    11f0:	df 93       	push	r29
    11f2:	cf 93       	push	r28
    11f4:	cd b7       	in	r28, 0x3d	; 61
    11f6:	de b7       	in	r29, 0x3e	; 62
#if INT0_EN_STATE==INT0_ENABLE
	//Enable peripheral interrupt (PIE)
	SET_BIT(GICR,GICR_INT0);
    11f8:	ab e5       	ldi	r26, 0x5B	; 91
    11fa:	b0 e0       	ldi	r27, 0x00	; 0
    11fc:	eb e5       	ldi	r30, 0x5B	; 91
    11fe:	f0 e0       	ldi	r31, 0x00	; 0
    1200:	80 81       	ld	r24, Z
    1202:	80 64       	ori	r24, 0x40	; 64
    1204:	8c 93       	st	X, r24
#endif


#if INT0_SENSE_CONTROL==INT0_FALLING_EDGE
	//Sensing interrupt of falling edge for INT0
	CLR_BIT(MCUCR,MCUCR_ISC00);
    1206:	a5 e5       	ldi	r26, 0x55	; 85
    1208:	b0 e0       	ldi	r27, 0x00	; 0
    120a:	e5 e5       	ldi	r30, 0x55	; 85
    120c:	f0 e0       	ldi	r31, 0x00	; 0
    120e:	80 81       	ld	r24, Z
    1210:	8e 7f       	andi	r24, 0xFE	; 254
    1212:	8c 93       	st	X, r24
	SET_BIT(MCUCR,MCUCR_ISC01);
    1214:	a5 e5       	ldi	r26, 0x55	; 85
    1216:	b0 e0       	ldi	r27, 0x00	; 0
    1218:	e5 e5       	ldi	r30, 0x55	; 85
    121a:	f0 e0       	ldi	r31, 0x00	; 0
    121c:	80 81       	ld	r24, Z
    121e:	82 60       	ori	r24, 0x02	; 2
    1220:	8c 93       	st	X, r24
	SET_BIT(MCUCR,MCUCR_ISC00);
	SET_BIT(MCUCR,MCUCR_ISC01);
#else
#error "INVALID SENSE CONTROL"
#endif
}
    1222:	cf 91       	pop	r28
    1224:	df 91       	pop	r29
    1226:	08 95       	ret

00001228 <EXTI_voidINT1Init>:
//INT1 initialization
void EXTI_voidINT1Init(void)
{
    1228:	df 93       	push	r29
    122a:	cf 93       	push	r28
    122c:	cd b7       	in	r28, 0x3d	; 61
    122e:	de b7       	in	r29, 0x3e	; 62
#if INT1_EN_STATE==INT1_ENABLE
	//Enable peripheral interrupt (PIE)
	SET_BIT(GICR,GICR_INT1);
    1230:	ab e5       	ldi	r26, 0x5B	; 91
    1232:	b0 e0       	ldi	r27, 0x00	; 0
    1234:	eb e5       	ldi	r30, 0x5B	; 91
    1236:	f0 e0       	ldi	r31, 0x00	; 0
    1238:	80 81       	ld	r24, Z
    123a:	80 68       	ori	r24, 0x80	; 128
    123c:	8c 93       	st	X, r24
#endif


#if INT1_SENSE_CONTROL==INT1_FALLING_EDGE
	//Sensing interrupt of falling edge for INT1
	SET_BIT(MCUCR,MCUCR_ISC11);
    123e:	a5 e5       	ldi	r26, 0x55	; 85
    1240:	b0 e0       	ldi	r27, 0x00	; 0
    1242:	e5 e5       	ldi	r30, 0x55	; 85
    1244:	f0 e0       	ldi	r31, 0x00	; 0
    1246:	80 81       	ld	r24, Z
    1248:	88 60       	ori	r24, 0x08	; 8
    124a:	8c 93       	st	X, r24
	CLR_BIT(MCUCR,MCUCR_ISC10);
    124c:	a5 e5       	ldi	r26, 0x55	; 85
    124e:	b0 e0       	ldi	r27, 0x00	; 0
    1250:	e5 e5       	ldi	r30, 0x55	; 85
    1252:	f0 e0       	ldi	r31, 0x00	; 0
    1254:	80 81       	ld	r24, Z
    1256:	8b 7f       	andi	r24, 0xFB	; 251
    1258:	8c 93       	st	X, r24





}
    125a:	cf 91       	pop	r28
    125c:	df 91       	pop	r29
    125e:	08 95       	ret

00001260 <EXTI_voidINT2Init>:
//INT2 initialization
void EXTI_voidINT2Init(void)
{
    1260:	df 93       	push	r29
    1262:	cf 93       	push	r28
    1264:	cd b7       	in	r28, 0x3d	; 61
    1266:	de b7       	in	r29, 0x3e	; 62


#if INT2_EN_STATE==INT2_ENABLE
	//Enable peripheral interrupt (PIE)
	SET_BIT(GICR,GICR_INT2);
    1268:	ab e5       	ldi	r26, 0x5B	; 91
    126a:	b0 e0       	ldi	r27, 0x00	; 0
    126c:	eb e5       	ldi	r30, 0x5B	; 91
    126e:	f0 e0       	ldi	r31, 0x00	; 0
    1270:	80 81       	ld	r24, Z
    1272:	80 62       	ori	r24, 0x20	; 32
    1274:	8c 93       	st	X, r24
	//THE flag is not into consideration because we are using the ISR approch so its automatically handled
	// global interrupt is to be activated by another function

#elif INT2_SENSE_CONTROL==INT2_RISSING_EDGE
	//Sensing interrupt of rissing edge for INT2
	SET_BIT(MCUCSR,MCUCSR_ISC2);
    1276:	a4 e5       	ldi	r26, 0x54	; 84
    1278:	b0 e0       	ldi	r27, 0x00	; 0
    127a:	e4 e5       	ldi	r30, 0x54	; 84
    127c:	f0 e0       	ldi	r31, 0x00	; 0
    127e:	80 81       	ld	r24, Z
    1280:	80 64       	ori	r24, 0x40	; 64
    1282:	8c 93       	st	X, r24
#else
#error "INVALID SENSE CONTROL"
#endif

}
    1284:	cf 91       	pop	r28
    1286:	df 91       	pop	r29
    1288:	08 95       	ret

0000128a <GIE_voidEnable>:


//Global interrupt (GIE)
//Enable
void GIE_voidEnable(void)
{
    128a:	df 93       	push	r29
    128c:	cf 93       	push	r28
    128e:	cd b7       	in	r28, 0x3d	; 61
    1290:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,SREG_I);
    1292:	af e5       	ldi	r26, 0x5F	; 95
    1294:	b0 e0       	ldi	r27, 0x00	; 0
    1296:	ef e5       	ldi	r30, 0x5F	; 95
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	80 81       	ld	r24, Z
    129c:	80 68       	ori	r24, 0x80	; 128
    129e:	8c 93       	st	X, r24
}
    12a0:	cf 91       	pop	r28
    12a2:	df 91       	pop	r29
    12a4:	08 95       	ret

000012a6 <GIE_voidDisable>:

//Disbale
void GIE_voidDisable(void)
{
    12a6:	df 93       	push	r29
    12a8:	cf 93       	push	r28
    12aa:	cd b7       	in	r28, 0x3d	; 61
    12ac:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,SREG_I);
    12ae:	af e5       	ldi	r26, 0x5F	; 95
    12b0:	b0 e0       	ldi	r27, 0x00	; 0
    12b2:	ef e5       	ldi	r30, 0x5F	; 95
    12b4:	f0 e0       	ldi	r31, 0x00	; 0
    12b6:	80 81       	ld	r24, Z
    12b8:	8f 77       	andi	r24, 0x7F	; 127
    12ba:	8c 93       	st	X, r24
}
    12bc:	cf 91       	pop	r28
    12be:	df 91       	pop	r29
    12c0:	08 95       	ret

000012c2 <EXTI_u8SetCallBack>:

/*Setcallback funcition*/
u8 EXTI_u8SetCallBack(void (*Copy_pvUserFunc) (void))
{
    12c2:	df 93       	push	r29
    12c4:	cf 93       	push	r28
    12c6:	00 d0       	rcall	.+0      	; 0x12c8 <EXTI_u8SetCallBack+0x6>
    12c8:	0f 92       	push	r0
    12ca:	cd b7       	in	r28, 0x3d	; 61
    12cc:	de b7       	in	r29, 0x3e	; 62
    12ce:	9b 83       	std	Y+3, r25	; 0x03
    12d0:	8a 83       	std	Y+2, r24	; 0x02
	u8 Copy_u8LocalErrorCode=OK;
    12d2:	81 e0       	ldi	r24, 0x01	; 1
    12d4:	89 83       	std	Y+1, r24	; 0x01
   if (Copy_pvUserFunc!=NULL)
    12d6:	8a 81       	ldd	r24, Y+2	; 0x02
    12d8:	9b 81       	ldd	r25, Y+3	; 0x03
    12da:	00 97       	sbiw	r24, 0x00	; 0
    12dc:	39 f0       	breq	.+14     	; 0x12ec <EXTI_u8SetCallBack+0x2a>
   {
	EXTI_INT0ptrtofunc=Copy_pvUserFunc;
    12de:	8a 81       	ldd	r24, Y+2	; 0x02
    12e0:	9b 81       	ldd	r25, Y+3	; 0x03
    12e2:	90 93 69 00 	sts	0x0069, r25
    12e6:	80 93 68 00 	sts	0x0068, r24
    12ea:	02 c0       	rjmp	.+4      	; 0x12f0 <EXTI_u8SetCallBack+0x2e>
   }
   else
   {Copy_u8LocalErrorCode=NOT_OK;}
    12ec:	82 e0       	ldi	r24, 0x02	; 2
    12ee:	89 83       	std	Y+1, r24	; 0x01
   return Copy_u8LocalErrorCode;
    12f0:	89 81       	ldd	r24, Y+1	; 0x01
}
    12f2:	0f 90       	pop	r0
    12f4:	0f 90       	pop	r0
    12f6:	0f 90       	pop	r0
    12f8:	cf 91       	pop	r28
    12fa:	df 91       	pop	r29
    12fc:	08 95       	ret

000012fe <__vector_1>:
/*Interrupt service routine (ISR),,get the vector number from datasheet page 42,,we matsa4 tena2as 1*/
/*ISR implemention for INT0*/
void __vector_1(void) __attribute__((signal));
void __vector_1(void)
{
    12fe:	1f 92       	push	r1
    1300:	0f 92       	push	r0
    1302:	0f b6       	in	r0, 0x3f	; 63
    1304:	0f 92       	push	r0
    1306:	11 24       	eor	r1, r1
    1308:	2f 93       	push	r18
    130a:	3f 93       	push	r19
    130c:	4f 93       	push	r20
    130e:	5f 93       	push	r21
    1310:	6f 93       	push	r22
    1312:	7f 93       	push	r23
    1314:	8f 93       	push	r24
    1316:	9f 93       	push	r25
    1318:	af 93       	push	r26
    131a:	bf 93       	push	r27
    131c:	ef 93       	push	r30
    131e:	ff 93       	push	r31
    1320:	df 93       	push	r29
    1322:	cf 93       	push	r28
    1324:	cd b7       	in	r28, 0x3d	; 61
    1326:	de b7       	in	r29, 0x3e	; 62

	if(EXTI_INT0ptrtofunc!=NULL)
    1328:	80 91 68 00 	lds	r24, 0x0068
    132c:	90 91 69 00 	lds	r25, 0x0069
    1330:	00 97       	sbiw	r24, 0x00	; 0
    1332:	29 f0       	breq	.+10     	; 0x133e <__vector_1+0x40>
	{EXTI_INT0ptrtofunc();}
    1334:	e0 91 68 00 	lds	r30, 0x0068
    1338:	f0 91 69 00 	lds	r31, 0x0069
    133c:	09 95       	icall
}
    133e:	cf 91       	pop	r28
    1340:	df 91       	pop	r29
    1342:	ff 91       	pop	r31
    1344:	ef 91       	pop	r30
    1346:	bf 91       	pop	r27
    1348:	af 91       	pop	r26
    134a:	9f 91       	pop	r25
    134c:	8f 91       	pop	r24
    134e:	7f 91       	pop	r23
    1350:	6f 91       	pop	r22
    1352:	5f 91       	pop	r21
    1354:	4f 91       	pop	r20
    1356:	3f 91       	pop	r19
    1358:	2f 91       	pop	r18
    135a:	0f 90       	pop	r0
    135c:	0f be       	out	0x3f, r0	; 63
    135e:	0f 90       	pop	r0
    1360:	1f 90       	pop	r1
    1362:	18 95       	reti

00001364 <LCD_voidSendCommand>:

#include"LCD_interface.h"
#include"LCD_config.h"
#include"LCD_private.h"
void LCD_voidSendCommand(u8 Copy_u8Command)
{
    1364:	df 93       	push	r29
    1366:	cf 93       	push	r28
    1368:	cd b7       	in	r28, 0x3d	; 61
    136a:	de b7       	in	r29, 0x3e	; 62
    136c:	2f 97       	sbiw	r28, 0x0f	; 15
    136e:	0f b6       	in	r0, 0x3f	; 63
    1370:	f8 94       	cli
    1372:	de bf       	out	0x3e, r29	; 62
    1374:	0f be       	out	0x3f, r0	; 63
    1376:	cd bf       	out	0x3d, r28	; 61
    1378:	8f 87       	std	Y+15, r24	; 0x0f
	/*NOTE:ana ha3mel al port wel pin direction fel Init function*/
	/*to send command, put RS to low(0)*/


	DIO_voidSetPinValue(LCD_Control_Port,LCD_RS_PIN,DIO_u8PIN_LOW);// 7ATET AL RS be zero
    137a:	84 e0       	ldi	r24, 0x04	; 4
    137c:	60 e0       	ldi	r22, 0x00	; 0
    137e:	40 e0       	ldi	r20, 0x00	; 0
    1380:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <DIO_voidSetPinValue>
	/*to get to write mode, u have to et RW to low(0)*/
	DIO_voidSetPinValue(LCD_Control_Port,LCD_RW_PIN,DIO_u8PIN_LOW);
    1384:	84 e0       	ldi	r24, 0x04	; 4
    1386:	61 e0       	ldi	r22, 0x01	; 1
    1388:	40 e0       	ldi	r20, 0x00	; 0
    138a:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <DIO_voidSetPinValue>
	/*7ot b2a al command al user hayb3to fel data port(D0---D7)*/
	DIO_voidSetPortValue(LCD_Data_Port,Copy_u8Command);
    138e:	81 e0       	ldi	r24, 0x01	; 1
    1390:	6f 85       	ldd	r22, Y+15	; 0x0f
    1392:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <DIO_voidSetPortValue>
	/*4a8al al enable---HIGH-delay-low*/
	DIO_voidSetPinValue(LCD_Control_Port,LCD_E_PIN,DIO_u8PIN_HIGH);
    1396:	84 e0       	ldi	r24, 0x04	; 4
    1398:	62 e0       	ldi	r22, 0x02	; 2
    139a:	41 e0       	ldi	r20, 0x01	; 1
    139c:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <DIO_voidSetPinValue>
    13a0:	80 e0       	ldi	r24, 0x00	; 0
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	a0 e0       	ldi	r26, 0x00	; 0
    13a6:	b0 e4       	ldi	r27, 0x40	; 64
    13a8:	8b 87       	std	Y+11, r24	; 0x0b
    13aa:	9c 87       	std	Y+12, r25	; 0x0c
    13ac:	ad 87       	std	Y+13, r26	; 0x0d
    13ae:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13b0:	6b 85       	ldd	r22, Y+11	; 0x0b
    13b2:	7c 85       	ldd	r23, Y+12	; 0x0c
    13b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    13b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    13b8:	20 e0       	ldi	r18, 0x00	; 0
    13ba:	30 e0       	ldi	r19, 0x00	; 0
    13bc:	4a ef       	ldi	r20, 0xFA	; 250
    13be:	54 e4       	ldi	r21, 0x44	; 68
    13c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13c4:	dc 01       	movw	r26, r24
    13c6:	cb 01       	movw	r24, r22
    13c8:	8f 83       	std	Y+7, r24	; 0x07
    13ca:	98 87       	std	Y+8, r25	; 0x08
    13cc:	a9 87       	std	Y+9, r26	; 0x09
    13ce:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    13d0:	6f 81       	ldd	r22, Y+7	; 0x07
    13d2:	78 85       	ldd	r23, Y+8	; 0x08
    13d4:	89 85       	ldd	r24, Y+9	; 0x09
    13d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    13d8:	20 e0       	ldi	r18, 0x00	; 0
    13da:	30 e0       	ldi	r19, 0x00	; 0
    13dc:	40 e8       	ldi	r20, 0x80	; 128
    13de:	5f e3       	ldi	r21, 0x3F	; 63
    13e0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13e4:	88 23       	and	r24, r24
    13e6:	2c f4       	brge	.+10     	; 0x13f2 <LCD_voidSendCommand+0x8e>
		__ticks = 1;
    13e8:	81 e0       	ldi	r24, 0x01	; 1
    13ea:	90 e0       	ldi	r25, 0x00	; 0
    13ec:	9e 83       	std	Y+6, r25	; 0x06
    13ee:	8d 83       	std	Y+5, r24	; 0x05
    13f0:	3f c0       	rjmp	.+126    	; 0x1470 <LCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
    13f2:	6f 81       	ldd	r22, Y+7	; 0x07
    13f4:	78 85       	ldd	r23, Y+8	; 0x08
    13f6:	89 85       	ldd	r24, Y+9	; 0x09
    13f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    13fa:	20 e0       	ldi	r18, 0x00	; 0
    13fc:	3f ef       	ldi	r19, 0xFF	; 255
    13fe:	4f e7       	ldi	r20, 0x7F	; 127
    1400:	57 e4       	ldi	r21, 0x47	; 71
    1402:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1406:	18 16       	cp	r1, r24
    1408:	4c f5       	brge	.+82     	; 0x145c <LCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    140a:	6b 85       	ldd	r22, Y+11	; 0x0b
    140c:	7c 85       	ldd	r23, Y+12	; 0x0c
    140e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1410:	9e 85       	ldd	r25, Y+14	; 0x0e
    1412:	20 e0       	ldi	r18, 0x00	; 0
    1414:	30 e0       	ldi	r19, 0x00	; 0
    1416:	40 e2       	ldi	r20, 0x20	; 32
    1418:	51 e4       	ldi	r21, 0x41	; 65
    141a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    141e:	dc 01       	movw	r26, r24
    1420:	cb 01       	movw	r24, r22
    1422:	bc 01       	movw	r22, r24
    1424:	cd 01       	movw	r24, r26
    1426:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    142a:	dc 01       	movw	r26, r24
    142c:	cb 01       	movw	r24, r22
    142e:	9e 83       	std	Y+6, r25	; 0x06
    1430:	8d 83       	std	Y+5, r24	; 0x05
    1432:	0f c0       	rjmp	.+30     	; 0x1452 <LCD_voidSendCommand+0xee>
    1434:	88 ec       	ldi	r24, 0xC8	; 200
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	9c 83       	std	Y+4, r25	; 0x04
    143a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    143c:	8b 81       	ldd	r24, Y+3	; 0x03
    143e:	9c 81       	ldd	r25, Y+4	; 0x04
    1440:	01 97       	sbiw	r24, 0x01	; 1
    1442:	f1 f7       	brne	.-4      	; 0x1440 <LCD_voidSendCommand+0xdc>
    1444:	9c 83       	std	Y+4, r25	; 0x04
    1446:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1448:	8d 81       	ldd	r24, Y+5	; 0x05
    144a:	9e 81       	ldd	r25, Y+6	; 0x06
    144c:	01 97       	sbiw	r24, 0x01	; 1
    144e:	9e 83       	std	Y+6, r25	; 0x06
    1450:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1452:	8d 81       	ldd	r24, Y+5	; 0x05
    1454:	9e 81       	ldd	r25, Y+6	; 0x06
    1456:	00 97       	sbiw	r24, 0x00	; 0
    1458:	69 f7       	brne	.-38     	; 0x1434 <LCD_voidSendCommand+0xd0>
    145a:	14 c0       	rjmp	.+40     	; 0x1484 <LCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    145c:	6f 81       	ldd	r22, Y+7	; 0x07
    145e:	78 85       	ldd	r23, Y+8	; 0x08
    1460:	89 85       	ldd	r24, Y+9	; 0x09
    1462:	9a 85       	ldd	r25, Y+10	; 0x0a
    1464:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1468:	dc 01       	movw	r26, r24
    146a:	cb 01       	movw	r24, r22
    146c:	9e 83       	std	Y+6, r25	; 0x06
    146e:	8d 83       	std	Y+5, r24	; 0x05
    1470:	8d 81       	ldd	r24, Y+5	; 0x05
    1472:	9e 81       	ldd	r25, Y+6	; 0x06
    1474:	9a 83       	std	Y+2, r25	; 0x02
    1476:	89 83       	std	Y+1, r24	; 0x01
    1478:	89 81       	ldd	r24, Y+1	; 0x01
    147a:	9a 81       	ldd	r25, Y+2	; 0x02
    147c:	01 97       	sbiw	r24, 0x01	; 1
    147e:	f1 f7       	brne	.-4      	; 0x147c <LCD_voidSendCommand+0x118>
    1480:	9a 83       	std	Y+2, r25	; 0x02
    1482:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);//han3raf leh 2 millisecond 2odam
	DIO_voidSetPinValue(LCD_Control_Port,LCD_E_PIN,DIO_u8PIN_LOW);
    1484:	84 e0       	ldi	r24, 0x04	; 4
    1486:	62 e0       	ldi	r22, 0x02	; 2
    1488:	40 e0       	ldi	r20, 0x00	; 0
    148a:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <DIO_voidSetPinValue>
}
    148e:	2f 96       	adiw	r28, 0x0f	; 15
    1490:	0f b6       	in	r0, 0x3f	; 63
    1492:	f8 94       	cli
    1494:	de bf       	out	0x3e, r29	; 62
    1496:	0f be       	out	0x3f, r0	; 63
    1498:	cd bf       	out	0x3d, r28	; 61
    149a:	cf 91       	pop	r28
    149c:	df 91       	pop	r29
    149e:	08 95       	ret

000014a0 <LCD_voidSendCharacter>:

void LCD_voidSendCharacter(u8 Copy_u8Character)
{
    14a0:	df 93       	push	r29
    14a2:	cf 93       	push	r28
    14a4:	cd b7       	in	r28, 0x3d	; 61
    14a6:	de b7       	in	r29, 0x3e	; 62
    14a8:	2f 97       	sbiw	r28, 0x0f	; 15
    14aa:	0f b6       	in	r0, 0x3f	; 63
    14ac:	f8 94       	cli
    14ae:	de bf       	out	0x3e, r29	; 62
    14b0:	0f be       	out	0x3f, r0	; 63
    14b2:	cd bf       	out	0x3d, r28	; 61
    14b4:	8f 87       	std	Y+15, r24	; 0x0f
	/*to send data, put RS to high(1)*/

	DIO_voidSetPinValue(LCD_Control_Port,LCD_RS_PIN,DIO_u8PIN_HIGH);// 7ATET AL RS be zero
    14b6:	84 e0       	ldi	r24, 0x04	; 4
    14b8:	60 e0       	ldi	r22, 0x00	; 0
    14ba:	41 e0       	ldi	r20, 0x01	; 1
    14bc:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <DIO_voidSetPinValue>
	/*to get to write mode, u have to et RW to low(0)*/
	DIO_voidSetPinValue(LCD_Control_Port,LCD_RW_PIN,DIO_u8PIN_LOW);
    14c0:	84 e0       	ldi	r24, 0x04	; 4
    14c2:	61 e0       	ldi	r22, 0x01	; 1
    14c4:	40 e0       	ldi	r20, 0x00	; 0
    14c6:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <DIO_voidSetPinValue>
	/*7ot b2a al data al user hayb3to fel data port(D0---D7)*/
	DIO_voidSetPortValue(LCD_Data_Port,Copy_u8Character);
    14ca:	81 e0       	ldi	r24, 0x01	; 1
    14cc:	6f 85       	ldd	r22, Y+15	; 0x0f
    14ce:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <DIO_voidSetPortValue>
	/*4a8al al enable*/
	DIO_voidSetPinValue(LCD_Control_Port,LCD_E_PIN,DIO_u8PIN_HIGH);
    14d2:	84 e0       	ldi	r24, 0x04	; 4
    14d4:	62 e0       	ldi	r22, 0x02	; 2
    14d6:	41 e0       	ldi	r20, 0x01	; 1
    14d8:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <DIO_voidSetPinValue>
    14dc:	80 e0       	ldi	r24, 0x00	; 0
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	a0 e0       	ldi	r26, 0x00	; 0
    14e2:	b0 e4       	ldi	r27, 0x40	; 64
    14e4:	8b 87       	std	Y+11, r24	; 0x0b
    14e6:	9c 87       	std	Y+12, r25	; 0x0c
    14e8:	ad 87       	std	Y+13, r26	; 0x0d
    14ea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    14ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    14f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    14f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    14f4:	20 e0       	ldi	r18, 0x00	; 0
    14f6:	30 e0       	ldi	r19, 0x00	; 0
    14f8:	4a ef       	ldi	r20, 0xFA	; 250
    14fa:	54 e4       	ldi	r21, 0x44	; 68
    14fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1500:	dc 01       	movw	r26, r24
    1502:	cb 01       	movw	r24, r22
    1504:	8f 83       	std	Y+7, r24	; 0x07
    1506:	98 87       	std	Y+8, r25	; 0x08
    1508:	a9 87       	std	Y+9, r26	; 0x09
    150a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    150c:	6f 81       	ldd	r22, Y+7	; 0x07
    150e:	78 85       	ldd	r23, Y+8	; 0x08
    1510:	89 85       	ldd	r24, Y+9	; 0x09
    1512:	9a 85       	ldd	r25, Y+10	; 0x0a
    1514:	20 e0       	ldi	r18, 0x00	; 0
    1516:	30 e0       	ldi	r19, 0x00	; 0
    1518:	40 e8       	ldi	r20, 0x80	; 128
    151a:	5f e3       	ldi	r21, 0x3F	; 63
    151c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1520:	88 23       	and	r24, r24
    1522:	2c f4       	brge	.+10     	; 0x152e <LCD_voidSendCharacter+0x8e>
		__ticks = 1;
    1524:	81 e0       	ldi	r24, 0x01	; 1
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	9e 83       	std	Y+6, r25	; 0x06
    152a:	8d 83       	std	Y+5, r24	; 0x05
    152c:	3f c0       	rjmp	.+126    	; 0x15ac <LCD_voidSendCharacter+0x10c>
	else if (__tmp > 65535)
    152e:	6f 81       	ldd	r22, Y+7	; 0x07
    1530:	78 85       	ldd	r23, Y+8	; 0x08
    1532:	89 85       	ldd	r24, Y+9	; 0x09
    1534:	9a 85       	ldd	r25, Y+10	; 0x0a
    1536:	20 e0       	ldi	r18, 0x00	; 0
    1538:	3f ef       	ldi	r19, 0xFF	; 255
    153a:	4f e7       	ldi	r20, 0x7F	; 127
    153c:	57 e4       	ldi	r21, 0x47	; 71
    153e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1542:	18 16       	cp	r1, r24
    1544:	4c f5       	brge	.+82     	; 0x1598 <LCD_voidSendCharacter+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1546:	6b 85       	ldd	r22, Y+11	; 0x0b
    1548:	7c 85       	ldd	r23, Y+12	; 0x0c
    154a:	8d 85       	ldd	r24, Y+13	; 0x0d
    154c:	9e 85       	ldd	r25, Y+14	; 0x0e
    154e:	20 e0       	ldi	r18, 0x00	; 0
    1550:	30 e0       	ldi	r19, 0x00	; 0
    1552:	40 e2       	ldi	r20, 0x20	; 32
    1554:	51 e4       	ldi	r21, 0x41	; 65
    1556:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    155a:	dc 01       	movw	r26, r24
    155c:	cb 01       	movw	r24, r22
    155e:	bc 01       	movw	r22, r24
    1560:	cd 01       	movw	r24, r26
    1562:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1566:	dc 01       	movw	r26, r24
    1568:	cb 01       	movw	r24, r22
    156a:	9e 83       	std	Y+6, r25	; 0x06
    156c:	8d 83       	std	Y+5, r24	; 0x05
    156e:	0f c0       	rjmp	.+30     	; 0x158e <LCD_voidSendCharacter+0xee>
    1570:	88 ec       	ldi	r24, 0xC8	; 200
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	9c 83       	std	Y+4, r25	; 0x04
    1576:	8b 83       	std	Y+3, r24	; 0x03
    1578:	8b 81       	ldd	r24, Y+3	; 0x03
    157a:	9c 81       	ldd	r25, Y+4	; 0x04
    157c:	01 97       	sbiw	r24, 0x01	; 1
    157e:	f1 f7       	brne	.-4      	; 0x157c <LCD_voidSendCharacter+0xdc>
    1580:	9c 83       	std	Y+4, r25	; 0x04
    1582:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1584:	8d 81       	ldd	r24, Y+5	; 0x05
    1586:	9e 81       	ldd	r25, Y+6	; 0x06
    1588:	01 97       	sbiw	r24, 0x01	; 1
    158a:	9e 83       	std	Y+6, r25	; 0x06
    158c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    158e:	8d 81       	ldd	r24, Y+5	; 0x05
    1590:	9e 81       	ldd	r25, Y+6	; 0x06
    1592:	00 97       	sbiw	r24, 0x00	; 0
    1594:	69 f7       	brne	.-38     	; 0x1570 <LCD_voidSendCharacter+0xd0>
    1596:	14 c0       	rjmp	.+40     	; 0x15c0 <LCD_voidSendCharacter+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1598:	6f 81       	ldd	r22, Y+7	; 0x07
    159a:	78 85       	ldd	r23, Y+8	; 0x08
    159c:	89 85       	ldd	r24, Y+9	; 0x09
    159e:	9a 85       	ldd	r25, Y+10	; 0x0a
    15a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15a4:	dc 01       	movw	r26, r24
    15a6:	cb 01       	movw	r24, r22
    15a8:	9e 83       	std	Y+6, r25	; 0x06
    15aa:	8d 83       	std	Y+5, r24	; 0x05
    15ac:	8d 81       	ldd	r24, Y+5	; 0x05
    15ae:	9e 81       	ldd	r25, Y+6	; 0x06
    15b0:	9a 83       	std	Y+2, r25	; 0x02
    15b2:	89 83       	std	Y+1, r24	; 0x01
    15b4:	89 81       	ldd	r24, Y+1	; 0x01
    15b6:	9a 81       	ldd	r25, Y+2	; 0x02
    15b8:	01 97       	sbiw	r24, 0x01	; 1
    15ba:	f1 f7       	brne	.-4      	; 0x15b8 <LCD_voidSendCharacter+0x118>
    15bc:	9a 83       	std	Y+2, r25	; 0x02
    15be:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);//han3raf leh 2 millisecond 2odam
	DIO_voidSetPinValue(LCD_Control_Port,LCD_E_PIN,DIO_u8PIN_LOW);
    15c0:	84 e0       	ldi	r24, 0x04	; 4
    15c2:	62 e0       	ldi	r22, 0x02	; 2
    15c4:	40 e0       	ldi	r20, 0x00	; 0
    15c6:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <DIO_voidSetPinValue>



}
    15ca:	2f 96       	adiw	r28, 0x0f	; 15
    15cc:	0f b6       	in	r0, 0x3f	; 63
    15ce:	f8 94       	cli
    15d0:	de bf       	out	0x3e, r29	; 62
    15d2:	0f be       	out	0x3f, r0	; 63
    15d4:	cd bf       	out	0x3d, r28	; 61
    15d6:	cf 91       	pop	r28
    15d8:	df 91       	pop	r29
    15da:	08 95       	ret

000015dc <LCD_voidInit>:
void LCD_voidInit(void)//hena ha7ot al direction bta3 pins al data wel control
{
    15dc:	df 93       	push	r29
    15de:	cf 93       	push	r28
    15e0:	cd b7       	in	r28, 0x3d	; 61
    15e2:	de b7       	in	r29, 0x3e	; 62
    15e4:	2e 97       	sbiw	r28, 0x0e	; 14
    15e6:	0f b6       	in	r0, 0x3f	; 63
    15e8:	f8 94       	cli
    15ea:	de bf       	out	0x3e, r29	; 62
    15ec:	0f be       	out	0x3f, r0	; 63
    15ee:	cd bf       	out	0x3d, r28	; 61
#if LCD_Mode==LCD_8BitMode
	/*ha5aly al data pins output, hya keda 3la tol ayan kan hatla3 commands wla data*/
	DIO_voidSetPortDirection(LCD_Data_Port,DIO_u8PORT_OUTPUT);
    15f0:	81 e0       	ldi	r24, 0x01	; 1
    15f2:	6f ef       	ldi	r22, 0xFF	; 255
    15f4:	0e 94 a9 06 	call	0xd52	; 0xd52 <DIO_voidSetPortDirection>
	/*ha5aly bardo al control pins kol wa7da output,bla4 a5aly al control port kolo output 34an dol 3 pins momkn ast3mel nafs al port al 5 pins al ba2yeen fe 7aga tanya*/
	DIO_voidSetPinDirection(LCD_Control_Port,LCD_RS_PIN,DIO_u8PIN_OUTPUT);
    15f8:	84 e0       	ldi	r24, 0x04	; 4
    15fa:	60 e0       	ldi	r22, 0x00	; 0
    15fc:	41 e0       	ldi	r20, 0x01	; 1
    15fe:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_Control_Port,LCD_RW_PIN,DIO_u8PIN_OUTPUT);
    1602:	84 e0       	ldi	r24, 0x04	; 4
    1604:	61 e0       	ldi	r22, 0x01	; 1
    1606:	41 e0       	ldi	r20, 0x01	; 1
    1608:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_Control_Port,LCD_E_PIN,DIO_u8PIN_OUTPUT);
    160c:	84 e0       	ldi	r24, 0x04	; 4
    160e:	62 e0       	ldi	r22, 0x02	; 2
    1610:	41 e0       	ldi	r20, 0x01	; 1
    1612:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_voidSetPinDirection>
    1616:	80 e0       	ldi	r24, 0x00	; 0
    1618:	90 e0       	ldi	r25, 0x00	; 0
    161a:	a0 e2       	ldi	r26, 0x20	; 32
    161c:	b2 e4       	ldi	r27, 0x42	; 66
    161e:	8b 87       	std	Y+11, r24	; 0x0b
    1620:	9c 87       	std	Y+12, r25	; 0x0c
    1622:	ad 87       	std	Y+13, r26	; 0x0d
    1624:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1626:	6b 85       	ldd	r22, Y+11	; 0x0b
    1628:	7c 85       	ldd	r23, Y+12	; 0x0c
    162a:	8d 85       	ldd	r24, Y+13	; 0x0d
    162c:	9e 85       	ldd	r25, Y+14	; 0x0e
    162e:	20 e0       	ldi	r18, 0x00	; 0
    1630:	30 e0       	ldi	r19, 0x00	; 0
    1632:	4a ef       	ldi	r20, 0xFA	; 250
    1634:	54 e4       	ldi	r21, 0x44	; 68
    1636:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    163a:	dc 01       	movw	r26, r24
    163c:	cb 01       	movw	r24, r22
    163e:	8f 83       	std	Y+7, r24	; 0x07
    1640:	98 87       	std	Y+8, r25	; 0x08
    1642:	a9 87       	std	Y+9, r26	; 0x09
    1644:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1646:	6f 81       	ldd	r22, Y+7	; 0x07
    1648:	78 85       	ldd	r23, Y+8	; 0x08
    164a:	89 85       	ldd	r24, Y+9	; 0x09
    164c:	9a 85       	ldd	r25, Y+10	; 0x0a
    164e:	20 e0       	ldi	r18, 0x00	; 0
    1650:	30 e0       	ldi	r19, 0x00	; 0
    1652:	40 e8       	ldi	r20, 0x80	; 128
    1654:	5f e3       	ldi	r21, 0x3F	; 63
    1656:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    165a:	88 23       	and	r24, r24
    165c:	2c f4       	brge	.+10     	; 0x1668 <LCD_voidInit+0x8c>
		__ticks = 1;
    165e:	81 e0       	ldi	r24, 0x01	; 1
    1660:	90 e0       	ldi	r25, 0x00	; 0
    1662:	9e 83       	std	Y+6, r25	; 0x06
    1664:	8d 83       	std	Y+5, r24	; 0x05
    1666:	3f c0       	rjmp	.+126    	; 0x16e6 <LCD_voidInit+0x10a>
	else if (__tmp > 65535)
    1668:	6f 81       	ldd	r22, Y+7	; 0x07
    166a:	78 85       	ldd	r23, Y+8	; 0x08
    166c:	89 85       	ldd	r24, Y+9	; 0x09
    166e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1670:	20 e0       	ldi	r18, 0x00	; 0
    1672:	3f ef       	ldi	r19, 0xFF	; 255
    1674:	4f e7       	ldi	r20, 0x7F	; 127
    1676:	57 e4       	ldi	r21, 0x47	; 71
    1678:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    167c:	18 16       	cp	r1, r24
    167e:	4c f5       	brge	.+82     	; 0x16d2 <LCD_voidInit+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1680:	6b 85       	ldd	r22, Y+11	; 0x0b
    1682:	7c 85       	ldd	r23, Y+12	; 0x0c
    1684:	8d 85       	ldd	r24, Y+13	; 0x0d
    1686:	9e 85       	ldd	r25, Y+14	; 0x0e
    1688:	20 e0       	ldi	r18, 0x00	; 0
    168a:	30 e0       	ldi	r19, 0x00	; 0
    168c:	40 e2       	ldi	r20, 0x20	; 32
    168e:	51 e4       	ldi	r21, 0x41	; 65
    1690:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1694:	dc 01       	movw	r26, r24
    1696:	cb 01       	movw	r24, r22
    1698:	bc 01       	movw	r22, r24
    169a:	cd 01       	movw	r24, r26
    169c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16a0:	dc 01       	movw	r26, r24
    16a2:	cb 01       	movw	r24, r22
    16a4:	9e 83       	std	Y+6, r25	; 0x06
    16a6:	8d 83       	std	Y+5, r24	; 0x05
    16a8:	0f c0       	rjmp	.+30     	; 0x16c8 <LCD_voidInit+0xec>
    16aa:	88 ec       	ldi	r24, 0xC8	; 200
    16ac:	90 e0       	ldi	r25, 0x00	; 0
    16ae:	9c 83       	std	Y+4, r25	; 0x04
    16b0:	8b 83       	std	Y+3, r24	; 0x03
    16b2:	8b 81       	ldd	r24, Y+3	; 0x03
    16b4:	9c 81       	ldd	r25, Y+4	; 0x04
    16b6:	01 97       	sbiw	r24, 0x01	; 1
    16b8:	f1 f7       	brne	.-4      	; 0x16b6 <LCD_voidInit+0xda>
    16ba:	9c 83       	std	Y+4, r25	; 0x04
    16bc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16be:	8d 81       	ldd	r24, Y+5	; 0x05
    16c0:	9e 81       	ldd	r25, Y+6	; 0x06
    16c2:	01 97       	sbiw	r24, 0x01	; 1
    16c4:	9e 83       	std	Y+6, r25	; 0x06
    16c6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16c8:	8d 81       	ldd	r24, Y+5	; 0x05
    16ca:	9e 81       	ldd	r25, Y+6	; 0x06
    16cc:	00 97       	sbiw	r24, 0x00	; 0
    16ce:	69 f7       	brne	.-38     	; 0x16aa <LCD_voidInit+0xce>
    16d0:	14 c0       	rjmp	.+40     	; 0x16fa <LCD_voidInit+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16d2:	6f 81       	ldd	r22, Y+7	; 0x07
    16d4:	78 85       	ldd	r23, Y+8	; 0x08
    16d6:	89 85       	ldd	r24, Y+9	; 0x09
    16d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    16da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16de:	dc 01       	movw	r26, r24
    16e0:	cb 01       	movw	r24, r22
    16e2:	9e 83       	std	Y+6, r25	; 0x06
    16e4:	8d 83       	std	Y+5, r24	; 0x05
    16e6:	8d 81       	ldd	r24, Y+5	; 0x05
    16e8:	9e 81       	ldd	r25, Y+6	; 0x06
    16ea:	9a 83       	std	Y+2, r25	; 0x02
    16ec:	89 83       	std	Y+1, r24	; 0x01
    16ee:	89 81       	ldd	r24, Y+1	; 0x01
    16f0:	9a 81       	ldd	r25, Y+2	; 0x02
    16f2:	01 97       	sbiw	r24, 0x01	; 1
    16f4:	f1 f7       	brne	.-4      	; 0x16f2 <LCD_voidInit+0x116>
    16f6:	9a 83       	std	Y+2, r25	; 0x02
    16f8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(40);
	/*In 8 bit initialization (data sheet) we have to send commands of 0b0011NFxx(Ma4ro7a fel kashkol)
	 *N:Number of lines, 0:for 1 line, 1:for two lines
	 *F:Font size, 0:for 5*8 ,1:for 5*11
	 *x:Dont care (0 or 1 doesnt matter)*/
	LCD_voidSendCommand(0b00111000);
    16fa:	88 e3       	ldi	r24, 0x38	; 56
    16fc:	0e 94 b2 09 	call	0x1364	; 0x1364 <LCD_voidSendCommand>
	/*Initialize display on-off
	 *D:display 0:disable 1: enable
	 *C:cursor 0: disable 1: enable
	 *B: blinking cursor : 0: fixed 1: blinking  */
	LCD_voidSendCommand(0b00001100);
    1700:	8c e0       	ldi	r24, 0x0C	; 12
    1702:	0e 94 b2 09 	call	0x1364	; 0x1364 <LCD_voidSendCommand>
	/*To clear display(tenadaf ale etkatab 2abl keda)*/
	LCD_voidSendCommand(0b00000001);
    1706:	81 e0       	ldi	r24, 0x01	; 1
    1708:	0e 94 b2 09 	call	0x1364	; 0x1364 <LCD_voidSendCommand>

	/*to clear display*/
	LCD_voidSendCommand(0b00000000);
	LCD_voidSendCommand(0b00010000);
#endif
}
    170c:	2e 96       	adiw	r28, 0x0e	; 14
    170e:	0f b6       	in	r0, 0x3f	; 63
    1710:	f8 94       	cli
    1712:	de bf       	out	0x3e, r29	; 62
    1714:	0f be       	out	0x3f, r0	; 63
    1716:	cd bf       	out	0x3d, r28	; 61
    1718:	cf 91       	pop	r28
    171a:	df 91       	pop	r29
    171c:	08 95       	ret

0000171e <LCD_voidPosition>:
void LCD_voidPosition(u8 Copy_u8RowPos,u8 Copy_u8ColPos){
    171e:	df 93       	push	r29
    1720:	cf 93       	push	r28
    1722:	00 d0       	rcall	.+0      	; 0x1724 <LCD_voidPosition+0x6>
    1724:	0f 92       	push	r0
    1726:	cd b7       	in	r28, 0x3d	; 61
    1728:	de b7       	in	r29, 0x3e	; 62
    172a:	8a 83       	std	Y+2, r24	; 0x02
    172c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Address;
	/*Setting the address location if the user wants to set the posion in the first row*/
	if(Copy_u8RowPos==0){
    172e:	8a 81       	ldd	r24, Y+2	; 0x02
    1730:	88 23       	and	r24, r24
    1732:	19 f4       	brne	.+6      	; 0x173a <LCD_voidPosition+0x1c>
		Local_u8Address=Copy_u8ColPos;
    1734:	8b 81       	ldd	r24, Y+3	; 0x03
    1736:	89 83       	std	Y+1, r24	; 0x01
    1738:	06 c0       	rjmp	.+12     	; 0x1746 <LCD_voidPosition+0x28>

	}
	/*Setting the address location if the user wants to set the posion in the second row*/
	else if(Copy_u8RowPos==1){
    173a:	8a 81       	ldd	r24, Y+2	; 0x02
    173c:	81 30       	cpi	r24, 0x01	; 1
    173e:	19 f4       	brne	.+6      	; 0x1746 <LCD_voidPosition+0x28>
		Local_u8Address=Copy_u8ColPos+0x40;
    1740:	8b 81       	ldd	r24, Y+3	; 0x03
    1742:	80 5c       	subi	r24, 0xC0	; 192
    1744:	89 83       	std	Y+1, r24	; 0x01
	}
	/*ana keda 3rf al location na2es ab3to lel LCD ,mawgoda fel datasheet ezay ab3t al address lel DDRAM*/
	//ma4o7a fel ka4kol
	LCD_voidSendCommand(Local_u8Address+128);
    1746:	89 81       	ldd	r24, Y+1	; 0x01
    1748:	80 58       	subi	r24, 0x80	; 128
    174a:	0e 94 b2 09 	call	0x1364	; 0x1364 <LCD_voidSendCommand>
}
    174e:	0f 90       	pop	r0
    1750:	0f 90       	pop	r0
    1752:	0f 90       	pop	r0
    1754:	cf 91       	pop	r28
    1756:	df 91       	pop	r29
    1758:	08 95       	ret

0000175a <LCD_voidSendString>:



/*String is an array of charachters, and the last charachter is (/0)
 */
void LCD_voidSendString(char*Copy_pcString){
    175a:	df 93       	push	r29
    175c:	cf 93       	push	r28
    175e:	00 d0       	rcall	.+0      	; 0x1760 <LCD_voidSendString+0x6>
    1760:	0f 92       	push	r0
    1762:	cd b7       	in	r28, 0x3d	; 61
    1764:	de b7       	in	r29, 0x3e	; 62
    1766:	9b 83       	std	Y+3, r25	; 0x03
    1768:	8a 83       	std	Y+2, r24	; 0x02
    176a:	0e c0       	rjmp	.+28     	; 0x1788 <LCD_voidSendString+0x2e>
	u8 Local_u8Counter;
	while(Copy_pcString[Local_u8Counter]!='\0')
	{
		LCD_voidSendCharacter(Copy_pcString[Local_u8Counter]);
    176c:	89 81       	ldd	r24, Y+1	; 0x01
    176e:	28 2f       	mov	r18, r24
    1770:	30 e0       	ldi	r19, 0x00	; 0
    1772:	8a 81       	ldd	r24, Y+2	; 0x02
    1774:	9b 81       	ldd	r25, Y+3	; 0x03
    1776:	fc 01       	movw	r30, r24
    1778:	e2 0f       	add	r30, r18
    177a:	f3 1f       	adc	r31, r19
    177c:	80 81       	ld	r24, Z
    177e:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <LCD_voidSendCharacter>
		Local_u8Counter++;
    1782:	89 81       	ldd	r24, Y+1	; 0x01
    1784:	8f 5f       	subi	r24, 0xFF	; 255
    1786:	89 83       	std	Y+1, r24	; 0x01

/*String is an array of charachters, and the last charachter is (/0)
 */
void LCD_voidSendString(char*Copy_pcString){
	u8 Local_u8Counter;
	while(Copy_pcString[Local_u8Counter]!='\0')
    1788:	89 81       	ldd	r24, Y+1	; 0x01
    178a:	28 2f       	mov	r18, r24
    178c:	30 e0       	ldi	r19, 0x00	; 0
    178e:	8a 81       	ldd	r24, Y+2	; 0x02
    1790:	9b 81       	ldd	r25, Y+3	; 0x03
    1792:	fc 01       	movw	r30, r24
    1794:	e2 0f       	add	r30, r18
    1796:	f3 1f       	adc	r31, r19
    1798:	80 81       	ld	r24, Z
    179a:	88 23       	and	r24, r24
    179c:	39 f7       	brne	.-50     	; 0x176c <LCD_voidSendString+0x12>
	{
		LCD_voidSendCharacter(Copy_pcString[Local_u8Counter]);
		Local_u8Counter++;
	}

}
    179e:	0f 90       	pop	r0
    17a0:	0f 90       	pop	r0
    17a2:	0f 90       	pop	r0
    17a4:	cf 91       	pop	r28
    17a6:	df 91       	pop	r29
    17a8:	08 95       	ret

000017aa <LCD_voidDrawSpecialCharachter>:


void LCD_voidDrawSpecialCharachter(u8*Copy_pu8Pattern,u8 Copy_u8LocationNum,u8 Copy_u8RowNum,u8 Copy_u8ColNum)
{
    17aa:	df 93       	push	r29
    17ac:	cf 93       	push	r28
    17ae:	cd b7       	in	r28, 0x3d	; 61
    17b0:	de b7       	in	r29, 0x3e	; 62
    17b2:	27 97       	sbiw	r28, 0x07	; 7
    17b4:	0f b6       	in	r0, 0x3f	; 63
    17b6:	f8 94       	cli
    17b8:	de bf       	out	0x3e, r29	; 62
    17ba:	0f be       	out	0x3f, r0	; 63
    17bc:	cd bf       	out	0x3d, r28	; 61
    17be:	9c 83       	std	Y+4, r25	; 0x04
    17c0:	8b 83       	std	Y+3, r24	; 0x03
    17c2:	6d 83       	std	Y+5, r22	; 0x05
    17c4:	4e 83       	std	Y+6, r20	; 0x06
    17c6:	2f 83       	std	Y+7, r18	; 0x07
	/*Accessing the CGRAM address*/
	u8 Local_u8CGRAMAddress,Local_u8Counter;
	Local_u8CGRAMAddress=Copy_u8LocationNum*8;//ma4ro7a fel ka4kol
    17c8:	8d 81       	ldd	r24, Y+5	; 0x05
    17ca:	88 2f       	mov	r24, r24
    17cc:	90 e0       	ldi	r25, 0x00	; 0
    17ce:	88 0f       	add	r24, r24
    17d0:	99 1f       	adc	r25, r25
    17d2:	88 0f       	add	r24, r24
    17d4:	99 1f       	adc	r25, r25
    17d6:	88 0f       	add	r24, r24
    17d8:	99 1f       	adc	r25, r25
    17da:	8a 83       	std	Y+2, r24	; 0x02
	/*Accesing CGRAM of lcd by command 0b01xxxxxx*/
	LCD_voidSendCommand(Local_u8CGRAMAddress+64);
    17dc:	8a 81       	ldd	r24, Y+2	; 0x02
    17de:	80 5c       	subi	r24, 0xC0	; 192
    17e0:	0e 94 b2 09 	call	0x1364	; 0x1364 <LCD_voidSendCommand>
	/*Write the pattern on CGRAM*/
	/*zy makont ba3mel fel string ha3mel hena , bas al fekra ane hawa2f al loop 3nd (((8))) ale howa max bytes in a location in the CGRAM fal user masaln e5tar location 0 fa2a5ro feh 8 charachters ale homa 8 bytes*/
	for(Local_u8Counter=0;Local_u8Counter<8;Local_u8Counter++)
    17e4:	19 82       	std	Y+1, r1	; 0x01
    17e6:	0e c0       	rjmp	.+28     	; 0x1804 <LCD_voidDrawSpecialCharachter+0x5a>
	{
		LCD_voidSendCharacter(Copy_pu8Pattern[Local_u8Counter]);
    17e8:	89 81       	ldd	r24, Y+1	; 0x01
    17ea:	28 2f       	mov	r18, r24
    17ec:	30 e0       	ldi	r19, 0x00	; 0
    17ee:	8b 81       	ldd	r24, Y+3	; 0x03
    17f0:	9c 81       	ldd	r25, Y+4	; 0x04
    17f2:	fc 01       	movw	r30, r24
    17f4:	e2 0f       	add	r30, r18
    17f6:	f3 1f       	adc	r31, r19
    17f8:	80 81       	ld	r24, Z
    17fa:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <LCD_voidSendCharacter>
	Local_u8CGRAMAddress=Copy_u8LocationNum*8;//ma4ro7a fel ka4kol
	/*Accesing CGRAM of lcd by command 0b01xxxxxx*/
	LCD_voidSendCommand(Local_u8CGRAMAddress+64);
	/*Write the pattern on CGRAM*/
	/*zy makont ba3mel fel string ha3mel hena , bas al fekra ane hawa2f al loop 3nd (((8))) ale howa max bytes in a location in the CGRAM fal user masaln e5tar location 0 fa2a5ro feh 8 charachters ale homa 8 bytes*/
	for(Local_u8Counter=0;Local_u8Counter<8;Local_u8Counter++)
    17fe:	89 81       	ldd	r24, Y+1	; 0x01
    1800:	8f 5f       	subi	r24, 0xFF	; 255
    1802:	89 83       	std	Y+1, r24	; 0x01
    1804:	89 81       	ldd	r24, Y+1	; 0x01
    1806:	88 30       	cpi	r24, 0x08	; 8
    1808:	78 f3       	brcs	.-34     	; 0x17e8 <LCD_voidDrawSpecialCharachter+0x3e>
	{
		LCD_voidSendCharacter(Copy_pu8Pattern[Local_u8Counter]);
	}
	/*Keda e7na 7atena al pattern fe location mo3yn fel CGRAM, fa na2esna bas neb3at al pattern lel DDRAM 34an n7oto fel LCD */
	/*kona fo2 3malna command 34an ne access al CGRAM 34an ne access al DDRAM lazem command tany,,wel set position feha asln al command dah*/
	LCD_voidPosition(Copy_u8RowNum,Copy_u8ColNum);
    180a:	8e 81       	ldd	r24, Y+6	; 0x06
    180c:	6f 81       	ldd	r22, Y+7	; 0x07
    180e:	0e 94 8f 0b 	call	0x171e	; 0x171e <LCD_voidPosition>
	LCD_voidSendCharacter(Copy_u8LocationNum);
    1812:	8d 81       	ldd	r24, Y+5	; 0x05
    1814:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <LCD_voidSendCharacter>
}
    1818:	27 96       	adiw	r28, 0x07	; 7
    181a:	0f b6       	in	r0, 0x3f	; 63
    181c:	f8 94       	cli
    181e:	de bf       	out	0x3e, r29	; 62
    1820:	0f be       	out	0x3f, r0	; 63
    1822:	cd bf       	out	0x3d, r28	; 61
    1824:	cf 91       	pop	r28
    1826:	df 91       	pop	r29
    1828:	08 95       	ret

0000182a <LCD_voidWriteNum>:



void LCD_voidWriteNum(u32 copy_u32Number)
{
    182a:	df 93       	push	r29
    182c:	cf 93       	push	r28
    182e:	cd b7       	in	r28, 0x3d	; 61
    1830:	de b7       	in	r29, 0x3e	; 62
    1832:	29 97       	sbiw	r28, 0x09	; 9
    1834:	0f b6       	in	r0, 0x3f	; 63
    1836:	f8 94       	cli
    1838:	de bf       	out	0x3e, r29	; 62
    183a:	0f be       	out	0x3f, r0	; 63
    183c:	cd bf       	out	0x3d, r28	; 61
    183e:	6e 83       	std	Y+6, r22	; 0x06
    1840:	7f 83       	std	Y+7, r23	; 0x07
    1842:	88 87       	std	Y+8, r24	; 0x08
    1844:	99 87       	std	Y+9, r25	; 0x09
	u8 FirstDigit=0;
    1846:	1d 82       	std	Y+5, r1	; 0x05
	for(u32 i=1000000000;i>0;i/=10)
    1848:	80 e0       	ldi	r24, 0x00	; 0
    184a:	9a ec       	ldi	r25, 0xCA	; 202
    184c:	aa e9       	ldi	r26, 0x9A	; 154
    184e:	bb e3       	ldi	r27, 0x3B	; 59
    1850:	89 83       	std	Y+1, r24	; 0x01
    1852:	9a 83       	std	Y+2, r25	; 0x02
    1854:	ab 83       	std	Y+3, r26	; 0x03
    1856:	bc 83       	std	Y+4, r27	; 0x04
    1858:	50 c0       	rjmp	.+160    	; 0x18fa <LCD_voidWriteNum+0xd0>
	{

		if(copy_u32Number/i>0)
    185a:	8e 81       	ldd	r24, Y+6	; 0x06
    185c:	9f 81       	ldd	r25, Y+7	; 0x07
    185e:	a8 85       	ldd	r26, Y+8	; 0x08
    1860:	b9 85       	ldd	r27, Y+9	; 0x09
    1862:	29 81       	ldd	r18, Y+1	; 0x01
    1864:	3a 81       	ldd	r19, Y+2	; 0x02
    1866:	4b 81       	ldd	r20, Y+3	; 0x03
    1868:	5c 81       	ldd	r21, Y+4	; 0x04
    186a:	bc 01       	movw	r22, r24
    186c:	cd 01       	movw	r24, r26
    186e:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <__udivmodsi4>
    1872:	da 01       	movw	r26, r20
    1874:	c9 01       	movw	r24, r18
    1876:	00 97       	sbiw	r24, 0x00	; 0
    1878:	a1 05       	cpc	r26, r1
    187a:	b1 05       	cpc	r27, r1
    187c:	31 f1       	breq	.+76     	; 0x18ca <LCD_voidWriteNum+0xa0>
		{
			LCD_voidSendCharacter(copy_u32Number/i+48);
    187e:	8e 81       	ldd	r24, Y+6	; 0x06
    1880:	9f 81       	ldd	r25, Y+7	; 0x07
    1882:	a8 85       	ldd	r26, Y+8	; 0x08
    1884:	b9 85       	ldd	r27, Y+9	; 0x09
    1886:	29 81       	ldd	r18, Y+1	; 0x01
    1888:	3a 81       	ldd	r19, Y+2	; 0x02
    188a:	4b 81       	ldd	r20, Y+3	; 0x03
    188c:	5c 81       	ldd	r21, Y+4	; 0x04
    188e:	bc 01       	movw	r22, r24
    1890:	cd 01       	movw	r24, r26
    1892:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <__udivmodsi4>
    1896:	da 01       	movw	r26, r20
    1898:	c9 01       	movw	r24, r18
    189a:	80 5d       	subi	r24, 0xD0	; 208
    189c:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <LCD_voidSendCharacter>
			copy_u32Number%=i;
    18a0:	8e 81       	ldd	r24, Y+6	; 0x06
    18a2:	9f 81       	ldd	r25, Y+7	; 0x07
    18a4:	a8 85       	ldd	r26, Y+8	; 0x08
    18a6:	b9 85       	ldd	r27, Y+9	; 0x09
    18a8:	29 81       	ldd	r18, Y+1	; 0x01
    18aa:	3a 81       	ldd	r19, Y+2	; 0x02
    18ac:	4b 81       	ldd	r20, Y+3	; 0x03
    18ae:	5c 81       	ldd	r21, Y+4	; 0x04
    18b0:	bc 01       	movw	r22, r24
    18b2:	cd 01       	movw	r24, r26
    18b4:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <__udivmodsi4>
    18b8:	dc 01       	movw	r26, r24
    18ba:	cb 01       	movw	r24, r22
    18bc:	8e 83       	std	Y+6, r24	; 0x06
    18be:	9f 83       	std	Y+7, r25	; 0x07
    18c0:	a8 87       	std	Y+8, r26	; 0x08
    18c2:	b9 87       	std	Y+9, r27	; 0x09
			FirstDigit=1;
    18c4:	81 e0       	ldi	r24, 0x01	; 1
    18c6:	8d 83       	std	Y+5, r24	; 0x05
    18c8:	06 c0       	rjmp	.+12     	; 0x18d6 <LCD_voidWriteNum+0xac>
		}
		// print 0 after the first digit
		else if(FirstDigit==1)
    18ca:	8d 81       	ldd	r24, Y+5	; 0x05
    18cc:	81 30       	cpi	r24, 0x01	; 1
    18ce:	19 f4       	brne	.+6      	; 0x18d6 <LCD_voidWriteNum+0xac>
		{
			LCD_voidSendCharacter(48);
    18d0:	80 e3       	ldi	r24, 0x30	; 48
    18d2:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <LCD_voidSendCharacter>


void LCD_voidWriteNum(u32 copy_u32Number)
{
	u8 FirstDigit=0;
	for(u32 i=1000000000;i>0;i/=10)
    18d6:	89 81       	ldd	r24, Y+1	; 0x01
    18d8:	9a 81       	ldd	r25, Y+2	; 0x02
    18da:	ab 81       	ldd	r26, Y+3	; 0x03
    18dc:	bc 81       	ldd	r27, Y+4	; 0x04
    18de:	2a e0       	ldi	r18, 0x0A	; 10
    18e0:	30 e0       	ldi	r19, 0x00	; 0
    18e2:	40 e0       	ldi	r20, 0x00	; 0
    18e4:	50 e0       	ldi	r21, 0x00	; 0
    18e6:	bc 01       	movw	r22, r24
    18e8:	cd 01       	movw	r24, r26
    18ea:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <__udivmodsi4>
    18ee:	da 01       	movw	r26, r20
    18f0:	c9 01       	movw	r24, r18
    18f2:	89 83       	std	Y+1, r24	; 0x01
    18f4:	9a 83       	std	Y+2, r25	; 0x02
    18f6:	ab 83       	std	Y+3, r26	; 0x03
    18f8:	bc 83       	std	Y+4, r27	; 0x04
    18fa:	89 81       	ldd	r24, Y+1	; 0x01
    18fc:	9a 81       	ldd	r25, Y+2	; 0x02
    18fe:	ab 81       	ldd	r26, Y+3	; 0x03
    1900:	bc 81       	ldd	r27, Y+4	; 0x04
    1902:	00 97       	sbiw	r24, 0x00	; 0
    1904:	a1 05       	cpc	r26, r1
    1906:	b1 05       	cpc	r27, r1
    1908:	09 f0       	breq	.+2      	; 0x190c <LCD_voidWriteNum+0xe2>
    190a:	a7 cf       	rjmp	.-178    	; 0x185a <LCD_voidWriteNum+0x30>
		else if(FirstDigit==1)
		{
			LCD_voidSendCharacter(48);
		}
	}
}
    190c:	29 96       	adiw	r28, 0x09	; 9
    190e:	0f b6       	in	r0, 0x3f	; 63
    1910:	f8 94       	cli
    1912:	de bf       	out	0x3e, r29	; 62
    1914:	0f be       	out	0x3f, r0	; 63
    1916:	cd bf       	out	0x3d, r28	; 61
    1918:	cf 91       	pop	r28
    191a:	df 91       	pop	r29
    191c:	08 95       	ret

0000191e <TWI_voidMasterInit>:



/*Master init, you have to send the address of the master in case it turns into a slave*/
void TWI_voidMasterInit(u8 Copy_u8NodeAddress)
{
    191e:	df 93       	push	r29
    1920:	cf 93       	push	r28
    1922:	0f 92       	push	r0
    1924:	cd b7       	in	r28, 0x3d	; 61
    1926:	de b7       	in	r29, 0x3e	; 62
    1928:	89 83       	std	Y+1, r24	; 0x01
	/*Settig the SCL frequency to 400kps(equation from page 173)*/
	CLR_BIT(TWSR,TWSR_TWPS0);
    192a:	a1 e2       	ldi	r26, 0x21	; 33
    192c:	b0 e0       	ldi	r27, 0x00	; 0
    192e:	e1 e2       	ldi	r30, 0x21	; 33
    1930:	f0 e0       	ldi	r31, 0x00	; 0
    1932:	80 81       	ld	r24, Z
    1934:	8e 7f       	andi	r24, 0xFE	; 254
    1936:	8c 93       	st	X, r24
	CLR_BIT(TWSR,TWSR_TWPS1);
    1938:	a1 e2       	ldi	r26, 0x21	; 33
    193a:	b0 e0       	ldi	r27, 0x00	; 0
    193c:	e1 e2       	ldi	r30, 0x21	; 33
    193e:	f0 e0       	ldi	r31, 0x00	; 0
    1940:	80 81       	ld	r24, Z
    1942:	8d 7f       	andi	r24, 0xFD	; 253
    1944:	8c 93       	st	X, r24
	TWBR=2;
    1946:	e0 e2       	ldi	r30, 0x20	; 32
    1948:	f0 e0       	ldi	r31, 0x00	; 0
    194a:	82 e0       	ldi	r24, 0x02	; 2
    194c:	80 83       	st	Z, r24

	/*Puttig the Master address,and eliminating the reserved addresess==> 0 & 1111xxx*/
	if((Copy_u8NodeAddress!=0)||(Copy_u8NodeAddress<119))
    194e:	89 81       	ldd	r24, Y+1	; 0x01
    1950:	88 23       	and	r24, r24
    1952:	19 f4       	brne	.+6      	; 0x195a <TWI_voidMasterInit+0x3c>
    1954:	89 81       	ldd	r24, Y+1	; 0x01
    1956:	87 37       	cpi	r24, 0x77	; 119
    1958:	28 f4       	brcc	.+10     	; 0x1964 <TWI_voidMasterInit+0x46>
	{
		/*Shifting 1 to the left because the SA is the most 7 significant bits*/
		TWAR=Copy_u8NodeAddress << 1;
    195a:	e2 e2       	ldi	r30, 0x22	; 34
    195c:	f0 e0       	ldi	r31, 0x00	; 0
    195e:	89 81       	ldd	r24, Y+1	; 0x01
    1960:	88 0f       	add	r24, r24
    1962:	80 83       	st	Z, r24
	}
	/*Enable the Acknowledge bit*/
	SET_BIT(TWCR,TWCR_TWEA);
    1964:	a6 e5       	ldi	r26, 0x56	; 86
    1966:	b0 e0       	ldi	r27, 0x00	; 0
    1968:	e6 e5       	ldi	r30, 0x56	; 86
    196a:	f0 e0       	ldi	r31, 0x00	; 0
    196c:	80 81       	ld	r24, Z
    196e:	80 64       	ori	r24, 0x40	; 64
    1970:	8c 93       	st	X, r24

	/*Enable the general Call*/
	SET_BIT(TWAR,TWAR_TWGCE);
    1972:	a2 e2       	ldi	r26, 0x22	; 34
    1974:	b0 e0       	ldi	r27, 0x00	; 0
    1976:	e2 e2       	ldi	r30, 0x22	; 34
    1978:	f0 e0       	ldi	r31, 0x00	; 0
    197a:	80 81       	ld	r24, Z
    197c:	81 60       	ori	r24, 0x01	; 1
    197e:	8c 93       	st	X, r24

	/*Enable the TWI interrupt,DONT FORGET TO ENABLE THE GLOBAL INTERRUPT*/
	//SET_BIT(TWCR,TWCR_TWIE);

	/*Enable the TWI peripheral*/
	SET_BIT(TWCR,TWCR_TWEN);
    1980:	a6 e5       	ldi	r26, 0x56	; 86
    1982:	b0 e0       	ldi	r27, 0x00	; 0
    1984:	e6 e5       	ldi	r30, 0x56	; 86
    1986:	f0 e0       	ldi	r31, 0x00	; 0
    1988:	80 81       	ld	r24, Z
    198a:	84 60       	ori	r24, 0x04	; 4
    198c:	8c 93       	st	X, r24
}
    198e:	0f 90       	pop	r0
    1990:	cf 91       	pop	r28
    1992:	df 91       	pop	r29
    1994:	08 95       	ret

00001996 <TWI_voidSlaveInit>:

/*Slave init*/
void TWI_voidSlaveInit(u8 Copy_u8SlaveAddress)
{
    1996:	df 93       	push	r29
    1998:	cf 93       	push	r28
    199a:	0f 92       	push	r0
    199c:	cd b7       	in	r28, 0x3d	; 61
    199e:	de b7       	in	r29, 0x3e	; 62
    19a0:	89 83       	std	Y+1, r24	; 0x01
	/*Putting the Slave address*/
	/*Shifting 1 to the left because the SA is the most 7 significant bits*/
	TWAR=Copy_u8SlaveAddress << 1;
    19a2:	e2 e2       	ldi	r30, 0x22	; 34
    19a4:	f0 e0       	ldi	r31, 0x00	; 0
    19a6:	89 81       	ldd	r24, Y+1	; 0x01
    19a8:	88 0f       	add	r24, r24
    19aa:	80 83       	st	Z, r24

	/*Enable the TWI peripheral*/
	SET_BIT(TWCR,TWCR_TWEN);
    19ac:	a6 e5       	ldi	r26, 0x56	; 86
    19ae:	b0 e0       	ldi	r27, 0x00	; 0
    19b0:	e6 e5       	ldi	r30, 0x56	; 86
    19b2:	f0 e0       	ldi	r31, 0x00	; 0
    19b4:	80 81       	ld	r24, Z
    19b6:	84 60       	ori	r24, 0x04	; 4
    19b8:	8c 93       	st	X, r24

}
    19ba:	0f 90       	pop	r0
    19bc:	cf 91       	pop	r28
    19be:	df 91       	pop	r29
    19c0:	08 95       	ret

000019c2 <TWI_SendStartCondition>:

/*Send start condition*/
TWI_ErrorCode_t TWI_SendStartCondition(void)
{
    19c2:	df 93       	push	r29
    19c4:	cf 93       	push	r28
    19c6:	0f 92       	push	r0
    19c8:	cd b7       	in	r28, 0x3d	; 61
    19ca:	de b7       	in	r29, 0x3e	; 62

	TWI_ErrorCode_t Local_ErrorStatus= NoError;
    19cc:	19 82       	std	Y+1, r1	; 0x01
	/*Send the start conditon*/
	SET_BIT(TWCR,TWCR_TWSTA);
    19ce:	a6 e5       	ldi	r26, 0x56	; 86
    19d0:	b0 e0       	ldi	r27, 0x00	; 0
    19d2:	e6 e5       	ldi	r30, 0x56	; 86
    19d4:	f0 e0       	ldi	r31, 0x00	; 0
    19d6:	80 81       	ld	r24, Z
    19d8:	80 62       	ori	r24, 0x20	; 32
    19da:	8c 93       	st	X, r24
	/*ma3loma mohma: 2abl mal start maybda2 al flag aslan bykon marfo3 f34an
	 * al start yetbe3et lazem tclear aflag, we ba3d mal start yetbe3t al flag hytrefe3 tany
	 * wel status code hatwsal, we ba3d keda tegahez al SA+R/W ,clear flag we eb3at al SA+R/W*/

	/*Clearing the flag to send the start condition */
	SET_BIT(TWCR,TWCR_TWINT);
    19dc:	a6 e5       	ldi	r26, 0x56	; 86
    19de:	b0 e0       	ldi	r27, 0x00	; 0
    19e0:	e6 e5       	ldi	r30, 0x56	; 86
    19e2:	f0 e0       	ldi	r31, 0x00	; 0
    19e4:	80 81       	ld	r24, Z
    19e6:	80 68       	ori	r24, 0x80	; 128
    19e8:	8c 93       	st	X, r24

	/*Wait until the flag is raised*/
	while(GET_BIT(TWCR,TWCR_TWINT) == 0);
    19ea:	e6 e5       	ldi	r30, 0x56	; 86
    19ec:	f0 e0       	ldi	r31, 0x00	; 0
    19ee:	80 81       	ld	r24, Z
    19f0:	88 23       	and	r24, r24
    19f2:	dc f7       	brge	.-10     	; 0x19ea <TWI_SendStartCondition+0x28>

	/*Check the status code is equal to the start or not*/
	if((TWSR & 0b11111000) != START_ACK) //bit masking bit 2:0
    19f4:	e1 e2       	ldi	r30, 0x21	; 33
    19f6:	f0 e0       	ldi	r31, 0x00	; 0
    19f8:	80 81       	ld	r24, Z
    19fa:	88 2f       	mov	r24, r24
    19fc:	90 e0       	ldi	r25, 0x00	; 0
    19fe:	88 7f       	andi	r24, 0xF8	; 248
    1a00:	90 70       	andi	r25, 0x00	; 0
    1a02:	88 30       	cpi	r24, 0x08	; 8
    1a04:	91 05       	cpc	r25, r1
    1a06:	11 f0       	breq	.+4      	; 0x1a0c <TWI_SendStartCondition+0x4a>
	{
		Local_ErrorStatus=StartError;
    1a08:	81 e0       	ldi	r24, 0x01	; 1
    1a0a:	89 83       	std	Y+1, r24	; 0x01
	{
		/*Do nothing*/

	}

	return Local_ErrorStatus;
    1a0c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a0e:	0f 90       	pop	r0
    1a10:	cf 91       	pop	r28
    1a12:	df 91       	pop	r29
    1a14:	08 95       	ret

00001a16 <TWI_SendRepeatedStartCondition>:

/*Send repeated start condition*/
/*same as start condition but with change of ACK*/
TWI_ErrorCode_t TWI_SendRepeatedStartCondition(void)
{
    1a16:	df 93       	push	r29
    1a18:	cf 93       	push	r28
    1a1a:	0f 92       	push	r0
    1a1c:	cd b7       	in	r28, 0x3d	; 61
    1a1e:	de b7       	in	r29, 0x3e	; 62
	TWI_ErrorCode_t Local_ErrorStatus= NoError;
    1a20:	19 82       	std	Y+1, r1	; 0x01

	/*Send the repeated start conditon*/
	SET_BIT(TWCR,TWCR_TWSTA);
    1a22:	a6 e5       	ldi	r26, 0x56	; 86
    1a24:	b0 e0       	ldi	r27, 0x00	; 0
    1a26:	e6 e5       	ldi	r30, 0x56	; 86
    1a28:	f0 e0       	ldi	r31, 0x00	; 0
    1a2a:	80 81       	ld	r24, Z
    1a2c:	80 62       	ori	r24, 0x20	; 32
    1a2e:	8c 93       	st	X, r24
	/*ma3loma mohma: 2abl mal start maybda2 al flag aslan bykon marfo3 f34an
	 * al start yetbe3et lazem tclear aflag, we ba3d mal start yetbe3t al flag hytrefe3 tany
	 * wel status code hatwsal, we ba3d keda tegahez al SA+R/W ,clear flag we eb3at al SA+R/W*/

	/*Clearing the flag to send the start condition */
	SET_BIT(TWCR,TWCR_TWINT);
    1a30:	a6 e5       	ldi	r26, 0x56	; 86
    1a32:	b0 e0       	ldi	r27, 0x00	; 0
    1a34:	e6 e5       	ldi	r30, 0x56	; 86
    1a36:	f0 e0       	ldi	r31, 0x00	; 0
    1a38:	80 81       	ld	r24, Z
    1a3a:	80 68       	ori	r24, 0x80	; 128
    1a3c:	8c 93       	st	X, r24

	/*Wait until the flag is raised to know that the process is done*/
	while(GET_BIT(TWCR,TWCR_TWINT) == 0);
    1a3e:	e6 e5       	ldi	r30, 0x56	; 86
    1a40:	f0 e0       	ldi	r31, 0x00	; 0
    1a42:	80 81       	ld	r24, Z
    1a44:	88 23       	and	r24, r24
    1a46:	dc f7       	brge	.-10     	; 0x1a3e <TWI_SendRepeatedStartCondition+0x28>

	/*Check the status code is equal to the start or not*/
	if((TWSR & 0b11111000) != REP_START_ACK) //bit masking bit 2:0
    1a48:	e1 e2       	ldi	r30, 0x21	; 33
    1a4a:	f0 e0       	ldi	r31, 0x00	; 0
    1a4c:	80 81       	ld	r24, Z
    1a4e:	88 2f       	mov	r24, r24
    1a50:	90 e0       	ldi	r25, 0x00	; 0
    1a52:	88 7f       	andi	r24, 0xF8	; 248
    1a54:	90 70       	andi	r25, 0x00	; 0
    1a56:	80 31       	cpi	r24, 0x10	; 16
    1a58:	91 05       	cpc	r25, r1
    1a5a:	11 f0       	breq	.+4      	; 0x1a60 <TWI_SendRepeatedStartCondition+0x4a>
	{
		Local_ErrorStatus=RepeatedStartError;
    1a5c:	82 e0       	ldi	r24, 0x02	; 2
    1a5e:	89 83       	std	Y+1, r24	; 0x01
	{
		/*Do nothing*/

	}

	return Local_ErrorStatus;
    1a60:	89 81       	ldd	r24, Y+1	; 0x01


}
    1a62:	0f 90       	pop	r0
    1a64:	cf 91       	pop	r28
    1a66:	df 91       	pop	r29
    1a68:	08 95       	ret

00001a6a <TWI_SendSlaveAddressWithWrite>:

/*Send Slave address with write*/
TWI_ErrorCode_t TWI_SendSlaveAddressWithWrite(u8 Copy_u8SlaveAddress)
{
    1a6a:	df 93       	push	r29
    1a6c:	cf 93       	push	r28
    1a6e:	00 d0       	rcall	.+0      	; 0x1a70 <TWI_SendSlaveAddressWithWrite+0x6>
    1a70:	cd b7       	in	r28, 0x3d	; 61
    1a72:	de b7       	in	r29, 0x3e	; 62
    1a74:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorCode_t Local_ErrorStatus= NoError;
    1a76:	19 82       	std	Y+1, r1	; 0x01

	/*Clearing the start condition bit*/
	CLR_BIT(TWCR,TWCR_TWSTA);
    1a78:	a6 e5       	ldi	r26, 0x56	; 86
    1a7a:	b0 e0       	ldi	r27, 0x00	; 0
    1a7c:	e6 e5       	ldi	r30, 0x56	; 86
    1a7e:	f0 e0       	ldi	r31, 0x00	; 0
    1a80:	80 81       	ld	r24, Z
    1a82:	8f 7d       	andi	r24, 0xDF	; 223
    1a84:	8c 93       	st	X, r24

	/*Sending the TWDR the slave address and Write condtion(0)*/
	TWDR=Copy_u8SlaveAddress << 1;
    1a86:	e3 e2       	ldi	r30, 0x23	; 35
    1a88:	f0 e0       	ldi	r31, 0x00	; 0
    1a8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a8c:	88 0f       	add	r24, r24
    1a8e:	80 83       	st	Z, r24
	CLR_BIT(TWDR,0);
    1a90:	a3 e2       	ldi	r26, 0x23	; 35
    1a92:	b0 e0       	ldi	r27, 0x00	; 0
    1a94:	e3 e2       	ldi	r30, 0x23	; 35
    1a96:	f0 e0       	ldi	r31, 0x00	; 0
    1a98:	80 81       	ld	r24, Z
    1a9a:	8e 7f       	andi	r24, 0xFE	; 254
    1a9c:	8c 93       	st	X, r24

	/*CLear the flag to send the SLA+W*/
	SET_BIT(TWCR,TWCR_TWINT);
    1a9e:	a6 e5       	ldi	r26, 0x56	; 86
    1aa0:	b0 e0       	ldi	r27, 0x00	; 0
    1aa2:	e6 e5       	ldi	r30, 0x56	; 86
    1aa4:	f0 e0       	ldi	r31, 0x00	; 0
    1aa6:	80 81       	ld	r24, Z
    1aa8:	80 68       	ori	r24, 0x80	; 128
    1aaa:	8c 93       	st	X, r24

	/*Wait until the flag is raised to know that the process is done*/
	while(GET_BIT(TWCR,TWCR_TWINT) == 0);
    1aac:	e6 e5       	ldi	r30, 0x56	; 86
    1aae:	f0 e0       	ldi	r31, 0x00	; 0
    1ab0:	80 81       	ld	r24, Z
    1ab2:	88 23       	and	r24, r24
    1ab4:	dc f7       	brge	.-10     	; 0x1aac <TWI_SendSlaveAddressWithWrite+0x42>

	/*Check for SLA+W status*/
	if((TWSR & 0b11111000) != SLAVE_ADD_AND_WR_ACK) //bit masking bit 2:0
    1ab6:	e1 e2       	ldi	r30, 0x21	; 33
    1ab8:	f0 e0       	ldi	r31, 0x00	; 0
    1aba:	80 81       	ld	r24, Z
    1abc:	88 2f       	mov	r24, r24
    1abe:	90 e0       	ldi	r25, 0x00	; 0
    1ac0:	88 7f       	andi	r24, 0xF8	; 248
    1ac2:	90 70       	andi	r25, 0x00	; 0
    1ac4:	88 31       	cpi	r24, 0x18	; 24
    1ac6:	91 05       	cpc	r25, r1
    1ac8:	11 f0       	breq	.+4      	; 0x1ace <TWI_SendSlaveAddressWithWrite+0x64>
	{
		Local_ErrorStatus=SlaveAddWithWriteError;
    1aca:	83 e0       	ldi	r24, 0x03	; 3
    1acc:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{
		/*Do nothing*/
	}
	return Local_ErrorStatus;
    1ace:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ad0:	0f 90       	pop	r0
    1ad2:	0f 90       	pop	r0
    1ad4:	cf 91       	pop	r28
    1ad6:	df 91       	pop	r29
    1ad8:	08 95       	ret

00001ada <TWI_SendSlaveAddressWithRead>:

/*Send Slave address with Read*/
TWI_ErrorCode_t TWI_SendSlaveAddressWithRead(u8 Copy_u8SlaveAddress)
{
    1ada:	df 93       	push	r29
    1adc:	cf 93       	push	r28
    1ade:	00 d0       	rcall	.+0      	; 0x1ae0 <TWI_SendSlaveAddressWithRead+0x6>
    1ae0:	cd b7       	in	r28, 0x3d	; 61
    1ae2:	de b7       	in	r29, 0x3e	; 62
    1ae4:	8a 83       	std	Y+2, r24	; 0x02

	TWI_ErrorCode_t Local_ErrorStatus= NoError;
    1ae6:	19 82       	std	Y+1, r1	; 0x01

	/*Clearing the start condition bit*/
	CLR_BIT(TWCR,TWCR_TWSTA);
    1ae8:	a6 e5       	ldi	r26, 0x56	; 86
    1aea:	b0 e0       	ldi	r27, 0x00	; 0
    1aec:	e6 e5       	ldi	r30, 0x56	; 86
    1aee:	f0 e0       	ldi	r31, 0x00	; 0
    1af0:	80 81       	ld	r24, Z
    1af2:	8f 7d       	andi	r24, 0xDF	; 223
    1af4:	8c 93       	st	X, r24

	/*Sending the TWDR the slave address and read condtion(1)*/
	TWDR=Copy_u8SlaveAddress << 1;
    1af6:	e3 e2       	ldi	r30, 0x23	; 35
    1af8:	f0 e0       	ldi	r31, 0x00	; 0
    1afa:	8a 81       	ldd	r24, Y+2	; 0x02
    1afc:	88 0f       	add	r24, r24
    1afe:	80 83       	st	Z, r24
	SET_BIT(TWDR,0);
    1b00:	a3 e2       	ldi	r26, 0x23	; 35
    1b02:	b0 e0       	ldi	r27, 0x00	; 0
    1b04:	e3 e2       	ldi	r30, 0x23	; 35
    1b06:	f0 e0       	ldi	r31, 0x00	; 0
    1b08:	80 81       	ld	r24, Z
    1b0a:	81 60       	ori	r24, 0x01	; 1
    1b0c:	8c 93       	st	X, r24

	/*CLear the flag to send the SLA+R*/
	SET_BIT(TWCR,TWCR_TWINT);
    1b0e:	a6 e5       	ldi	r26, 0x56	; 86
    1b10:	b0 e0       	ldi	r27, 0x00	; 0
    1b12:	e6 e5       	ldi	r30, 0x56	; 86
    1b14:	f0 e0       	ldi	r31, 0x00	; 0
    1b16:	80 81       	ld	r24, Z
    1b18:	80 68       	ori	r24, 0x80	; 128
    1b1a:	8c 93       	st	X, r24

	/*Wait until the flag is raised to know that the process is done*/
	while(GET_BIT(TWCR,TWCR_TWINT) == 0);
    1b1c:	e6 e5       	ldi	r30, 0x56	; 86
    1b1e:	f0 e0       	ldi	r31, 0x00	; 0
    1b20:	80 81       	ld	r24, Z
    1b22:	88 23       	and	r24, r24
    1b24:	dc f7       	brge	.-10     	; 0x1b1c <TWI_SendSlaveAddressWithRead+0x42>

	/*Check for SLA+R status*/
	if((TWSR & 0b11111000) != SLAVE_ADD_AND_RD_ACK) //bit masking bit 2:0
    1b26:	e1 e2       	ldi	r30, 0x21	; 33
    1b28:	f0 e0       	ldi	r31, 0x00	; 0
    1b2a:	80 81       	ld	r24, Z
    1b2c:	88 2f       	mov	r24, r24
    1b2e:	90 e0       	ldi	r25, 0x00	; 0
    1b30:	88 7f       	andi	r24, 0xF8	; 248
    1b32:	90 70       	andi	r25, 0x00	; 0
    1b34:	80 34       	cpi	r24, 0x40	; 64
    1b36:	91 05       	cpc	r25, r1
    1b38:	11 f0       	breq	.+4      	; 0x1b3e <TWI_SendSlaveAddressWithRead+0x64>
	{
		Local_ErrorStatus=SlaveAddWithReadError;
    1b3a:	84 e0       	ldi	r24, 0x04	; 4
    1b3c:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{
		/*Do nothing*/
	}
	return Local_ErrorStatus;
    1b3e:	89 81       	ldd	r24, Y+1	; 0x01


}
    1b40:	0f 90       	pop	r0
    1b42:	0f 90       	pop	r0
    1b44:	cf 91       	pop	r28
    1b46:	df 91       	pop	r29
    1b48:	08 95       	ret

00001b4a <TWI_SendDataByte>:

/* Master Send data byte*/
TWI_ErrorCode_t TWI_SendDataByte(u8 Copy_u8DataByte)
{
    1b4a:	df 93       	push	r29
    1b4c:	cf 93       	push	r28
    1b4e:	00 d0       	rcall	.+0      	; 0x1b50 <TWI_SendDataByte+0x6>
    1b50:	cd b7       	in	r28, 0x3d	; 61
    1b52:	de b7       	in	r29, 0x3e	; 62
    1b54:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorCode_t Local_ErrorStatus= NoError;
    1b56:	19 82       	std	Y+1, r1	; 0x01

	/*Sending the TWDR the Data byte*/
	TWDR=Copy_u8DataByte;
    1b58:	e3 e2       	ldi	r30, 0x23	; 35
    1b5a:	f0 e0       	ldi	r31, 0x00	; 0
    1b5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b5e:	80 83       	st	Z, r24

	/*CLear the flag to send the Data Byte*/
	SET_BIT(TWCR,TWCR_TWINT);
    1b60:	a6 e5       	ldi	r26, 0x56	; 86
    1b62:	b0 e0       	ldi	r27, 0x00	; 0
    1b64:	e6 e5       	ldi	r30, 0x56	; 86
    1b66:	f0 e0       	ldi	r31, 0x00	; 0
    1b68:	80 81       	ld	r24, Z
    1b6a:	80 68       	ori	r24, 0x80	; 128
    1b6c:	8c 93       	st	X, r24

	/*Wait until the flag is raised to know that the process is done*/
	while(GET_BIT(TWCR,TWCR_TWINT) == 0);
    1b6e:	e6 e5       	ldi	r30, 0x56	; 86
    1b70:	f0 e0       	ldi	r31, 0x00	; 0
    1b72:	80 81       	ld	r24, Z
    1b74:	88 23       	and	r24, r24
    1b76:	dc f7       	brge	.-10     	; 0x1b6e <TWI_SendDataByte+0x24>

	/*Check for Master writng data byte status*/
	if((TWSR & 0b11111000) != MSTR_WR_BYTE_ACK) //bit masking bit 2:0
    1b78:	e1 e2       	ldi	r30, 0x21	; 33
    1b7a:	f0 e0       	ldi	r31, 0x00	; 0
    1b7c:	80 81       	ld	r24, Z
    1b7e:	88 2f       	mov	r24, r24
    1b80:	90 e0       	ldi	r25, 0x00	; 0
    1b82:	88 7f       	andi	r24, 0xF8	; 248
    1b84:	90 70       	andi	r25, 0x00	; 0
    1b86:	88 32       	cpi	r24, 0x28	; 40
    1b88:	91 05       	cpc	r25, r1
    1b8a:	11 f0       	breq	.+4      	; 0x1b90 <TWI_SendDataByte+0x46>
	{
		Local_ErrorStatus=MstrWriteDataError;
    1b8c:	85 e0       	ldi	r24, 0x05	; 5
    1b8e:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		/*Do nothing*/
	}

	return Local_ErrorStatus;
    1b90:	89 81       	ldd	r24, Y+1	; 0x01


}
    1b92:	0f 90       	pop	r0
    1b94:	0f 90       	pop	r0
    1b96:	cf 91       	pop	r28
    1b98:	df 91       	pop	r29
    1b9a:	08 95       	ret

00001b9c <TWI_RecieveDataByte>:
 * Note that i will return the error code, and the received data is
 * saved in a pointer, so send the address of the variable you want to recieve the
 * data in*/

TWI_ErrorCode_t TWI_RecieveDataByte(u8* Copy_pu8DataByte)
{
    1b9c:	df 93       	push	r29
    1b9e:	cf 93       	push	r28
    1ba0:	00 d0       	rcall	.+0      	; 0x1ba2 <TWI_RecieveDataByte+0x6>
    1ba2:	0f 92       	push	r0
    1ba4:	cd b7       	in	r28, 0x3d	; 61
    1ba6:	de b7       	in	r29, 0x3e	; 62
    1ba8:	9b 83       	std	Y+3, r25	; 0x03
    1baa:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorCode_t Local_ErrorStatus= NoError;
    1bac:	19 82       	std	Y+1, r1	; 0x01

	/*CLear the flag to start the receiving process of the Data Byte*/
	SET_BIT(TWCR,TWCR_TWINT);
    1bae:	a6 e5       	ldi	r26, 0x56	; 86
    1bb0:	b0 e0       	ldi	r27, 0x00	; 0
    1bb2:	e6 e5       	ldi	r30, 0x56	; 86
    1bb4:	f0 e0       	ldi	r31, 0x00	; 0
    1bb6:	80 81       	ld	r24, Z
    1bb8:	80 68       	ori	r24, 0x80	; 128
    1bba:	8c 93       	st	X, r24

	/*Wait until the flag is raised to know that the receiving process is done*/
	while(GET_BIT(TWCR,TWCR_TWINT) == 0);
    1bbc:	e6 e5       	ldi	r30, 0x56	; 86
    1bbe:	f0 e0       	ldi	r31, 0x00	; 0
    1bc0:	80 81       	ld	r24, Z
    1bc2:	88 23       	and	r24, r24
    1bc4:	dc f7       	brge	.-10     	; 0x1bbc <TWI_RecieveDataByte+0x20>

	/*Check for MSTR received data with ACK status*/
	if((TWSR & 0b11111000) != MSTR_RD_BYTE_WITH_ACK) //bit masking bit 2:0
    1bc6:	e1 e2       	ldi	r30, 0x21	; 33
    1bc8:	f0 e0       	ldi	r31, 0x00	; 0
    1bca:	80 81       	ld	r24, Z
    1bcc:	88 2f       	mov	r24, r24
    1bce:	90 e0       	ldi	r25, 0x00	; 0
    1bd0:	88 7f       	andi	r24, 0xF8	; 248
    1bd2:	90 70       	andi	r25, 0x00	; 0
    1bd4:	80 35       	cpi	r24, 0x50	; 80
    1bd6:	91 05       	cpc	r25, r1
    1bd8:	19 f0       	breq	.+6      	; 0x1be0 <TWI_RecieveDataByte+0x44>
	{
		Local_ErrorStatus=MstrReadDataError;
    1bda:	86 e0       	ldi	r24, 0x06	; 6
    1bdc:	89 83       	std	Y+1, r24	; 0x01
    1bde:	06 c0       	rjmp	.+12     	; 0x1bec <TWI_RecieveDataByte+0x50>
	}
	else
	{
		/*if it received the data correctly==> load the received data in TWDR to the user*/
		*Copy_pu8DataByte=TWDR;
    1be0:	e3 e2       	ldi	r30, 0x23	; 35
    1be2:	f0 e0       	ldi	r31, 0x00	; 0
    1be4:	80 81       	ld	r24, Z
    1be6:	ea 81       	ldd	r30, Y+2	; 0x02
    1be8:	fb 81       	ldd	r31, Y+3	; 0x03
    1bea:	80 83       	st	Z, r24
	}
	return Local_ErrorStatus;
    1bec:	89 81       	ldd	r24, Y+1	; 0x01


}
    1bee:	0f 90       	pop	r0
    1bf0:	0f 90       	pop	r0
    1bf2:	0f 90       	pop	r0
    1bf4:	cf 91       	pop	r28
    1bf6:	df 91       	pop	r29
    1bf8:	08 95       	ret

00001bfa <TWI_SendStopCondition>:

/*Send stop condition*/
void TWI_SendStopCondition(void)
{
    1bfa:	df 93       	push	r29
    1bfc:	cf 93       	push	r28
    1bfe:	cd b7       	in	r28, 0x3d	; 61
    1c00:	de b7       	in	r29, 0x3e	; 62

     /*Sending the stop condtion*/
	/* Note that this bit is cleared automatically so dont worry for future
	 * Sending procedure to be stopped again by this bit*/
	SET_BIT(TWCR,TWCR_TWSTO);
    1c02:	a6 e5       	ldi	r26, 0x56	; 86
    1c04:	b0 e0       	ldi	r27, 0x00	; 0
    1c06:	e6 e5       	ldi	r30, 0x56	; 86
    1c08:	f0 e0       	ldi	r31, 0x00	; 0
    1c0a:	80 81       	ld	r24, Z
    1c0c:	80 61       	ori	r24, 0x10	; 16
    1c0e:	8c 93       	st	X, r24

	/*Clearing the flag to send the Stop condition*/
	SET_BIT(TWCR,TWCR_TWINT);
    1c10:	a6 e5       	ldi	r26, 0x56	; 86
    1c12:	b0 e0       	ldi	r27, 0x00	; 0
    1c14:	e6 e5       	ldi	r30, 0x56	; 86
    1c16:	f0 e0       	ldi	r31, 0x00	; 0
    1c18:	80 81       	ld	r24, Z
    1c1a:	80 68       	ori	r24, 0x80	; 128
    1c1c:	8c 93       	st	X, r24

	//Note that there is no ACK in the status code to be checked
}
    1c1e:	cf 91       	pop	r28
    1c20:	df 91       	pop	r29
    1c22:	08 95       	ret

00001c24 <main>:


u8 DataToBeSentToEEPROM=0;
u8 DataToBeSentToLCD=0;
void main(void)
{
    1c24:	df 93       	push	r29
    1c26:	cf 93       	push	r28
    1c28:	cd b7       	in	r28, 0x3d	; 61
    1c2a:	de b7       	in	r29, 0x3e	; 62
    1c2c:	2e 97       	sbiw	r28, 0x0e	; 14
    1c2e:	0f b6       	in	r0, 0x3f	; 63
    1c30:	f8 94       	cli
    1c32:	de bf       	out	0x3e, r29	; 62
    1c34:	0f be       	out	0x3f, r0	; 63
    1c36:	cd bf       	out	0x3d, r28	; 61
	/*setting both SCL & SDA as output*/
	DIO_voidSetPinDirection(DIO_u8PORTC,DIO_u8PIN0,DIO_u8PIN_OUTPUT);
    1c38:	83 e0       	ldi	r24, 0x03	; 3
    1c3a:	60 e0       	ldi	r22, 0x00	; 0
    1c3c:	41 e0       	ldi	r20, 0x01	; 1
    1c3e:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_u8PORTC,DIO_u8PIN1,DIO_u8PIN_OUTPUT);
    1c42:	83 e0       	ldi	r24, 0x03	; 3
    1c44:	61 e0       	ldi	r22, 0x01	; 1
    1c46:	41 e0       	ldi	r20, 0x01	; 1
    1c48:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_voidSetPinDirection>

	/*Initilizing the uc as a master and giving it its address*/
	TWI_voidMasterInit(0);
    1c4c:	80 e0       	ldi	r24, 0x00	; 0
    1c4e:	0e 94 8f 0c 	call	0x191e	; 0x191e <TWI_voidMasterInit>

	/*Initializing the LCD to send the data to*/
	LCD_voidInit();
    1c52:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <LCD_voidInit>
	LCD_voidPosition(0,0);
    1c56:	80 e0       	ldi	r24, 0x00	; 0
    1c58:	60 e0       	ldi	r22, 0x00	; 0
    1c5a:	0e 94 8f 0b 	call	0x171e	; 0x171e <LCD_voidPosition>

	while(1)
	{
		EEPROM_voidSendData(DataToBeSentToEEPROM,0b0000001000000000);
    1c5e:	80 91 6a 00 	lds	r24, 0x006A
    1c62:	60 e0       	ldi	r22, 0x00	; 0
    1c64:	72 e0       	ldi	r23, 0x02	; 2
    1c66:	0e 94 ad 08 	call	0x115a	; 0x115a <EEPROM_voidSendData>
		DataToBeSentToLCD=EEPROM_u8RecieveData(0b0000001000000000);
    1c6a:	80 e0       	ldi	r24, 0x00	; 0
    1c6c:	92 e0       	ldi	r25, 0x02	; 2
    1c6e:	0e 94 cd 08 	call	0x119a	; 0x119a <EEPROM_u8RecieveData>
    1c72:	80 93 6b 00 	sts	0x006B, r24
		LCD_voidPosition(0,0);
    1c76:	80 e0       	ldi	r24, 0x00	; 0
    1c78:	60 e0       	ldi	r22, 0x00	; 0
    1c7a:	0e 94 8f 0b 	call	0x171e	; 0x171e <LCD_voidPosition>
		LCD_voidWriteNum(DataToBeSentToLCD);
    1c7e:	80 91 6b 00 	lds	r24, 0x006B
    1c82:	88 2f       	mov	r24, r24
    1c84:	90 e0       	ldi	r25, 0x00	; 0
    1c86:	a0 e0       	ldi	r26, 0x00	; 0
    1c88:	b0 e0       	ldi	r27, 0x00	; 0
    1c8a:	bc 01       	movw	r22, r24
    1c8c:	cd 01       	movw	r24, r26
    1c8e:	0e 94 15 0c 	call	0x182a	; 0x182a <LCD_voidWriteNum>
    1c92:	80 e0       	ldi	r24, 0x00	; 0
    1c94:	90 e0       	ldi	r25, 0x00	; 0
    1c96:	aa e7       	ldi	r26, 0x7A	; 122
    1c98:	b4 e4       	ldi	r27, 0x44	; 68
    1c9a:	8b 87       	std	Y+11, r24	; 0x0b
    1c9c:	9c 87       	std	Y+12, r25	; 0x0c
    1c9e:	ad 87       	std	Y+13, r26	; 0x0d
    1ca0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ca2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ca4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ca6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ca8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1caa:	20 e0       	ldi	r18, 0x00	; 0
    1cac:	30 e0       	ldi	r19, 0x00	; 0
    1cae:	4a ef       	ldi	r20, 0xFA	; 250
    1cb0:	54 e4       	ldi	r21, 0x44	; 68
    1cb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cb6:	dc 01       	movw	r26, r24
    1cb8:	cb 01       	movw	r24, r22
    1cba:	8f 83       	std	Y+7, r24	; 0x07
    1cbc:	98 87       	std	Y+8, r25	; 0x08
    1cbe:	a9 87       	std	Y+9, r26	; 0x09
    1cc0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1cc2:	6f 81       	ldd	r22, Y+7	; 0x07
    1cc4:	78 85       	ldd	r23, Y+8	; 0x08
    1cc6:	89 85       	ldd	r24, Y+9	; 0x09
    1cc8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cca:	20 e0       	ldi	r18, 0x00	; 0
    1ccc:	30 e0       	ldi	r19, 0x00	; 0
    1cce:	40 e8       	ldi	r20, 0x80	; 128
    1cd0:	5f e3       	ldi	r21, 0x3F	; 63
    1cd2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cd6:	88 23       	and	r24, r24
    1cd8:	2c f4       	brge	.+10     	; 0x1ce4 <main+0xc0>
		__ticks = 1;
    1cda:	81 e0       	ldi	r24, 0x01	; 1
    1cdc:	90 e0       	ldi	r25, 0x00	; 0
    1cde:	9e 83       	std	Y+6, r25	; 0x06
    1ce0:	8d 83       	std	Y+5, r24	; 0x05
    1ce2:	3f c0       	rjmp	.+126    	; 0x1d62 <main+0x13e>
	else if (__tmp > 65535)
    1ce4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ce6:	78 85       	ldd	r23, Y+8	; 0x08
    1ce8:	89 85       	ldd	r24, Y+9	; 0x09
    1cea:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cec:	20 e0       	ldi	r18, 0x00	; 0
    1cee:	3f ef       	ldi	r19, 0xFF	; 255
    1cf0:	4f e7       	ldi	r20, 0x7F	; 127
    1cf2:	57 e4       	ldi	r21, 0x47	; 71
    1cf4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cf8:	18 16       	cp	r1, r24
    1cfa:	4c f5       	brge	.+82     	; 0x1d4e <main+0x12a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cfc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cfe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d00:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d02:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d04:	20 e0       	ldi	r18, 0x00	; 0
    1d06:	30 e0       	ldi	r19, 0x00	; 0
    1d08:	40 e2       	ldi	r20, 0x20	; 32
    1d0a:	51 e4       	ldi	r21, 0x41	; 65
    1d0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d10:	dc 01       	movw	r26, r24
    1d12:	cb 01       	movw	r24, r22
    1d14:	bc 01       	movw	r22, r24
    1d16:	cd 01       	movw	r24, r26
    1d18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d1c:	dc 01       	movw	r26, r24
    1d1e:	cb 01       	movw	r24, r22
    1d20:	9e 83       	std	Y+6, r25	; 0x06
    1d22:	8d 83       	std	Y+5, r24	; 0x05
    1d24:	0f c0       	rjmp	.+30     	; 0x1d44 <main+0x120>
    1d26:	88 ec       	ldi	r24, 0xC8	; 200
    1d28:	90 e0       	ldi	r25, 0x00	; 0
    1d2a:	9c 83       	std	Y+4, r25	; 0x04
    1d2c:	8b 83       	std	Y+3, r24	; 0x03
    1d2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d30:	9c 81       	ldd	r25, Y+4	; 0x04
    1d32:	01 97       	sbiw	r24, 0x01	; 1
    1d34:	f1 f7       	brne	.-4      	; 0x1d32 <main+0x10e>
    1d36:	9c 83       	std	Y+4, r25	; 0x04
    1d38:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d3a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d3c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d3e:	01 97       	sbiw	r24, 0x01	; 1
    1d40:	9e 83       	std	Y+6, r25	; 0x06
    1d42:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d44:	8d 81       	ldd	r24, Y+5	; 0x05
    1d46:	9e 81       	ldd	r25, Y+6	; 0x06
    1d48:	00 97       	sbiw	r24, 0x00	; 0
    1d4a:	69 f7       	brne	.-38     	; 0x1d26 <main+0x102>
    1d4c:	14 c0       	rjmp	.+40     	; 0x1d76 <main+0x152>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d4e:	6f 81       	ldd	r22, Y+7	; 0x07
    1d50:	78 85       	ldd	r23, Y+8	; 0x08
    1d52:	89 85       	ldd	r24, Y+9	; 0x09
    1d54:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d5a:	dc 01       	movw	r26, r24
    1d5c:	cb 01       	movw	r24, r22
    1d5e:	9e 83       	std	Y+6, r25	; 0x06
    1d60:	8d 83       	std	Y+5, r24	; 0x05
    1d62:	8d 81       	ldd	r24, Y+5	; 0x05
    1d64:	9e 81       	ldd	r25, Y+6	; 0x06
    1d66:	9a 83       	std	Y+2, r25	; 0x02
    1d68:	89 83       	std	Y+1, r24	; 0x01
    1d6a:	89 81       	ldd	r24, Y+1	; 0x01
    1d6c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d6e:	01 97       	sbiw	r24, 0x01	; 1
    1d70:	f1 f7       	brne	.-4      	; 0x1d6e <main+0x14a>
    1d72:	9a 83       	std	Y+2, r25	; 0x02
    1d74:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);
		DataToBeSentToEEPROM++;
    1d76:	80 91 6a 00 	lds	r24, 0x006A
    1d7a:	8f 5f       	subi	r24, 0xFF	; 255
    1d7c:	80 93 6a 00 	sts	0x006A, r24
    1d80:	6e cf       	rjmp	.-292    	; 0x1c5e <main+0x3a>

00001d82 <__udivmodsi4>:
    1d82:	a1 e2       	ldi	r26, 0x21	; 33
    1d84:	1a 2e       	mov	r1, r26
    1d86:	aa 1b       	sub	r26, r26
    1d88:	bb 1b       	sub	r27, r27
    1d8a:	fd 01       	movw	r30, r26
    1d8c:	0d c0       	rjmp	.+26     	; 0x1da8 <__udivmodsi4_ep>

00001d8e <__udivmodsi4_loop>:
    1d8e:	aa 1f       	adc	r26, r26
    1d90:	bb 1f       	adc	r27, r27
    1d92:	ee 1f       	adc	r30, r30
    1d94:	ff 1f       	adc	r31, r31
    1d96:	a2 17       	cp	r26, r18
    1d98:	b3 07       	cpc	r27, r19
    1d9a:	e4 07       	cpc	r30, r20
    1d9c:	f5 07       	cpc	r31, r21
    1d9e:	20 f0       	brcs	.+8      	; 0x1da8 <__udivmodsi4_ep>
    1da0:	a2 1b       	sub	r26, r18
    1da2:	b3 0b       	sbc	r27, r19
    1da4:	e4 0b       	sbc	r30, r20
    1da6:	f5 0b       	sbc	r31, r21

00001da8 <__udivmodsi4_ep>:
    1da8:	66 1f       	adc	r22, r22
    1daa:	77 1f       	adc	r23, r23
    1dac:	88 1f       	adc	r24, r24
    1dae:	99 1f       	adc	r25, r25
    1db0:	1a 94       	dec	r1
    1db2:	69 f7       	brne	.-38     	; 0x1d8e <__udivmodsi4_loop>
    1db4:	60 95       	com	r22
    1db6:	70 95       	com	r23
    1db8:	80 95       	com	r24
    1dba:	90 95       	com	r25
    1dbc:	9b 01       	movw	r18, r22
    1dbe:	ac 01       	movw	r20, r24
    1dc0:	bd 01       	movw	r22, r26
    1dc2:	cf 01       	movw	r24, r30
    1dc4:	08 95       	ret

00001dc6 <__prologue_saves__>:
    1dc6:	2f 92       	push	r2
    1dc8:	3f 92       	push	r3
    1dca:	4f 92       	push	r4
    1dcc:	5f 92       	push	r5
    1dce:	6f 92       	push	r6
    1dd0:	7f 92       	push	r7
    1dd2:	8f 92       	push	r8
    1dd4:	9f 92       	push	r9
    1dd6:	af 92       	push	r10
    1dd8:	bf 92       	push	r11
    1dda:	cf 92       	push	r12
    1ddc:	df 92       	push	r13
    1dde:	ef 92       	push	r14
    1de0:	ff 92       	push	r15
    1de2:	0f 93       	push	r16
    1de4:	1f 93       	push	r17
    1de6:	cf 93       	push	r28
    1de8:	df 93       	push	r29
    1dea:	cd b7       	in	r28, 0x3d	; 61
    1dec:	de b7       	in	r29, 0x3e	; 62
    1dee:	ca 1b       	sub	r28, r26
    1df0:	db 0b       	sbc	r29, r27
    1df2:	0f b6       	in	r0, 0x3f	; 63
    1df4:	f8 94       	cli
    1df6:	de bf       	out	0x3e, r29	; 62
    1df8:	0f be       	out	0x3f, r0	; 63
    1dfa:	cd bf       	out	0x3d, r28	; 61
    1dfc:	09 94       	ijmp

00001dfe <__epilogue_restores__>:
    1dfe:	2a 88       	ldd	r2, Y+18	; 0x12
    1e00:	39 88       	ldd	r3, Y+17	; 0x11
    1e02:	48 88       	ldd	r4, Y+16	; 0x10
    1e04:	5f 84       	ldd	r5, Y+15	; 0x0f
    1e06:	6e 84       	ldd	r6, Y+14	; 0x0e
    1e08:	7d 84       	ldd	r7, Y+13	; 0x0d
    1e0a:	8c 84       	ldd	r8, Y+12	; 0x0c
    1e0c:	9b 84       	ldd	r9, Y+11	; 0x0b
    1e0e:	aa 84       	ldd	r10, Y+10	; 0x0a
    1e10:	b9 84       	ldd	r11, Y+9	; 0x09
    1e12:	c8 84       	ldd	r12, Y+8	; 0x08
    1e14:	df 80       	ldd	r13, Y+7	; 0x07
    1e16:	ee 80       	ldd	r14, Y+6	; 0x06
    1e18:	fd 80       	ldd	r15, Y+5	; 0x05
    1e1a:	0c 81       	ldd	r16, Y+4	; 0x04
    1e1c:	1b 81       	ldd	r17, Y+3	; 0x03
    1e1e:	aa 81       	ldd	r26, Y+2	; 0x02
    1e20:	b9 81       	ldd	r27, Y+1	; 0x01
    1e22:	ce 0f       	add	r28, r30
    1e24:	d1 1d       	adc	r29, r1
    1e26:	0f b6       	in	r0, 0x3f	; 63
    1e28:	f8 94       	cli
    1e2a:	de bf       	out	0x3e, r29	; 62
    1e2c:	0f be       	out	0x3f, r0	; 63
    1e2e:	cd bf       	out	0x3d, r28	; 61
    1e30:	ed 01       	movw	r28, r26
    1e32:	08 95       	ret

00001e34 <_exit>:
    1e34:	f8 94       	cli

00001e36 <__stop_program>:
    1e36:	ff cf       	rjmp	.-2      	; 0x1e36 <__stop_program>
