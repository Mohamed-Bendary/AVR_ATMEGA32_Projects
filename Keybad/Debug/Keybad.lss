
Keybad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000279a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000054  00800060  0000279a  0000282e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  008000b4  008000b4  00002882  2**0
                  ALLOC
  3 .stab         00002478  00000000  00000000  00002884  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000010ed  00000000  00000000  00004cfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005de9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00005f29  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006099  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00007ce2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008bcd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000997c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009adc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009d69  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a537  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 62 0a 	jmp	0x14c4	; 0x14c4 <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 f5 12 	jmp	0x25ea	; 0x25ea <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 95 06 	jmp	0xd2a	; 0xd2a <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e9       	ldi	r30, 0x9A	; 154
      68:	f7 e2       	ldi	r31, 0x27	; 39
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 3b       	cpi	r26, 0xB4	; 180
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a4 eb       	ldi	r26, 0xB4	; 180
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 3b       	cpi	r26, 0xBE	; 190
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <main>
      8a:	0c 94 cb 13 	jmp	0x2796	; 0x2796 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 94 13 	jmp	0x2728	; 0x2728 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ac e9       	ldi	r26, 0x9C	; 156
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 b0 13 	jmp	0x2760	; 0x2760 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 a0 13 	jmp	0x2740	; 0x2740 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 bc 13 	jmp	0x2778	; 0x2778 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 a0 13 	jmp	0x2740	; 0x2740 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 bc 13 	jmp	0x2778	; 0x2778 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 94 13 	jmp	0x2728	; 0x2728 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8c e9       	ldi	r24, 0x9C	; 156
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 b0 13 	jmp	0x2760	; 0x2760 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 a0 13 	jmp	0x2740	; 0x2740 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 bc 13 	jmp	0x2778	; 0x2778 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 a0 13 	jmp	0x2740	; 0x2740 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 bc 13 	jmp	0x2778	; 0x2778 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 a0 13 	jmp	0x2740	; 0x2740 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 bc 13 	jmp	0x2778	; 0x2778 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 a4 13 	jmp	0x2748	; 0x2748 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 c0 13 	jmp	0x2780	; 0x2780 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <ADC_voidADCInit>:
u8 *ADC_pu8PtrTo_ADCRead =NULL;


//initialize ADC
void ADC_voidADCInit(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	/*Choose the AVCC as a reference voltage*/
	SET_BIT(ADMUX,ADMUX_REFS0);
     b4e:	a7 e2       	ldi	r26, 0x27	; 39
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e7 e2       	ldi	r30, 0x27	; 39
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	80 64       	ori	r24, 0x40	; 64
     b5a:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,ADMUX_REFS1);
     b5c:	a7 e2       	ldi	r26, 0x27	; 39
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e7 e2       	ldi	r30, 0x27	; 39
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	8f 77       	andi	r24, 0x7F	; 127
     b68:	8c 93       	st	X, r24


	/*Enable the left adjust*/
	SET_BIT(ADMUX,ADMUX_ADLAR);
     b6a:	a7 e2       	ldi	r26, 0x27	; 39
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e7 e2       	ldi	r30, 0x27	; 39
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	80 62       	ori	r24, 0x20	; 32
     b76:	8c 93       	st	X, r24

	/*Set the prescalar of our 	ADC clock to 128(divide the 8MHZ by 128)*/
	SET_BIT(ADCSRA,ADCSRA_ADPS0);
     b78:	a6 e2       	ldi	r26, 0x26	; 38
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	e6 e2       	ldi	r30, 0x26	; 38
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	81 60       	ori	r24, 0x01	; 1
     b84:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADCSRA_ADPS1);
     b86:	a6 e2       	ldi	r26, 0x26	; 38
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	e6 e2       	ldi	r30, 0x26	; 38
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	82 60       	ori	r24, 0x02	; 2
     b92:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADCSRA_ADPS2);
     b94:	a6 e2       	ldi	r26, 0x26	; 38
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	e6 e2       	ldi	r30, 0x26	; 38
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	84 60       	ori	r24, 0x04	; 4
     ba0:	8c 93       	st	X, r24



	/*VIP NOTE:make the enabling of any peripheral the last step in the initializing*/
	/*Enable the ADC peripheral*/
	SET_BIT(ADCSRA,ADCSRA_ADEN);
     ba2:	a6 e2       	ldi	r26, 0x26	; 38
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	e6 e2       	ldi	r30, 0x26	; 38
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	80 81       	ld	r24, Z
     bac:	80 68       	ori	r24, 0x80	; 128
     bae:	8c 93       	st	X, r24
}
     bb0:	cf 91       	pop	r28
     bb2:	df 91       	pop	r29
     bb4:	08 95       	ret

00000bb6 <ADC_u8GetChannelReadSynch>:

/*Get the channel read,be careful that the channels is from 0 to 7*/
u8 ADC_u8GetChannelReadSynch(u8 copy_u8Channel)
{
     bb6:	df 93       	push	r29
     bb8:	cf 93       	push	r28
     bba:	00 d0       	rcall	.+0      	; 0xbbc <ADC_u8GetChannelReadSynch+0x6>
     bbc:	00 d0       	rcall	.+0      	; 0xbbe <ADC_u8GetChannelReadSynch+0x8>
     bbe:	00 d0       	rcall	.+0      	; 0xbc0 <ADC_u8GetChannelReadSynch+0xa>
     bc0:	cd b7       	in	r28, 0x3d	; 61
     bc2:	de b7       	in	r29, 0x3e	; 62
     bc4:	8d 83       	std	Y+5, r24	; 0x05
	u32 Local_u32Counter=0;
     bc6:	19 82       	std	Y+1, r1	; 0x01
     bc8:	1a 82       	std	Y+2, r1	; 0x02
     bca:	1b 82       	std	Y+3, r1	; 0x03
     bcc:	1c 82       	std	Y+4, r1	; 0x04
	/*Masking*/
	/*1-Clearing the required bits*/
	ADMUX &=0b11100000;
     bce:	a7 e2       	ldi	r26, 0x27	; 39
     bd0:	b0 e0       	ldi	r27, 0x00	; 0
     bd2:	e7 e2       	ldi	r30, 0x27	; 39
     bd4:	f0 e0       	ldi	r31, 0x00	; 0
     bd6:	80 81       	ld	r24, Z
     bd8:	80 7e       	andi	r24, 0xE0	; 224
     bda:	8c 93       	st	X, r24

	/*2- Set the required bits*/

	ADMUX |=copy_u8Channel;
     bdc:	a7 e2       	ldi	r26, 0x27	; 39
     bde:	b0 e0       	ldi	r27, 0x00	; 0
     be0:	e7 e2       	ldi	r30, 0x27	; 39
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	90 81       	ld	r25, Z
     be6:	8d 81       	ldd	r24, Y+5	; 0x05
     be8:	89 2b       	or	r24, r25
     bea:	8c 93       	st	X, r24

	/*Start the conversion*/
	SET_BIT(ADCSRA,ADCSRA_ADSC);
     bec:	a6 e2       	ldi	r26, 0x26	; 38
     bee:	b0 e0       	ldi	r27, 0x00	; 0
     bf0:	e6 e2       	ldi	r30, 0x26	; 38
     bf2:	f0 e0       	ldi	r31, 0x00	; 0
     bf4:	80 81       	ld	r24, Z
     bf6:	80 64       	ori	r24, 0x40	; 64
     bf8:	8c 93       	st	X, r24
     bfa:	0b c0       	rjmp	.+22     	; 0xc12 <ADC_u8GetChannelReadSynch+0x5c>

	/*polling(busy wait until the conversion is done when the flag is raised or when the ADC reach timout )*/
	while((GET_BIT(ADCSRA,ADCSRA_ADIF)==0)&&(Local_u32Counter<ADC_TIMEOUT))
	{
		Local_u32Counter++;
     bfc:	89 81       	ldd	r24, Y+1	; 0x01
     bfe:	9a 81       	ldd	r25, Y+2	; 0x02
     c00:	ab 81       	ldd	r26, Y+3	; 0x03
     c02:	bc 81       	ldd	r27, Y+4	; 0x04
     c04:	01 96       	adiw	r24, 0x01	; 1
     c06:	a1 1d       	adc	r26, r1
     c08:	b1 1d       	adc	r27, r1
     c0a:	89 83       	std	Y+1, r24	; 0x01
     c0c:	9a 83       	std	Y+2, r25	; 0x02
     c0e:	ab 83       	std	Y+3, r26	; 0x03
     c10:	bc 83       	std	Y+4, r27	; 0x04

	/*Start the conversion*/
	SET_BIT(ADCSRA,ADCSRA_ADSC);

	/*polling(busy wait until the conversion is done when the flag is raised or when the ADC reach timout )*/
	while((GET_BIT(ADCSRA,ADCSRA_ADIF)==0)&&(Local_u32Counter<ADC_TIMEOUT))
     c12:	e6 e2       	ldi	r30, 0x26	; 38
     c14:	f0 e0       	ldi	r31, 0x00	; 0
     c16:	80 81       	ld	r24, Z
     c18:	82 95       	swap	r24
     c1a:	8f 70       	andi	r24, 0x0F	; 15
     c1c:	88 2f       	mov	r24, r24
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	81 70       	andi	r24, 0x01	; 1
     c22:	90 70       	andi	r25, 0x00	; 0
     c24:	00 97       	sbiw	r24, 0x00	; 0
     c26:	61 f4       	brne	.+24     	; 0xc40 <ADC_u8GetChannelReadSynch+0x8a>
     c28:	89 81       	ldd	r24, Y+1	; 0x01
     c2a:	9a 81       	ldd	r25, Y+2	; 0x02
     c2c:	ab 81       	ldd	r26, Y+3	; 0x03
     c2e:	bc 81       	ldd	r27, Y+4	; 0x04
     c30:	80 36       	cpi	r24, 0x60	; 96
     c32:	2a ee       	ldi	r18, 0xEA	; 234
     c34:	92 07       	cpc	r25, r18
     c36:	20 e0       	ldi	r18, 0x00	; 0
     c38:	a2 07       	cpc	r26, r18
     c3a:	20 e0       	ldi	r18, 0x00	; 0
     c3c:	b2 07       	cpc	r27, r18
     c3e:	f0 f2       	brcs	.-68     	; 0xbfc <ADC_u8GetChannelReadSynch+0x46>
	{
		Local_u32Counter++;
	}

	if(Local_u32Counter==ADC_TIMEOUT)
     c40:	89 81       	ldd	r24, Y+1	; 0x01
     c42:	9a 81       	ldd	r25, Y+2	; 0x02
     c44:	ab 81       	ldd	r26, Y+3	; 0x03
     c46:	bc 81       	ldd	r27, Y+4	; 0x04
     c48:	80 36       	cpi	r24, 0x60	; 96
     c4a:	2a ee       	ldi	r18, 0xEA	; 234
     c4c:	92 07       	cpc	r25, r18
     c4e:	20 e0       	ldi	r18, 0x00	; 0
     c50:	a2 07       	cpc	r26, r18
     c52:	20 e0       	ldi	r18, 0x00	; 0
     c54:	b2 07       	cpc	r27, r18
     c56:	69 f0       	breq	.+26     	; 0xc72 <ADC_u8GetChannelReadSynch+0xbc>
	 * fel function ale hoa pointer 34an ab3atlo al ADCH or al ADCL
	 * 34an yet7ato fel holding variable*/
	}
	else{
	/*flag clearing*/
	SET_BIT(ADCSRA,ADCSRA_ADIF);
     c58:	a6 e2       	ldi	r26, 0x26	; 38
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	e6 e2       	ldi	r30, 0x26	; 38
     c5e:	f0 e0       	ldi	r31, 0x00	; 0
     c60:	80 81       	ld	r24, Z
     c62:	80 61       	ori	r24, 0x10	; 16
     c64:	8c 93       	st	X, r24

	/*Finally return the output of the analog to digital conversion which is ADCH because we enabled the left adjustment*/
	return ADCH;
     c66:	e5 e2       	ldi	r30, 0x25	; 37
     c68:	f0 e0       	ldi	r31, 0x00	; 0
     c6a:	80 81       	ld	r24, Z
     c6c:	8e 83       	std	Y+6, r24	; 0x06
	}
}
     c6e:	8e 81       	ldd	r24, Y+6	; 0x06
     c70:	00 c0       	rjmp	.+0      	; 0xc72 <ADC_u8GetChannelReadSynch+0xbc>
     c72:	26 96       	adiw	r28, 0x06	; 6
     c74:	0f b6       	in	r0, 0x3f	; 63
     c76:	f8 94       	cli
     c78:	de bf       	out	0x3e, r29	; 62
     c7a:	0f be       	out	0x3f, r0	; 63
     c7c:	cd bf       	out	0x3d, r28	; 61
     c7e:	cf 91       	pop	r28
     c80:	df 91       	pop	r29
     c82:	08 95       	ret

00000c84 <ADC_u8GetChannelReadAsynch>:



/*Get read function but in Asynch form*/
u8 ADC_u8GetChannelReadAsynch(u8 copy_u8Channel,void (*Copy_pvNotificationfunc) (void),u8 *Copy_pu8ADCRead)
{
     c84:	df 93       	push	r29
     c86:	cf 93       	push	r28
     c88:	00 d0       	rcall	.+0      	; 0xc8a <ADC_u8GetChannelReadAsynch+0x6>
     c8a:	00 d0       	rcall	.+0      	; 0xc8c <ADC_u8GetChannelReadAsynch+0x8>
     c8c:	00 d0       	rcall	.+0      	; 0xc8e <ADC_u8GetChannelReadAsynch+0xa>
     c8e:	cd b7       	in	r28, 0x3d	; 61
     c90:	de b7       	in	r29, 0x3e	; 62
     c92:	8a 83       	std	Y+2, r24	; 0x02
     c94:	7c 83       	std	Y+4, r23	; 0x04
     c96:	6b 83       	std	Y+3, r22	; 0x03
     c98:	5e 83       	std	Y+6, r21	; 0x06
     c9a:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorCode=OK;
     c9c:	81 e0       	ldi	r24, 0x01	; 1
     c9e:	89 83       	std	Y+1, r24	; 0x01
	/*chec; that the addres of the Notification func & the Addres of
	 * the ADC read holding variable are not = 0(NULL)*/
	if((Copy_pvNotificationfunc!=NULL)&&(Copy_pu8ADCRead!=NULL))
     ca0:	8b 81       	ldd	r24, Y+3	; 0x03
     ca2:	9c 81       	ldd	r25, Y+4	; 0x04
     ca4:	00 97       	sbiw	r24, 0x00	; 0
     ca6:	a9 f1       	breq	.+106    	; 0xd12 <ADC_u8GetChannelReadAsynch+0x8e>
     ca8:	8d 81       	ldd	r24, Y+5	; 0x05
     caa:	9e 81       	ldd	r25, Y+6	; 0x06
     cac:	00 97       	sbiw	r24, 0x00	; 0
     cae:	89 f1       	breq	.+98     	; 0xd12 <ADC_u8GetChannelReadAsynch+0x8e>
	{
		/*Put the addresses of the holding variable and the notifunction to
		 * the Globel pointers to be sent to the ISR function
		 * to excute the Notification function
		 * and to send the ADCH or the ADCL to the holding variable */
		ADC_pu8PtrTo_ADCRead=Copy_pu8ADCRead;
     cb0:	8d 81       	ldd	r24, Y+5	; 0x05
     cb2:	9e 81       	ldd	r25, Y+6	; 0x06
     cb4:	90 93 b7 00 	sts	0x00B7, r25
     cb8:	80 93 b6 00 	sts	0x00B6, r24
		ADC_PtrToNotificationFunc=Copy_pvNotificationfunc;
     cbc:	8b 81       	ldd	r24, Y+3	; 0x03
     cbe:	9c 81       	ldd	r25, Y+4	; 0x04
     cc0:	90 93 b5 00 	sts	0x00B5, r25
     cc4:	80 93 b4 00 	sts	0x00B4, r24

		/*Masking*/
		/*1-Clearing the required bits*/
		ADMUX &=0b11100000;
     cc8:	a7 e2       	ldi	r26, 0x27	; 39
     cca:	b0 e0       	ldi	r27, 0x00	; 0
     ccc:	e7 e2       	ldi	r30, 0x27	; 39
     cce:	f0 e0       	ldi	r31, 0x00	; 0
     cd0:	80 81       	ld	r24, Z
     cd2:	80 7e       	andi	r24, 0xE0	; 224
     cd4:	8c 93       	st	X, r24

		/*2- Set the required bits*/
		ADMUX |=copy_u8Channel;
     cd6:	a7 e2       	ldi	r26, 0x27	; 39
     cd8:	b0 e0       	ldi	r27, 0x00	; 0
     cda:	e7 e2       	ldi	r30, 0x27	; 39
     cdc:	f0 e0       	ldi	r31, 0x00	; 0
     cde:	90 81       	ld	r25, Z
     ce0:	8a 81       	ldd	r24, Y+2	; 0x02
     ce2:	89 2b       	or	r24, r25
     ce4:	8c 93       	st	X, r24

		/*Start the conversion*/
		SET_BIT(ADCSRA,ADCSRA_ADSC);
     ce6:	a6 e2       	ldi	r26, 0x26	; 38
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e6 e2       	ldi	r30, 0x26	; 38
     cec:	f0 e0       	ldi	r31, 0x00	; 0
     cee:	80 81       	ld	r24, Z
     cf0:	80 64       	ori	r24, 0x40	; 64
     cf2:	8c 93       	st	X, r24

		/*Enable the ADC Interrupt complete conversion
		 * Note that ADIF is raised when the ADC conversion is done*/
		SET_BIT(SREG,SREG_I);
     cf4:	af e5       	ldi	r26, 0x5F	; 95
     cf6:	b0 e0       	ldi	r27, 0x00	; 0
     cf8:	ef e5       	ldi	r30, 0x5F	; 95
     cfa:	f0 e0       	ldi	r31, 0x00	; 0
     cfc:	80 81       	ld	r24, Z
     cfe:	80 68       	ori	r24, 0x80	; 128
     d00:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,ADCSRA_ADIE);
     d02:	a6 e2       	ldi	r26, 0x26	; 38
     d04:	b0 e0       	ldi	r27, 0x00	; 0
     d06:	e6 e2       	ldi	r30, 0x26	; 38
     d08:	f0 e0       	ldi	r31, 0x00	; 0
     d0a:	80 81       	ld	r24, Z
     d0c:	88 60       	ori	r24, 0x08	; 8
     d0e:	8c 93       	st	X, r24
     d10:	02 c0       	rjmp	.+4      	; 0xd16 <ADC_u8GetChannelReadAsynch+0x92>
	}

	else
	{Local_u8ErrorCode=NOT_OK;}
     d12:	82 e0       	ldi	r24, 0x02	; 2
     d14:	89 83       	std	Y+1, r24	; 0x01

	return Local_u8ErrorCode;
     d16:	89 81       	ldd	r24, Y+1	; 0x01
}
     d18:	26 96       	adiw	r28, 0x06	; 6
     d1a:	0f b6       	in	r0, 0x3f	; 63
     d1c:	f8 94       	cli
     d1e:	de bf       	out	0x3e, r29	; 62
     d20:	0f be       	out	0x3f, r0	; 63
     d22:	cd bf       	out	0x3d, r28	; 61
     d24:	cf 91       	pop	r28
     d26:	df 91       	pop	r29
     d28:	08 95       	ret

00000d2a <__vector_16>:

/*ISR implementation*/

void __vector_16(void) __attribute__((signal));
void __vector_16(void)
{
     d2a:	1f 92       	push	r1
     d2c:	0f 92       	push	r0
     d2e:	0f b6       	in	r0, 0x3f	; 63
     d30:	0f 92       	push	r0
     d32:	11 24       	eor	r1, r1
     d34:	2f 93       	push	r18
     d36:	3f 93       	push	r19
     d38:	4f 93       	push	r20
     d3a:	5f 93       	push	r21
     d3c:	6f 93       	push	r22
     d3e:	7f 93       	push	r23
     d40:	8f 93       	push	r24
     d42:	9f 93       	push	r25
     d44:	af 93       	push	r26
     d46:	bf 93       	push	r27
     d48:	ef 93       	push	r30
     d4a:	ff 93       	push	r31
     d4c:	df 93       	push	r29
     d4e:	cf 93       	push	r28
     d50:	cd b7       	in	r28, 0x3d	; 61
     d52:	de b7       	in	r29, 0x3e	; 62
	/*send the ADC read to the Holding variable in the main.c*/
	*ADC_pu8PtrTo_ADCRead=ADCH;
     d54:	a0 91 b6 00 	lds	r26, 0x00B6
     d58:	b0 91 b7 00 	lds	r27, 0x00B7
     d5c:	e5 e2       	ldi	r30, 0x25	; 37
     d5e:	f0 e0       	ldi	r31, 0x00	; 0
     d60:	80 81       	ld	r24, Z
     d62:	8c 93       	st	X, r24
	/*Excute the notification function using the global ptr to func*/
	ADC_PtrToNotificationFunc();
     d64:	e0 91 b4 00 	lds	r30, 0x00B4
     d68:	f0 91 b5 00 	lds	r31, 0x00B5
     d6c:	09 95       	icall
	/*Extra: Disable the ADC interrupt for power consumption*/
	CLR_BIT(ADCSRA,ADCSRA_ADIE);
     d6e:	a6 e2       	ldi	r26, 0x26	; 38
     d70:	b0 e0       	ldi	r27, 0x00	; 0
     d72:	e6 e2       	ldi	r30, 0x26	; 38
     d74:	f0 e0       	ldi	r31, 0x00	; 0
     d76:	80 81       	ld	r24, Z
     d78:	87 7f       	andi	r24, 0xF7	; 247
     d7a:	8c 93       	st	X, r24
}
     d7c:	cf 91       	pop	r28
     d7e:	df 91       	pop	r29
     d80:	ff 91       	pop	r31
     d82:	ef 91       	pop	r30
     d84:	bf 91       	pop	r27
     d86:	af 91       	pop	r26
     d88:	9f 91       	pop	r25
     d8a:	8f 91       	pop	r24
     d8c:	7f 91       	pop	r23
     d8e:	6f 91       	pop	r22
     d90:	5f 91       	pop	r21
     d92:	4f 91       	pop	r20
     d94:	3f 91       	pop	r19
     d96:	2f 91       	pop	r18
     d98:	0f 90       	pop	r0
     d9a:	0f be       	out	0x3f, r0	; 63
     d9c:	0f 90       	pop	r0
     d9e:	1f 90       	pop	r1
     da0:	18 95       	reti

00000da2 <DIO_voidSetPinDirection>:
#include "DIO_interface.h"
#include "DIO_private.h"



void DIO_voidSetPinDirection(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8PinDirection){
     da2:	df 93       	push	r29
     da4:	cf 93       	push	r28
     da6:	cd b7       	in	r28, 0x3d	; 61
     da8:	de b7       	in	r29, 0x3e	; 62
     daa:	27 97       	sbiw	r28, 0x07	; 7
     dac:	0f b6       	in	r0, 0x3f	; 63
     dae:	f8 94       	cli
     db0:	de bf       	out	0x3e, r29	; 62
     db2:	0f be       	out	0x3f, r0	; 63
     db4:	cd bf       	out	0x3d, r28	; 61
     db6:	89 83       	std	Y+1, r24	; 0x01
     db8:	6a 83       	std	Y+2, r22	; 0x02
     dba:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8Pin<=DIO_u8PIN7){
     dbc:	8a 81       	ldd	r24, Y+2	; 0x02
     dbe:	88 30       	cpi	r24, 0x08	; 8
     dc0:	08 f0       	brcs	.+2      	; 0xdc4 <DIO_voidSetPinDirection+0x22>
     dc2:	ec c0       	rjmp	.+472    	; 0xf9c <DIO_voidSetPinDirection+0x1fa>
		if(Copy_u8PinDirection==DIO_u8PIN_INPUT){
     dc4:	8b 81       	ldd	r24, Y+3	; 0x03
     dc6:	88 23       	and	r24, r24
     dc8:	09 f0       	breq	.+2      	; 0xdcc <DIO_voidSetPinDirection+0x2a>
     dca:	75 c0       	rjmp	.+234    	; 0xeb6 <DIO_voidSetPinDirection+0x114>
			switch(Copy_u8Port)
     dcc:	89 81       	ldd	r24, Y+1	; 0x01
     dce:	28 2f       	mov	r18, r24
     dd0:	30 e0       	ldi	r19, 0x00	; 0
     dd2:	3f 83       	std	Y+7, r19	; 0x07
     dd4:	2e 83       	std	Y+6, r18	; 0x06
     dd6:	8e 81       	ldd	r24, Y+6	; 0x06
     dd8:	9f 81       	ldd	r25, Y+7	; 0x07
     dda:	82 30       	cpi	r24, 0x02	; 2
     ddc:	91 05       	cpc	r25, r1
     dde:	61 f1       	breq	.+88     	; 0xe38 <DIO_voidSetPinDirection+0x96>
     de0:	2e 81       	ldd	r18, Y+6	; 0x06
     de2:	3f 81       	ldd	r19, Y+7	; 0x07
     de4:	23 30       	cpi	r18, 0x03	; 3
     de6:	31 05       	cpc	r19, r1
     de8:	34 f4       	brge	.+12     	; 0xdf6 <DIO_voidSetPinDirection+0x54>
     dea:	8e 81       	ldd	r24, Y+6	; 0x06
     dec:	9f 81       	ldd	r25, Y+7	; 0x07
     dee:	81 30       	cpi	r24, 0x01	; 1
     df0:	91 05       	cpc	r25, r1
     df2:	69 f0       	breq	.+26     	; 0xe0e <DIO_voidSetPinDirection+0x6c>
     df4:	d3 c0       	rjmp	.+422    	; 0xf9c <DIO_voidSetPinDirection+0x1fa>
     df6:	2e 81       	ldd	r18, Y+6	; 0x06
     df8:	3f 81       	ldd	r19, Y+7	; 0x07
     dfa:	23 30       	cpi	r18, 0x03	; 3
     dfc:	31 05       	cpc	r19, r1
     dfe:	89 f1       	breq	.+98     	; 0xe62 <DIO_voidSetPinDirection+0xc0>
     e00:	8e 81       	ldd	r24, Y+6	; 0x06
     e02:	9f 81       	ldd	r25, Y+7	; 0x07
     e04:	84 30       	cpi	r24, 0x04	; 4
     e06:	91 05       	cpc	r25, r1
     e08:	09 f4       	brne	.+2      	; 0xe0c <DIO_voidSetPinDirection+0x6a>
     e0a:	40 c0       	rjmp	.+128    	; 0xe8c <DIO_voidSetPinDirection+0xea>
     e0c:	c7 c0       	rjmp	.+398    	; 0xf9c <DIO_voidSetPinDirection+0x1fa>
			{
			case DIO_u8PORTA: CLR_BIT(DDRA,Copy_u8Pin);break;
     e0e:	aa e3       	ldi	r26, 0x3A	; 58
     e10:	b0 e0       	ldi	r27, 0x00	; 0
     e12:	ea e3       	ldi	r30, 0x3A	; 58
     e14:	f0 e0       	ldi	r31, 0x00	; 0
     e16:	80 81       	ld	r24, Z
     e18:	48 2f       	mov	r20, r24
     e1a:	8a 81       	ldd	r24, Y+2	; 0x02
     e1c:	28 2f       	mov	r18, r24
     e1e:	30 e0       	ldi	r19, 0x00	; 0
     e20:	81 e0       	ldi	r24, 0x01	; 1
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	02 2e       	mov	r0, r18
     e26:	02 c0       	rjmp	.+4      	; 0xe2c <DIO_voidSetPinDirection+0x8a>
     e28:	88 0f       	add	r24, r24
     e2a:	99 1f       	adc	r25, r25
     e2c:	0a 94       	dec	r0
     e2e:	e2 f7       	brpl	.-8      	; 0xe28 <DIO_voidSetPinDirection+0x86>
     e30:	80 95       	com	r24
     e32:	84 23       	and	r24, r20
     e34:	8c 93       	st	X, r24
     e36:	b2 c0       	rjmp	.+356    	; 0xf9c <DIO_voidSetPinDirection+0x1fa>
			case DIO_u8PORTB: CLR_BIT(DDRB,Copy_u8Pin);break;
     e38:	a7 e3       	ldi	r26, 0x37	; 55
     e3a:	b0 e0       	ldi	r27, 0x00	; 0
     e3c:	e7 e3       	ldi	r30, 0x37	; 55
     e3e:	f0 e0       	ldi	r31, 0x00	; 0
     e40:	80 81       	ld	r24, Z
     e42:	48 2f       	mov	r20, r24
     e44:	8a 81       	ldd	r24, Y+2	; 0x02
     e46:	28 2f       	mov	r18, r24
     e48:	30 e0       	ldi	r19, 0x00	; 0
     e4a:	81 e0       	ldi	r24, 0x01	; 1
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	02 2e       	mov	r0, r18
     e50:	02 c0       	rjmp	.+4      	; 0xe56 <DIO_voidSetPinDirection+0xb4>
     e52:	88 0f       	add	r24, r24
     e54:	99 1f       	adc	r25, r25
     e56:	0a 94       	dec	r0
     e58:	e2 f7       	brpl	.-8      	; 0xe52 <DIO_voidSetPinDirection+0xb0>
     e5a:	80 95       	com	r24
     e5c:	84 23       	and	r24, r20
     e5e:	8c 93       	st	X, r24
     e60:	9d c0       	rjmp	.+314    	; 0xf9c <DIO_voidSetPinDirection+0x1fa>
			case DIO_u8PORTC: CLR_BIT(DDRC,Copy_u8Pin);break;
     e62:	a4 e3       	ldi	r26, 0x34	; 52
     e64:	b0 e0       	ldi	r27, 0x00	; 0
     e66:	e4 e3       	ldi	r30, 0x34	; 52
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	80 81       	ld	r24, Z
     e6c:	48 2f       	mov	r20, r24
     e6e:	8a 81       	ldd	r24, Y+2	; 0x02
     e70:	28 2f       	mov	r18, r24
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	81 e0       	ldi	r24, 0x01	; 1
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	02 2e       	mov	r0, r18
     e7a:	02 c0       	rjmp	.+4      	; 0xe80 <DIO_voidSetPinDirection+0xde>
     e7c:	88 0f       	add	r24, r24
     e7e:	99 1f       	adc	r25, r25
     e80:	0a 94       	dec	r0
     e82:	e2 f7       	brpl	.-8      	; 0xe7c <DIO_voidSetPinDirection+0xda>
     e84:	80 95       	com	r24
     e86:	84 23       	and	r24, r20
     e88:	8c 93       	st	X, r24
     e8a:	88 c0       	rjmp	.+272    	; 0xf9c <DIO_voidSetPinDirection+0x1fa>
			case DIO_u8PORTD: CLR_BIT(DDRD,Copy_u8Pin);break;
     e8c:	a1 e3       	ldi	r26, 0x31	; 49
     e8e:	b0 e0       	ldi	r27, 0x00	; 0
     e90:	e1 e3       	ldi	r30, 0x31	; 49
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	80 81       	ld	r24, Z
     e96:	48 2f       	mov	r20, r24
     e98:	8a 81       	ldd	r24, Y+2	; 0x02
     e9a:	28 2f       	mov	r18, r24
     e9c:	30 e0       	ldi	r19, 0x00	; 0
     e9e:	81 e0       	ldi	r24, 0x01	; 1
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	02 2e       	mov	r0, r18
     ea4:	02 c0       	rjmp	.+4      	; 0xeaa <DIO_voidSetPinDirection+0x108>
     ea6:	88 0f       	add	r24, r24
     ea8:	99 1f       	adc	r25, r25
     eaa:	0a 94       	dec	r0
     eac:	e2 f7       	brpl	.-8      	; 0xea6 <DIO_voidSetPinDirection+0x104>
     eae:	80 95       	com	r24
     eb0:	84 23       	and	r24, r20
     eb2:	8c 93       	st	X, r24
     eb4:	73 c0       	rjmp	.+230    	; 0xf9c <DIO_voidSetPinDirection+0x1fa>

			}

		}
		else if(Copy_u8PinDirection==DIO_u8PIN_OUTPUT)
     eb6:	8b 81       	ldd	r24, Y+3	; 0x03
     eb8:	81 30       	cpi	r24, 0x01	; 1
     eba:	09 f0       	breq	.+2      	; 0xebe <DIO_voidSetPinDirection+0x11c>
     ebc:	6f c0       	rjmp	.+222    	; 0xf9c <DIO_voidSetPinDirection+0x1fa>
		{
			switch(Copy_u8Port)
     ebe:	89 81       	ldd	r24, Y+1	; 0x01
     ec0:	28 2f       	mov	r18, r24
     ec2:	30 e0       	ldi	r19, 0x00	; 0
     ec4:	3d 83       	std	Y+5, r19	; 0x05
     ec6:	2c 83       	std	Y+4, r18	; 0x04
     ec8:	8c 81       	ldd	r24, Y+4	; 0x04
     eca:	9d 81       	ldd	r25, Y+5	; 0x05
     ecc:	82 30       	cpi	r24, 0x02	; 2
     ece:	91 05       	cpc	r25, r1
     ed0:	51 f1       	breq	.+84     	; 0xf26 <DIO_voidSetPinDirection+0x184>
     ed2:	2c 81       	ldd	r18, Y+4	; 0x04
     ed4:	3d 81       	ldd	r19, Y+5	; 0x05
     ed6:	23 30       	cpi	r18, 0x03	; 3
     ed8:	31 05       	cpc	r19, r1
     eda:	34 f4       	brge	.+12     	; 0xee8 <DIO_voidSetPinDirection+0x146>
     edc:	8c 81       	ldd	r24, Y+4	; 0x04
     ede:	9d 81       	ldd	r25, Y+5	; 0x05
     ee0:	81 30       	cpi	r24, 0x01	; 1
     ee2:	91 05       	cpc	r25, r1
     ee4:	61 f0       	breq	.+24     	; 0xefe <DIO_voidSetPinDirection+0x15c>
     ee6:	5a c0       	rjmp	.+180    	; 0xf9c <DIO_voidSetPinDirection+0x1fa>
     ee8:	2c 81       	ldd	r18, Y+4	; 0x04
     eea:	3d 81       	ldd	r19, Y+5	; 0x05
     eec:	23 30       	cpi	r18, 0x03	; 3
     eee:	31 05       	cpc	r19, r1
     ef0:	71 f1       	breq	.+92     	; 0xf4e <DIO_voidSetPinDirection+0x1ac>
     ef2:	8c 81       	ldd	r24, Y+4	; 0x04
     ef4:	9d 81       	ldd	r25, Y+5	; 0x05
     ef6:	84 30       	cpi	r24, 0x04	; 4
     ef8:	91 05       	cpc	r25, r1
     efa:	e9 f1       	breq	.+122    	; 0xf76 <DIO_voidSetPinDirection+0x1d4>
     efc:	4f c0       	rjmp	.+158    	; 0xf9c <DIO_voidSetPinDirection+0x1fa>
			{
			case DIO_u8PORTA: SET_BIT(DDRA,Copy_u8Pin);break;
     efe:	aa e3       	ldi	r26, 0x3A	; 58
     f00:	b0 e0       	ldi	r27, 0x00	; 0
     f02:	ea e3       	ldi	r30, 0x3A	; 58
     f04:	f0 e0       	ldi	r31, 0x00	; 0
     f06:	80 81       	ld	r24, Z
     f08:	48 2f       	mov	r20, r24
     f0a:	8a 81       	ldd	r24, Y+2	; 0x02
     f0c:	28 2f       	mov	r18, r24
     f0e:	30 e0       	ldi	r19, 0x00	; 0
     f10:	81 e0       	ldi	r24, 0x01	; 1
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	02 2e       	mov	r0, r18
     f16:	02 c0       	rjmp	.+4      	; 0xf1c <DIO_voidSetPinDirection+0x17a>
     f18:	88 0f       	add	r24, r24
     f1a:	99 1f       	adc	r25, r25
     f1c:	0a 94       	dec	r0
     f1e:	e2 f7       	brpl	.-8      	; 0xf18 <DIO_voidSetPinDirection+0x176>
     f20:	84 2b       	or	r24, r20
     f22:	8c 93       	st	X, r24
     f24:	3b c0       	rjmp	.+118    	; 0xf9c <DIO_voidSetPinDirection+0x1fa>
			case DIO_u8PORTB: SET_BIT(DDRB,Copy_u8Pin);break;
     f26:	a7 e3       	ldi	r26, 0x37	; 55
     f28:	b0 e0       	ldi	r27, 0x00	; 0
     f2a:	e7 e3       	ldi	r30, 0x37	; 55
     f2c:	f0 e0       	ldi	r31, 0x00	; 0
     f2e:	80 81       	ld	r24, Z
     f30:	48 2f       	mov	r20, r24
     f32:	8a 81       	ldd	r24, Y+2	; 0x02
     f34:	28 2f       	mov	r18, r24
     f36:	30 e0       	ldi	r19, 0x00	; 0
     f38:	81 e0       	ldi	r24, 0x01	; 1
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	02 2e       	mov	r0, r18
     f3e:	02 c0       	rjmp	.+4      	; 0xf44 <DIO_voidSetPinDirection+0x1a2>
     f40:	88 0f       	add	r24, r24
     f42:	99 1f       	adc	r25, r25
     f44:	0a 94       	dec	r0
     f46:	e2 f7       	brpl	.-8      	; 0xf40 <DIO_voidSetPinDirection+0x19e>
     f48:	84 2b       	or	r24, r20
     f4a:	8c 93       	st	X, r24
     f4c:	27 c0       	rjmp	.+78     	; 0xf9c <DIO_voidSetPinDirection+0x1fa>
			case DIO_u8PORTC: SET_BIT(DDRC,Copy_u8Pin);break;
     f4e:	a4 e3       	ldi	r26, 0x34	; 52
     f50:	b0 e0       	ldi	r27, 0x00	; 0
     f52:	e4 e3       	ldi	r30, 0x34	; 52
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	80 81       	ld	r24, Z
     f58:	48 2f       	mov	r20, r24
     f5a:	8a 81       	ldd	r24, Y+2	; 0x02
     f5c:	28 2f       	mov	r18, r24
     f5e:	30 e0       	ldi	r19, 0x00	; 0
     f60:	81 e0       	ldi	r24, 0x01	; 1
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	02 2e       	mov	r0, r18
     f66:	02 c0       	rjmp	.+4      	; 0xf6c <DIO_voidSetPinDirection+0x1ca>
     f68:	88 0f       	add	r24, r24
     f6a:	99 1f       	adc	r25, r25
     f6c:	0a 94       	dec	r0
     f6e:	e2 f7       	brpl	.-8      	; 0xf68 <DIO_voidSetPinDirection+0x1c6>
     f70:	84 2b       	or	r24, r20
     f72:	8c 93       	st	X, r24
     f74:	13 c0       	rjmp	.+38     	; 0xf9c <DIO_voidSetPinDirection+0x1fa>
			case DIO_u8PORTD: SET_BIT(DDRD,Copy_u8Pin);break;
     f76:	a1 e3       	ldi	r26, 0x31	; 49
     f78:	b0 e0       	ldi	r27, 0x00	; 0
     f7a:	e1 e3       	ldi	r30, 0x31	; 49
     f7c:	f0 e0       	ldi	r31, 0x00	; 0
     f7e:	80 81       	ld	r24, Z
     f80:	48 2f       	mov	r20, r24
     f82:	8a 81       	ldd	r24, Y+2	; 0x02
     f84:	28 2f       	mov	r18, r24
     f86:	30 e0       	ldi	r19, 0x00	; 0
     f88:	81 e0       	ldi	r24, 0x01	; 1
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	02 2e       	mov	r0, r18
     f8e:	02 c0       	rjmp	.+4      	; 0xf94 <DIO_voidSetPinDirection+0x1f2>
     f90:	88 0f       	add	r24, r24
     f92:	99 1f       	adc	r25, r25
     f94:	0a 94       	dec	r0
     f96:	e2 f7       	brpl	.-8      	; 0xf90 <DIO_voidSetPinDirection+0x1ee>
     f98:	84 2b       	or	r24, r20
     f9a:	8c 93       	st	X, r24
			}
		}

	}
}
     f9c:	27 96       	adiw	r28, 0x07	; 7
     f9e:	0f b6       	in	r0, 0x3f	; 63
     fa0:	f8 94       	cli
     fa2:	de bf       	out	0x3e, r29	; 62
     fa4:	0f be       	out	0x3f, r0	; 63
     fa6:	cd bf       	out	0x3d, r28	; 61
     fa8:	cf 91       	pop	r28
     faa:	df 91       	pop	r29
     fac:	08 95       	ret

00000fae <DIO_voidSetPortDirection>:

	void DIO_voidSetPortDirection(u8 Copy_u8Port,u8 Copy_u8PortDirection)
	{
     fae:	df 93       	push	r29
     fb0:	cf 93       	push	r28
     fb2:	00 d0       	rcall	.+0      	; 0xfb4 <DIO_voidSetPortDirection+0x6>
     fb4:	00 d0       	rcall	.+0      	; 0xfb6 <DIO_voidSetPortDirection+0x8>
     fb6:	cd b7       	in	r28, 0x3d	; 61
     fb8:	de b7       	in	r29, 0x3e	; 62
     fba:	89 83       	std	Y+1, r24	; 0x01
     fbc:	6a 83       	std	Y+2, r22	; 0x02



		switch(Copy_u8Port)
     fbe:	89 81       	ldd	r24, Y+1	; 0x01
     fc0:	28 2f       	mov	r18, r24
     fc2:	30 e0       	ldi	r19, 0x00	; 0
     fc4:	3c 83       	std	Y+4, r19	; 0x04
     fc6:	2b 83       	std	Y+3, r18	; 0x03
     fc8:	8b 81       	ldd	r24, Y+3	; 0x03
     fca:	9c 81       	ldd	r25, Y+4	; 0x04
     fcc:	82 30       	cpi	r24, 0x02	; 2
     fce:	91 05       	cpc	r25, r1
     fd0:	d9 f0       	breq	.+54     	; 0x1008 <DIO_voidSetPortDirection+0x5a>
     fd2:	2b 81       	ldd	r18, Y+3	; 0x03
     fd4:	3c 81       	ldd	r19, Y+4	; 0x04
     fd6:	23 30       	cpi	r18, 0x03	; 3
     fd8:	31 05       	cpc	r19, r1
     fda:	34 f4       	brge	.+12     	; 0xfe8 <DIO_voidSetPortDirection+0x3a>
     fdc:	8b 81       	ldd	r24, Y+3	; 0x03
     fde:	9c 81       	ldd	r25, Y+4	; 0x04
     fe0:	81 30       	cpi	r24, 0x01	; 1
     fe2:	91 05       	cpc	r25, r1
     fe4:	61 f0       	breq	.+24     	; 0xffe <DIO_voidSetPortDirection+0x50>
     fe6:	1e c0       	rjmp	.+60     	; 0x1024 <DIO_voidSetPortDirection+0x76>
     fe8:	2b 81       	ldd	r18, Y+3	; 0x03
     fea:	3c 81       	ldd	r19, Y+4	; 0x04
     fec:	23 30       	cpi	r18, 0x03	; 3
     fee:	31 05       	cpc	r19, r1
     ff0:	81 f0       	breq	.+32     	; 0x1012 <DIO_voidSetPortDirection+0x64>
     ff2:	8b 81       	ldd	r24, Y+3	; 0x03
     ff4:	9c 81       	ldd	r25, Y+4	; 0x04
     ff6:	84 30       	cpi	r24, 0x04	; 4
     ff8:	91 05       	cpc	r25, r1
     ffa:	81 f0       	breq	.+32     	; 0x101c <DIO_voidSetPortDirection+0x6e>
     ffc:	13 c0       	rjmp	.+38     	; 0x1024 <DIO_voidSetPortDirection+0x76>
		{
		case DIO_u8PORTA: DDRA=Copy_u8PortDirection;break;
     ffe:	ea e3       	ldi	r30, 0x3A	; 58
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	8a 81       	ldd	r24, Y+2	; 0x02
    1004:	80 83       	st	Z, r24
    1006:	0e c0       	rjmp	.+28     	; 0x1024 <DIO_voidSetPortDirection+0x76>
		case DIO_u8PORTB: DDRB=Copy_u8PortDirection;break;
    1008:	e7 e3       	ldi	r30, 0x37	; 55
    100a:	f0 e0       	ldi	r31, 0x00	; 0
    100c:	8a 81       	ldd	r24, Y+2	; 0x02
    100e:	80 83       	st	Z, r24
    1010:	09 c0       	rjmp	.+18     	; 0x1024 <DIO_voidSetPortDirection+0x76>
		case DIO_u8PORTC: DDRC=Copy_u8PortDirection;break;
    1012:	e4 e3       	ldi	r30, 0x34	; 52
    1014:	f0 e0       	ldi	r31, 0x00	; 0
    1016:	8a 81       	ldd	r24, Y+2	; 0x02
    1018:	80 83       	st	Z, r24
    101a:	04 c0       	rjmp	.+8      	; 0x1024 <DIO_voidSetPortDirection+0x76>
		case DIO_u8PORTD: DDRD=Copy_u8PortDirection;break;
    101c:	e1 e3       	ldi	r30, 0x31	; 49
    101e:	f0 e0       	ldi	r31, 0x00	; 0
    1020:	8a 81       	ldd	r24, Y+2	; 0x02
    1022:	80 83       	st	Z, r24
		}

	}
    1024:	0f 90       	pop	r0
    1026:	0f 90       	pop	r0
    1028:	0f 90       	pop	r0
    102a:	0f 90       	pop	r0
    102c:	cf 91       	pop	r28
    102e:	df 91       	pop	r29
    1030:	08 95       	ret

00001032 <DIO_voidSetPinValue>:


	void DIO_voidSetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8PinValue)
	{
    1032:	df 93       	push	r29
    1034:	cf 93       	push	r28
    1036:	cd b7       	in	r28, 0x3d	; 61
    1038:	de b7       	in	r29, 0x3e	; 62
    103a:	27 97       	sbiw	r28, 0x07	; 7
    103c:	0f b6       	in	r0, 0x3f	; 63
    103e:	f8 94       	cli
    1040:	de bf       	out	0x3e, r29	; 62
    1042:	0f be       	out	0x3f, r0	; 63
    1044:	cd bf       	out	0x3d, r28	; 61
    1046:	89 83       	std	Y+1, r24	; 0x01
    1048:	6a 83       	std	Y+2, r22	; 0x02
    104a:	4b 83       	std	Y+3, r20	; 0x03

		if(Copy_u8Pin<=DIO_u8PIN7){
    104c:	8a 81       	ldd	r24, Y+2	; 0x02
    104e:	88 30       	cpi	r24, 0x08	; 8
    1050:	08 f0       	brcs	.+2      	; 0x1054 <DIO_voidSetPinValue+0x22>
    1052:	ec c0       	rjmp	.+472    	; 0x122c <DIO_voidSetPinValue+0x1fa>
			if(Copy_u8PinValue==DIO_u8PIN_LOW){
    1054:	8b 81       	ldd	r24, Y+3	; 0x03
    1056:	88 23       	and	r24, r24
    1058:	09 f0       	breq	.+2      	; 0x105c <DIO_voidSetPinValue+0x2a>
    105a:	75 c0       	rjmp	.+234    	; 0x1146 <DIO_voidSetPinValue+0x114>
				switch(Copy_u8Port)
    105c:	89 81       	ldd	r24, Y+1	; 0x01
    105e:	28 2f       	mov	r18, r24
    1060:	30 e0       	ldi	r19, 0x00	; 0
    1062:	3f 83       	std	Y+7, r19	; 0x07
    1064:	2e 83       	std	Y+6, r18	; 0x06
    1066:	8e 81       	ldd	r24, Y+6	; 0x06
    1068:	9f 81       	ldd	r25, Y+7	; 0x07
    106a:	82 30       	cpi	r24, 0x02	; 2
    106c:	91 05       	cpc	r25, r1
    106e:	61 f1       	breq	.+88     	; 0x10c8 <DIO_voidSetPinValue+0x96>
    1070:	2e 81       	ldd	r18, Y+6	; 0x06
    1072:	3f 81       	ldd	r19, Y+7	; 0x07
    1074:	23 30       	cpi	r18, 0x03	; 3
    1076:	31 05       	cpc	r19, r1
    1078:	34 f4       	brge	.+12     	; 0x1086 <DIO_voidSetPinValue+0x54>
    107a:	8e 81       	ldd	r24, Y+6	; 0x06
    107c:	9f 81       	ldd	r25, Y+7	; 0x07
    107e:	81 30       	cpi	r24, 0x01	; 1
    1080:	91 05       	cpc	r25, r1
    1082:	69 f0       	breq	.+26     	; 0x109e <DIO_voidSetPinValue+0x6c>
    1084:	d3 c0       	rjmp	.+422    	; 0x122c <DIO_voidSetPinValue+0x1fa>
    1086:	2e 81       	ldd	r18, Y+6	; 0x06
    1088:	3f 81       	ldd	r19, Y+7	; 0x07
    108a:	23 30       	cpi	r18, 0x03	; 3
    108c:	31 05       	cpc	r19, r1
    108e:	89 f1       	breq	.+98     	; 0x10f2 <DIO_voidSetPinValue+0xc0>
    1090:	8e 81       	ldd	r24, Y+6	; 0x06
    1092:	9f 81       	ldd	r25, Y+7	; 0x07
    1094:	84 30       	cpi	r24, 0x04	; 4
    1096:	91 05       	cpc	r25, r1
    1098:	09 f4       	brne	.+2      	; 0x109c <DIO_voidSetPinValue+0x6a>
    109a:	40 c0       	rjmp	.+128    	; 0x111c <DIO_voidSetPinValue+0xea>
    109c:	c7 c0       	rjmp	.+398    	; 0x122c <DIO_voidSetPinValue+0x1fa>
				{
				case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin);break;
    109e:	ab e3       	ldi	r26, 0x3B	; 59
    10a0:	b0 e0       	ldi	r27, 0x00	; 0
    10a2:	eb e3       	ldi	r30, 0x3B	; 59
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	80 81       	ld	r24, Z
    10a8:	48 2f       	mov	r20, r24
    10aa:	8a 81       	ldd	r24, Y+2	; 0x02
    10ac:	28 2f       	mov	r18, r24
    10ae:	30 e0       	ldi	r19, 0x00	; 0
    10b0:	81 e0       	ldi	r24, 0x01	; 1
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	02 2e       	mov	r0, r18
    10b6:	02 c0       	rjmp	.+4      	; 0x10bc <DIO_voidSetPinValue+0x8a>
    10b8:	88 0f       	add	r24, r24
    10ba:	99 1f       	adc	r25, r25
    10bc:	0a 94       	dec	r0
    10be:	e2 f7       	brpl	.-8      	; 0x10b8 <DIO_voidSetPinValue+0x86>
    10c0:	80 95       	com	r24
    10c2:	84 23       	and	r24, r20
    10c4:	8c 93       	st	X, r24
    10c6:	b2 c0       	rjmp	.+356    	; 0x122c <DIO_voidSetPinValue+0x1fa>
				case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin);break;
    10c8:	a8 e3       	ldi	r26, 0x38	; 56
    10ca:	b0 e0       	ldi	r27, 0x00	; 0
    10cc:	e8 e3       	ldi	r30, 0x38	; 56
    10ce:	f0 e0       	ldi	r31, 0x00	; 0
    10d0:	80 81       	ld	r24, Z
    10d2:	48 2f       	mov	r20, r24
    10d4:	8a 81       	ldd	r24, Y+2	; 0x02
    10d6:	28 2f       	mov	r18, r24
    10d8:	30 e0       	ldi	r19, 0x00	; 0
    10da:	81 e0       	ldi	r24, 0x01	; 1
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	02 2e       	mov	r0, r18
    10e0:	02 c0       	rjmp	.+4      	; 0x10e6 <DIO_voidSetPinValue+0xb4>
    10e2:	88 0f       	add	r24, r24
    10e4:	99 1f       	adc	r25, r25
    10e6:	0a 94       	dec	r0
    10e8:	e2 f7       	brpl	.-8      	; 0x10e2 <DIO_voidSetPinValue+0xb0>
    10ea:	80 95       	com	r24
    10ec:	84 23       	and	r24, r20
    10ee:	8c 93       	st	X, r24
    10f0:	9d c0       	rjmp	.+314    	; 0x122c <DIO_voidSetPinValue+0x1fa>
				case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin);break;
    10f2:	a5 e3       	ldi	r26, 0x35	; 53
    10f4:	b0 e0       	ldi	r27, 0x00	; 0
    10f6:	e5 e3       	ldi	r30, 0x35	; 53
    10f8:	f0 e0       	ldi	r31, 0x00	; 0
    10fa:	80 81       	ld	r24, Z
    10fc:	48 2f       	mov	r20, r24
    10fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1100:	28 2f       	mov	r18, r24
    1102:	30 e0       	ldi	r19, 0x00	; 0
    1104:	81 e0       	ldi	r24, 0x01	; 1
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	02 2e       	mov	r0, r18
    110a:	02 c0       	rjmp	.+4      	; 0x1110 <DIO_voidSetPinValue+0xde>
    110c:	88 0f       	add	r24, r24
    110e:	99 1f       	adc	r25, r25
    1110:	0a 94       	dec	r0
    1112:	e2 f7       	brpl	.-8      	; 0x110c <DIO_voidSetPinValue+0xda>
    1114:	80 95       	com	r24
    1116:	84 23       	and	r24, r20
    1118:	8c 93       	st	X, r24
    111a:	88 c0       	rjmp	.+272    	; 0x122c <DIO_voidSetPinValue+0x1fa>
				case DIO_u8PORTD: CLR_BIT(PORTD,Copy_u8Pin);break;
    111c:	a2 e3       	ldi	r26, 0x32	; 50
    111e:	b0 e0       	ldi	r27, 0x00	; 0
    1120:	e2 e3       	ldi	r30, 0x32	; 50
    1122:	f0 e0       	ldi	r31, 0x00	; 0
    1124:	80 81       	ld	r24, Z
    1126:	48 2f       	mov	r20, r24
    1128:	8a 81       	ldd	r24, Y+2	; 0x02
    112a:	28 2f       	mov	r18, r24
    112c:	30 e0       	ldi	r19, 0x00	; 0
    112e:	81 e0       	ldi	r24, 0x01	; 1
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	02 2e       	mov	r0, r18
    1134:	02 c0       	rjmp	.+4      	; 0x113a <DIO_voidSetPinValue+0x108>
    1136:	88 0f       	add	r24, r24
    1138:	99 1f       	adc	r25, r25
    113a:	0a 94       	dec	r0
    113c:	e2 f7       	brpl	.-8      	; 0x1136 <DIO_voidSetPinValue+0x104>
    113e:	80 95       	com	r24
    1140:	84 23       	and	r24, r20
    1142:	8c 93       	st	X, r24
    1144:	73 c0       	rjmp	.+230    	; 0x122c <DIO_voidSetPinValue+0x1fa>

				}

			}
			else if(Copy_u8PinValue==DIO_u8PIN_HIGH)
    1146:	8b 81       	ldd	r24, Y+3	; 0x03
    1148:	81 30       	cpi	r24, 0x01	; 1
    114a:	09 f0       	breq	.+2      	; 0x114e <DIO_voidSetPinValue+0x11c>
    114c:	6f c0       	rjmp	.+222    	; 0x122c <DIO_voidSetPinValue+0x1fa>
			{
				switch(Copy_u8Port)
    114e:	89 81       	ldd	r24, Y+1	; 0x01
    1150:	28 2f       	mov	r18, r24
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	3d 83       	std	Y+5, r19	; 0x05
    1156:	2c 83       	std	Y+4, r18	; 0x04
    1158:	8c 81       	ldd	r24, Y+4	; 0x04
    115a:	9d 81       	ldd	r25, Y+5	; 0x05
    115c:	82 30       	cpi	r24, 0x02	; 2
    115e:	91 05       	cpc	r25, r1
    1160:	51 f1       	breq	.+84     	; 0x11b6 <DIO_voidSetPinValue+0x184>
    1162:	2c 81       	ldd	r18, Y+4	; 0x04
    1164:	3d 81       	ldd	r19, Y+5	; 0x05
    1166:	23 30       	cpi	r18, 0x03	; 3
    1168:	31 05       	cpc	r19, r1
    116a:	34 f4       	brge	.+12     	; 0x1178 <DIO_voidSetPinValue+0x146>
    116c:	8c 81       	ldd	r24, Y+4	; 0x04
    116e:	9d 81       	ldd	r25, Y+5	; 0x05
    1170:	81 30       	cpi	r24, 0x01	; 1
    1172:	91 05       	cpc	r25, r1
    1174:	61 f0       	breq	.+24     	; 0x118e <DIO_voidSetPinValue+0x15c>
    1176:	5a c0       	rjmp	.+180    	; 0x122c <DIO_voidSetPinValue+0x1fa>
    1178:	2c 81       	ldd	r18, Y+4	; 0x04
    117a:	3d 81       	ldd	r19, Y+5	; 0x05
    117c:	23 30       	cpi	r18, 0x03	; 3
    117e:	31 05       	cpc	r19, r1
    1180:	71 f1       	breq	.+92     	; 0x11de <DIO_voidSetPinValue+0x1ac>
    1182:	8c 81       	ldd	r24, Y+4	; 0x04
    1184:	9d 81       	ldd	r25, Y+5	; 0x05
    1186:	84 30       	cpi	r24, 0x04	; 4
    1188:	91 05       	cpc	r25, r1
    118a:	e9 f1       	breq	.+122    	; 0x1206 <DIO_voidSetPinValue+0x1d4>
    118c:	4f c0       	rjmp	.+158    	; 0x122c <DIO_voidSetPinValue+0x1fa>
				{
				case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin);break;
    118e:	ab e3       	ldi	r26, 0x3B	; 59
    1190:	b0 e0       	ldi	r27, 0x00	; 0
    1192:	eb e3       	ldi	r30, 0x3B	; 59
    1194:	f0 e0       	ldi	r31, 0x00	; 0
    1196:	80 81       	ld	r24, Z
    1198:	48 2f       	mov	r20, r24
    119a:	8a 81       	ldd	r24, Y+2	; 0x02
    119c:	28 2f       	mov	r18, r24
    119e:	30 e0       	ldi	r19, 0x00	; 0
    11a0:	81 e0       	ldi	r24, 0x01	; 1
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	02 2e       	mov	r0, r18
    11a6:	02 c0       	rjmp	.+4      	; 0x11ac <DIO_voidSetPinValue+0x17a>
    11a8:	88 0f       	add	r24, r24
    11aa:	99 1f       	adc	r25, r25
    11ac:	0a 94       	dec	r0
    11ae:	e2 f7       	brpl	.-8      	; 0x11a8 <DIO_voidSetPinValue+0x176>
    11b0:	84 2b       	or	r24, r20
    11b2:	8c 93       	st	X, r24
    11b4:	3b c0       	rjmp	.+118    	; 0x122c <DIO_voidSetPinValue+0x1fa>
				case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin);break;
    11b6:	a8 e3       	ldi	r26, 0x38	; 56
    11b8:	b0 e0       	ldi	r27, 0x00	; 0
    11ba:	e8 e3       	ldi	r30, 0x38	; 56
    11bc:	f0 e0       	ldi	r31, 0x00	; 0
    11be:	80 81       	ld	r24, Z
    11c0:	48 2f       	mov	r20, r24
    11c2:	8a 81       	ldd	r24, Y+2	; 0x02
    11c4:	28 2f       	mov	r18, r24
    11c6:	30 e0       	ldi	r19, 0x00	; 0
    11c8:	81 e0       	ldi	r24, 0x01	; 1
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	02 2e       	mov	r0, r18
    11ce:	02 c0       	rjmp	.+4      	; 0x11d4 <DIO_voidSetPinValue+0x1a2>
    11d0:	88 0f       	add	r24, r24
    11d2:	99 1f       	adc	r25, r25
    11d4:	0a 94       	dec	r0
    11d6:	e2 f7       	brpl	.-8      	; 0x11d0 <DIO_voidSetPinValue+0x19e>
    11d8:	84 2b       	or	r24, r20
    11da:	8c 93       	st	X, r24
    11dc:	27 c0       	rjmp	.+78     	; 0x122c <DIO_voidSetPinValue+0x1fa>
				case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin);break;
    11de:	a5 e3       	ldi	r26, 0x35	; 53
    11e0:	b0 e0       	ldi	r27, 0x00	; 0
    11e2:	e5 e3       	ldi	r30, 0x35	; 53
    11e4:	f0 e0       	ldi	r31, 0x00	; 0
    11e6:	80 81       	ld	r24, Z
    11e8:	48 2f       	mov	r20, r24
    11ea:	8a 81       	ldd	r24, Y+2	; 0x02
    11ec:	28 2f       	mov	r18, r24
    11ee:	30 e0       	ldi	r19, 0x00	; 0
    11f0:	81 e0       	ldi	r24, 0x01	; 1
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	02 2e       	mov	r0, r18
    11f6:	02 c0       	rjmp	.+4      	; 0x11fc <DIO_voidSetPinValue+0x1ca>
    11f8:	88 0f       	add	r24, r24
    11fa:	99 1f       	adc	r25, r25
    11fc:	0a 94       	dec	r0
    11fe:	e2 f7       	brpl	.-8      	; 0x11f8 <DIO_voidSetPinValue+0x1c6>
    1200:	84 2b       	or	r24, r20
    1202:	8c 93       	st	X, r24
    1204:	13 c0       	rjmp	.+38     	; 0x122c <DIO_voidSetPinValue+0x1fa>
				case DIO_u8PORTD: SET_BIT(PORTD,Copy_u8Pin);break;
    1206:	a2 e3       	ldi	r26, 0x32	; 50
    1208:	b0 e0       	ldi	r27, 0x00	; 0
    120a:	e2 e3       	ldi	r30, 0x32	; 50
    120c:	f0 e0       	ldi	r31, 0x00	; 0
    120e:	80 81       	ld	r24, Z
    1210:	48 2f       	mov	r20, r24
    1212:	8a 81       	ldd	r24, Y+2	; 0x02
    1214:	28 2f       	mov	r18, r24
    1216:	30 e0       	ldi	r19, 0x00	; 0
    1218:	81 e0       	ldi	r24, 0x01	; 1
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	02 2e       	mov	r0, r18
    121e:	02 c0       	rjmp	.+4      	; 0x1224 <DIO_voidSetPinValue+0x1f2>
    1220:	88 0f       	add	r24, r24
    1222:	99 1f       	adc	r25, r25
    1224:	0a 94       	dec	r0
    1226:	e2 f7       	brpl	.-8      	; 0x1220 <DIO_voidSetPinValue+0x1ee>
    1228:	84 2b       	or	r24, r20
    122a:	8c 93       	st	X, r24
			}



		}
	}
    122c:	27 96       	adiw	r28, 0x07	; 7
    122e:	0f b6       	in	r0, 0x3f	; 63
    1230:	f8 94       	cli
    1232:	de bf       	out	0x3e, r29	; 62
    1234:	0f be       	out	0x3f, r0	; 63
    1236:	cd bf       	out	0x3d, r28	; 61
    1238:	cf 91       	pop	r28
    123a:	df 91       	pop	r29
    123c:	08 95       	ret

0000123e <DIO_voidSetPortValue>:
	void DIO_voidSetPortValue(u8 Copy_u8Port,u8 Copy_u8PortValue)
	{
    123e:	df 93       	push	r29
    1240:	cf 93       	push	r28
    1242:	00 d0       	rcall	.+0      	; 0x1244 <DIO_voidSetPortValue+0x6>
    1244:	00 d0       	rcall	.+0      	; 0x1246 <DIO_voidSetPortValue+0x8>
    1246:	cd b7       	in	r28, 0x3d	; 61
    1248:	de b7       	in	r29, 0x3e	; 62
    124a:	89 83       	std	Y+1, r24	; 0x01
    124c:	6a 83       	std	Y+2, r22	; 0x02
		switch(Copy_u8Port)
    124e:	89 81       	ldd	r24, Y+1	; 0x01
    1250:	28 2f       	mov	r18, r24
    1252:	30 e0       	ldi	r19, 0x00	; 0
    1254:	3c 83       	std	Y+4, r19	; 0x04
    1256:	2b 83       	std	Y+3, r18	; 0x03
    1258:	8b 81       	ldd	r24, Y+3	; 0x03
    125a:	9c 81       	ldd	r25, Y+4	; 0x04
    125c:	82 30       	cpi	r24, 0x02	; 2
    125e:	91 05       	cpc	r25, r1
    1260:	d9 f0       	breq	.+54     	; 0x1298 <DIO_voidSetPortValue+0x5a>
    1262:	2b 81       	ldd	r18, Y+3	; 0x03
    1264:	3c 81       	ldd	r19, Y+4	; 0x04
    1266:	23 30       	cpi	r18, 0x03	; 3
    1268:	31 05       	cpc	r19, r1
    126a:	34 f4       	brge	.+12     	; 0x1278 <DIO_voidSetPortValue+0x3a>
    126c:	8b 81       	ldd	r24, Y+3	; 0x03
    126e:	9c 81       	ldd	r25, Y+4	; 0x04
    1270:	81 30       	cpi	r24, 0x01	; 1
    1272:	91 05       	cpc	r25, r1
    1274:	61 f0       	breq	.+24     	; 0x128e <DIO_voidSetPortValue+0x50>
    1276:	1e c0       	rjmp	.+60     	; 0x12b4 <DIO_voidSetPortValue+0x76>
    1278:	2b 81       	ldd	r18, Y+3	; 0x03
    127a:	3c 81       	ldd	r19, Y+4	; 0x04
    127c:	23 30       	cpi	r18, 0x03	; 3
    127e:	31 05       	cpc	r19, r1
    1280:	81 f0       	breq	.+32     	; 0x12a2 <DIO_voidSetPortValue+0x64>
    1282:	8b 81       	ldd	r24, Y+3	; 0x03
    1284:	9c 81       	ldd	r25, Y+4	; 0x04
    1286:	84 30       	cpi	r24, 0x04	; 4
    1288:	91 05       	cpc	r25, r1
    128a:	81 f0       	breq	.+32     	; 0x12ac <DIO_voidSetPortValue+0x6e>
    128c:	13 c0       	rjmp	.+38     	; 0x12b4 <DIO_voidSetPortValue+0x76>
		{
		case DIO_u8PORTA: PORTA=Copy_u8PortValue;break;
    128e:	eb e3       	ldi	r30, 0x3B	; 59
    1290:	f0 e0       	ldi	r31, 0x00	; 0
    1292:	8a 81       	ldd	r24, Y+2	; 0x02
    1294:	80 83       	st	Z, r24
    1296:	0e c0       	rjmp	.+28     	; 0x12b4 <DIO_voidSetPortValue+0x76>
		case DIO_u8PORTB: PORTB=Copy_u8PortValue;break;
    1298:	e8 e3       	ldi	r30, 0x38	; 56
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	8a 81       	ldd	r24, Y+2	; 0x02
    129e:	80 83       	st	Z, r24
    12a0:	09 c0       	rjmp	.+18     	; 0x12b4 <DIO_voidSetPortValue+0x76>
		case DIO_u8PORTC: PORTC=Copy_u8PortValue;break;
    12a2:	e5 e3       	ldi	r30, 0x35	; 53
    12a4:	f0 e0       	ldi	r31, 0x00	; 0
    12a6:	8a 81       	ldd	r24, Y+2	; 0x02
    12a8:	80 83       	st	Z, r24
    12aa:	04 c0       	rjmp	.+8      	; 0x12b4 <DIO_voidSetPortValue+0x76>
		case DIO_u8PORTD: PORTD=Copy_u8PortValue;break;
    12ac:	e2 e3       	ldi	r30, 0x32	; 50
    12ae:	f0 e0       	ldi	r31, 0x00	; 0
    12b0:	8a 81       	ldd	r24, Y+2	; 0x02
    12b2:	80 83       	st	Z, r24
		}

	}
    12b4:	0f 90       	pop	r0
    12b6:	0f 90       	pop	r0
    12b8:	0f 90       	pop	r0
    12ba:	0f 90       	pop	r0
    12bc:	cf 91       	pop	r28
    12be:	df 91       	pop	r29
    12c0:	08 95       	ret

000012c2 <DIO_u8GetPinValue>:


	u8 DIO_u8GetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin)
	{
    12c2:	df 93       	push	r29
    12c4:	cf 93       	push	r28
    12c6:	00 d0       	rcall	.+0      	; 0x12c8 <DIO_u8GetPinValue+0x6>
    12c8:	00 d0       	rcall	.+0      	; 0x12ca <DIO_u8GetPinValue+0x8>
    12ca:	0f 92       	push	r0
    12cc:	cd b7       	in	r28, 0x3d	; 61
    12ce:	de b7       	in	r29, 0x3e	; 62
    12d0:	8a 83       	std	Y+2, r24	; 0x02
    12d2:	6b 83       	std	Y+3, r22	; 0x03
		u8 Local_u8PinValue=0;
    12d4:	19 82       	std	Y+1, r1	; 0x01
		switch(Copy_u8Port){
    12d6:	8a 81       	ldd	r24, Y+2	; 0x02
    12d8:	28 2f       	mov	r18, r24
    12da:	30 e0       	ldi	r19, 0x00	; 0
    12dc:	3d 83       	std	Y+5, r19	; 0x05
    12de:	2c 83       	std	Y+4, r18	; 0x04
    12e0:	4c 81       	ldd	r20, Y+4	; 0x04
    12e2:	5d 81       	ldd	r21, Y+5	; 0x05
    12e4:	42 30       	cpi	r20, 0x02	; 2
    12e6:	51 05       	cpc	r21, r1
    12e8:	41 f1       	breq	.+80     	; 0x133a <DIO_u8GetPinValue+0x78>
    12ea:	8c 81       	ldd	r24, Y+4	; 0x04
    12ec:	9d 81       	ldd	r25, Y+5	; 0x05
    12ee:	83 30       	cpi	r24, 0x03	; 3
    12f0:	91 05       	cpc	r25, r1
    12f2:	34 f4       	brge	.+12     	; 0x1300 <DIO_u8GetPinValue+0x3e>
    12f4:	2c 81       	ldd	r18, Y+4	; 0x04
    12f6:	3d 81       	ldd	r19, Y+5	; 0x05
    12f8:	21 30       	cpi	r18, 0x01	; 1
    12fa:	31 05       	cpc	r19, r1
    12fc:	61 f0       	breq	.+24     	; 0x1316 <DIO_u8GetPinValue+0x54>
    12fe:	52 c0       	rjmp	.+164    	; 0x13a4 <DIO_u8GetPinValue+0xe2>
    1300:	4c 81       	ldd	r20, Y+4	; 0x04
    1302:	5d 81       	ldd	r21, Y+5	; 0x05
    1304:	43 30       	cpi	r20, 0x03	; 3
    1306:	51 05       	cpc	r21, r1
    1308:	51 f1       	breq	.+84     	; 0x135e <DIO_u8GetPinValue+0x9c>
    130a:	8c 81       	ldd	r24, Y+4	; 0x04
    130c:	9d 81       	ldd	r25, Y+5	; 0x05
    130e:	84 30       	cpi	r24, 0x04	; 4
    1310:	91 05       	cpc	r25, r1
    1312:	b9 f1       	breq	.+110    	; 0x1382 <DIO_u8GetPinValue+0xc0>
    1314:	47 c0       	rjmp	.+142    	; 0x13a4 <DIO_u8GetPinValue+0xe2>
		case DIO_u8PORTA: Local_u8PinValue =GET_BIT(PINA,Copy_u8Pin); break;
    1316:	e9 e3       	ldi	r30, 0x39	; 57
    1318:	f0 e0       	ldi	r31, 0x00	; 0
    131a:	80 81       	ld	r24, Z
    131c:	28 2f       	mov	r18, r24
    131e:	30 e0       	ldi	r19, 0x00	; 0
    1320:	8b 81       	ldd	r24, Y+3	; 0x03
    1322:	88 2f       	mov	r24, r24
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	a9 01       	movw	r20, r18
    1328:	02 c0       	rjmp	.+4      	; 0x132e <DIO_u8GetPinValue+0x6c>
    132a:	55 95       	asr	r21
    132c:	47 95       	ror	r20
    132e:	8a 95       	dec	r24
    1330:	e2 f7       	brpl	.-8      	; 0x132a <DIO_u8GetPinValue+0x68>
    1332:	ca 01       	movw	r24, r20
    1334:	81 70       	andi	r24, 0x01	; 1
    1336:	89 83       	std	Y+1, r24	; 0x01
    1338:	35 c0       	rjmp	.+106    	; 0x13a4 <DIO_u8GetPinValue+0xe2>
        case DIO_u8PORTB: Local_u8PinValue =GET_BIT(PINB,Copy_u8Pin); break;
    133a:	e6 e3       	ldi	r30, 0x36	; 54
    133c:	f0 e0       	ldi	r31, 0x00	; 0
    133e:	80 81       	ld	r24, Z
    1340:	28 2f       	mov	r18, r24
    1342:	30 e0       	ldi	r19, 0x00	; 0
    1344:	8b 81       	ldd	r24, Y+3	; 0x03
    1346:	88 2f       	mov	r24, r24
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	a9 01       	movw	r20, r18
    134c:	02 c0       	rjmp	.+4      	; 0x1352 <DIO_u8GetPinValue+0x90>
    134e:	55 95       	asr	r21
    1350:	47 95       	ror	r20
    1352:	8a 95       	dec	r24
    1354:	e2 f7       	brpl	.-8      	; 0x134e <DIO_u8GetPinValue+0x8c>
    1356:	ca 01       	movw	r24, r20
    1358:	81 70       	andi	r24, 0x01	; 1
    135a:	89 83       	std	Y+1, r24	; 0x01
    135c:	23 c0       	rjmp	.+70     	; 0x13a4 <DIO_u8GetPinValue+0xe2>
		case DIO_u8PORTC: Local_u8PinValue =GET_BIT(PINC,Copy_u8Pin); break;
    135e:	e3 e3       	ldi	r30, 0x33	; 51
    1360:	f0 e0       	ldi	r31, 0x00	; 0
    1362:	80 81       	ld	r24, Z
    1364:	28 2f       	mov	r18, r24
    1366:	30 e0       	ldi	r19, 0x00	; 0
    1368:	8b 81       	ldd	r24, Y+3	; 0x03
    136a:	88 2f       	mov	r24, r24
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	a9 01       	movw	r20, r18
    1370:	02 c0       	rjmp	.+4      	; 0x1376 <DIO_u8GetPinValue+0xb4>
    1372:	55 95       	asr	r21
    1374:	47 95       	ror	r20
    1376:	8a 95       	dec	r24
    1378:	e2 f7       	brpl	.-8      	; 0x1372 <DIO_u8GetPinValue+0xb0>
    137a:	ca 01       	movw	r24, r20
    137c:	81 70       	andi	r24, 0x01	; 1
    137e:	89 83       	std	Y+1, r24	; 0x01
    1380:	11 c0       	rjmp	.+34     	; 0x13a4 <DIO_u8GetPinValue+0xe2>
		case DIO_u8PORTD: Local_u8PinValue =GET_BIT(PIND,Copy_u8Pin); break;
    1382:	e0 e3       	ldi	r30, 0x30	; 48
    1384:	f0 e0       	ldi	r31, 0x00	; 0
    1386:	80 81       	ld	r24, Z
    1388:	28 2f       	mov	r18, r24
    138a:	30 e0       	ldi	r19, 0x00	; 0
    138c:	8b 81       	ldd	r24, Y+3	; 0x03
    138e:	88 2f       	mov	r24, r24
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	a9 01       	movw	r20, r18
    1394:	02 c0       	rjmp	.+4      	; 0x139a <DIO_u8GetPinValue+0xd8>
    1396:	55 95       	asr	r21
    1398:	47 95       	ror	r20
    139a:	8a 95       	dec	r24
    139c:	e2 f7       	brpl	.-8      	; 0x1396 <DIO_u8GetPinValue+0xd4>
    139e:	ca 01       	movw	r24, r20
    13a0:	81 70       	andi	r24, 0x01	; 1
    13a2:	89 83       	std	Y+1, r24	; 0x01
				}
		return Local_u8PinValue;
    13a4:	89 81       	ldd	r24, Y+1	; 0x01
	}
    13a6:	0f 90       	pop	r0
    13a8:	0f 90       	pop	r0
    13aa:	0f 90       	pop	r0
    13ac:	0f 90       	pop	r0
    13ae:	0f 90       	pop	r0
    13b0:	cf 91       	pop	r28
    13b2:	df 91       	pop	r29
    13b4:	08 95       	ret

000013b6 <EXTI_voidINT0Init>:

/*****************pre-build configuration******************/

//INT0 initialization
void EXTI_voidINT0Init(void)
{
    13b6:	df 93       	push	r29
    13b8:	cf 93       	push	r28
    13ba:	cd b7       	in	r28, 0x3d	; 61
    13bc:	de b7       	in	r29, 0x3e	; 62
#if INT0_EN_STATE==INT0_ENABLE
	//Enable peripheral interrupt (PIE)
	SET_BIT(GICR,GICR_INT0);
    13be:	ab e5       	ldi	r26, 0x5B	; 91
    13c0:	b0 e0       	ldi	r27, 0x00	; 0
    13c2:	eb e5       	ldi	r30, 0x5B	; 91
    13c4:	f0 e0       	ldi	r31, 0x00	; 0
    13c6:	80 81       	ld	r24, Z
    13c8:	80 64       	ori	r24, 0x40	; 64
    13ca:	8c 93       	st	X, r24
	CLR_BIT(MCUCR,MCUCR_ISC00);
	CLR_BIT(MCUCR,MCUCR_ISC01);

#elif INT0_SENSE_CONTROL==INT0_ON_CHANGE
	//Sensing interrupt of any logical change edge for INT0
	SET_BIT(MCUCR,MCUCR_ISC00);
    13cc:	a5 e5       	ldi	r26, 0x55	; 85
    13ce:	b0 e0       	ldi	r27, 0x00	; 0
    13d0:	e5 e5       	ldi	r30, 0x55	; 85
    13d2:	f0 e0       	ldi	r31, 0x00	; 0
    13d4:	80 81       	ld	r24, Z
    13d6:	81 60       	ori	r24, 0x01	; 1
    13d8:	8c 93       	st	X, r24
	CLR_BIT(MCUCR,MCUCR_ISC01);
    13da:	a5 e5       	ldi	r26, 0x55	; 85
    13dc:	b0 e0       	ldi	r27, 0x00	; 0
    13de:	e5 e5       	ldi	r30, 0x55	; 85
    13e0:	f0 e0       	ldi	r31, 0x00	; 0
    13e2:	80 81       	ld	r24, Z
    13e4:	8d 7f       	andi	r24, 0xFD	; 253
    13e6:	8c 93       	st	X, r24
	SET_BIT(MCUCR,MCUCR_ISC00);
	SET_BIT(MCUCR,MCUCR_ISC01);
#else
#error "INVALID SENSE CONTROL"
#endif
}
    13e8:	cf 91       	pop	r28
    13ea:	df 91       	pop	r29
    13ec:	08 95       	ret

000013ee <EXTI_voidINT1Init>:
//INT1 initialization
void EXTI_voidINT1Init(void)
{
    13ee:	df 93       	push	r29
    13f0:	cf 93       	push	r28
    13f2:	cd b7       	in	r28, 0x3d	; 61
    13f4:	de b7       	in	r29, 0x3e	; 62
#if INT1_EN_STATE==INT1_ENABLE
	//Enable peripheral interrupt (PIE)
	SET_BIT(GICR,GICR_INT1);
    13f6:	ab e5       	ldi	r26, 0x5B	; 91
    13f8:	b0 e0       	ldi	r27, 0x00	; 0
    13fa:	eb e5       	ldi	r30, 0x5B	; 91
    13fc:	f0 e0       	ldi	r31, 0x00	; 0
    13fe:	80 81       	ld	r24, Z
    1400:	80 68       	ori	r24, 0x80	; 128
    1402:	8c 93       	st	X, r24
#endif


#if INT1_SENSE_CONTROL==INT1_FALLING_EDGE
	//Sensing interrupt of falling edge for INT1
	SET_BIT(MCUCR,MCUCR_ISC11);
    1404:	a5 e5       	ldi	r26, 0x55	; 85
    1406:	b0 e0       	ldi	r27, 0x00	; 0
    1408:	e5 e5       	ldi	r30, 0x55	; 85
    140a:	f0 e0       	ldi	r31, 0x00	; 0
    140c:	80 81       	ld	r24, Z
    140e:	88 60       	ori	r24, 0x08	; 8
    1410:	8c 93       	st	X, r24
	CLR_BIT(MCUCR,MCUCR_ISC10);
    1412:	a5 e5       	ldi	r26, 0x55	; 85
    1414:	b0 e0       	ldi	r27, 0x00	; 0
    1416:	e5 e5       	ldi	r30, 0x55	; 85
    1418:	f0 e0       	ldi	r31, 0x00	; 0
    141a:	80 81       	ld	r24, Z
    141c:	8b 7f       	andi	r24, 0xFB	; 251
    141e:	8c 93       	st	X, r24





}
    1420:	cf 91       	pop	r28
    1422:	df 91       	pop	r29
    1424:	08 95       	ret

00001426 <EXTI_voidINT2Init>:
//INT2 initialization
void EXTI_voidINT2Init(void)
{
    1426:	df 93       	push	r29
    1428:	cf 93       	push	r28
    142a:	cd b7       	in	r28, 0x3d	; 61
    142c:	de b7       	in	r29, 0x3e	; 62


#if INT2_EN_STATE==INT2_ENABLE
	//Enable peripheral interrupt (PIE)
	SET_BIT(GICR,GICR_INT2);
    142e:	ab e5       	ldi	r26, 0x5B	; 91
    1430:	b0 e0       	ldi	r27, 0x00	; 0
    1432:	eb e5       	ldi	r30, 0x5B	; 91
    1434:	f0 e0       	ldi	r31, 0x00	; 0
    1436:	80 81       	ld	r24, Z
    1438:	80 62       	ori	r24, 0x20	; 32
    143a:	8c 93       	st	X, r24
	//THE flag is not into consideration because we are using the ISR approch so its automatically handled
	// global interrupt is to be activated by another function

#elif INT2_SENSE_CONTROL==INT2_RISSING_EDGE
	//Sensing interrupt of rissing edge for INT2
	SET_BIT(MCUCSR,MCUCSR_ISC2);
    143c:	a4 e5       	ldi	r26, 0x54	; 84
    143e:	b0 e0       	ldi	r27, 0x00	; 0
    1440:	e4 e5       	ldi	r30, 0x54	; 84
    1442:	f0 e0       	ldi	r31, 0x00	; 0
    1444:	80 81       	ld	r24, Z
    1446:	80 64       	ori	r24, 0x40	; 64
    1448:	8c 93       	st	X, r24
#else
#error "INVALID SENSE CONTROL"
#endif

}
    144a:	cf 91       	pop	r28
    144c:	df 91       	pop	r29
    144e:	08 95       	ret

00001450 <GIE_voidEnable>:


//Global interrupt (GIE)
//Enable
void GIE_voidEnable(void)
{
    1450:	df 93       	push	r29
    1452:	cf 93       	push	r28
    1454:	cd b7       	in	r28, 0x3d	; 61
    1456:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,SREG_I);
    1458:	af e5       	ldi	r26, 0x5F	; 95
    145a:	b0 e0       	ldi	r27, 0x00	; 0
    145c:	ef e5       	ldi	r30, 0x5F	; 95
    145e:	f0 e0       	ldi	r31, 0x00	; 0
    1460:	80 81       	ld	r24, Z
    1462:	80 68       	ori	r24, 0x80	; 128
    1464:	8c 93       	st	X, r24
}
    1466:	cf 91       	pop	r28
    1468:	df 91       	pop	r29
    146a:	08 95       	ret

0000146c <GIE_voidDisable>:

//Disbale
void GIE_voidDisable(void)
{
    146c:	df 93       	push	r29
    146e:	cf 93       	push	r28
    1470:	cd b7       	in	r28, 0x3d	; 61
    1472:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,SREG_I);
    1474:	af e5       	ldi	r26, 0x5F	; 95
    1476:	b0 e0       	ldi	r27, 0x00	; 0
    1478:	ef e5       	ldi	r30, 0x5F	; 95
    147a:	f0 e0       	ldi	r31, 0x00	; 0
    147c:	80 81       	ld	r24, Z
    147e:	8f 77       	andi	r24, 0x7F	; 127
    1480:	8c 93       	st	X, r24
}
    1482:	cf 91       	pop	r28
    1484:	df 91       	pop	r29
    1486:	08 95       	ret

00001488 <EXTI_u8SetCallBack>:

/*Setcallback funcition*/
u8 EXTI_u8SetCallBack(void (*Copy_pvUserFunc) (void))
{
    1488:	df 93       	push	r29
    148a:	cf 93       	push	r28
    148c:	00 d0       	rcall	.+0      	; 0x148e <EXTI_u8SetCallBack+0x6>
    148e:	0f 92       	push	r0
    1490:	cd b7       	in	r28, 0x3d	; 61
    1492:	de b7       	in	r29, 0x3e	; 62
    1494:	9b 83       	std	Y+3, r25	; 0x03
    1496:	8a 83       	std	Y+2, r24	; 0x02
	u8 Copy_u8LocalErrorCode=OK;
    1498:	81 e0       	ldi	r24, 0x01	; 1
    149a:	89 83       	std	Y+1, r24	; 0x01
   if (Copy_pvUserFunc!=NULL)
    149c:	8a 81       	ldd	r24, Y+2	; 0x02
    149e:	9b 81       	ldd	r25, Y+3	; 0x03
    14a0:	00 97       	sbiw	r24, 0x00	; 0
    14a2:	39 f0       	breq	.+14     	; 0x14b2 <EXTI_u8SetCallBack+0x2a>
   {
	EXTI_INT0ptrtofunc=Copy_pvUserFunc;
    14a4:	8a 81       	ldd	r24, Y+2	; 0x02
    14a6:	9b 81       	ldd	r25, Y+3	; 0x03
    14a8:	90 93 b9 00 	sts	0x00B9, r25
    14ac:	80 93 b8 00 	sts	0x00B8, r24
    14b0:	02 c0       	rjmp	.+4      	; 0x14b6 <EXTI_u8SetCallBack+0x2e>
   }
   else
   {Copy_u8LocalErrorCode=NOT_OK;}
    14b2:	82 e0       	ldi	r24, 0x02	; 2
    14b4:	89 83       	std	Y+1, r24	; 0x01
   return Copy_u8LocalErrorCode;
    14b6:	89 81       	ldd	r24, Y+1	; 0x01
}
    14b8:	0f 90       	pop	r0
    14ba:	0f 90       	pop	r0
    14bc:	0f 90       	pop	r0
    14be:	cf 91       	pop	r28
    14c0:	df 91       	pop	r29
    14c2:	08 95       	ret

000014c4 <__vector_1>:
/*Interrupt service routine (ISR),,get the vector number from datasheet page 42,,we matsa4 tena2as 1*/
/*ISR implemention for INT0*/
void __vector_1(void) __attribute__((signal));
void __vector_1(void)
{
    14c4:	1f 92       	push	r1
    14c6:	0f 92       	push	r0
    14c8:	0f b6       	in	r0, 0x3f	; 63
    14ca:	0f 92       	push	r0
    14cc:	11 24       	eor	r1, r1
    14ce:	2f 93       	push	r18
    14d0:	3f 93       	push	r19
    14d2:	4f 93       	push	r20
    14d4:	5f 93       	push	r21
    14d6:	6f 93       	push	r22
    14d8:	7f 93       	push	r23
    14da:	8f 93       	push	r24
    14dc:	9f 93       	push	r25
    14de:	af 93       	push	r26
    14e0:	bf 93       	push	r27
    14e2:	ef 93       	push	r30
    14e4:	ff 93       	push	r31
    14e6:	df 93       	push	r29
    14e8:	cf 93       	push	r28
    14ea:	cd b7       	in	r28, 0x3d	; 61
    14ec:	de b7       	in	r29, 0x3e	; 62

	if(EXTI_INT0ptrtofunc!=NULL)
    14ee:	80 91 b8 00 	lds	r24, 0x00B8
    14f2:	90 91 b9 00 	lds	r25, 0x00B9
    14f6:	00 97       	sbiw	r24, 0x00	; 0
    14f8:	29 f0       	breq	.+10     	; 0x1504 <__vector_1+0x40>
	{EXTI_INT0ptrtofunc();}
    14fa:	e0 91 b8 00 	lds	r30, 0x00B8
    14fe:	f0 91 b9 00 	lds	r31, 0x00B9
    1502:	09 95       	icall
}
    1504:	cf 91       	pop	r28
    1506:	df 91       	pop	r29
    1508:	ff 91       	pop	r31
    150a:	ef 91       	pop	r30
    150c:	bf 91       	pop	r27
    150e:	af 91       	pop	r26
    1510:	9f 91       	pop	r25
    1512:	8f 91       	pop	r24
    1514:	7f 91       	pop	r23
    1516:	6f 91       	pop	r22
    1518:	5f 91       	pop	r21
    151a:	4f 91       	pop	r20
    151c:	3f 91       	pop	r19
    151e:	2f 91       	pop	r18
    1520:	0f 90       	pop	r0
    1522:	0f be       	out	0x3f, r0	; 63
    1524:	0f 90       	pop	r0
    1526:	1f 90       	pop	r1
    1528:	18 95       	reti

0000152a <KEYPAD_voidInit>:
# include "Keypad_interface.h"
# include "Keypad_private.h"


void KEYPAD_voidInit(void)
{
    152a:	df 93       	push	r29
    152c:	cf 93       	push	r28
    152e:	cd b7       	in	r28, 0x3d	; 61
    1530:	de b7       	in	r29, 0x3e	; 62
	/*The pins are manipulated (not like the configurations)*/
	// Set keypad columns pins as OUTPUT
	DIO_voidSetPinDirection(KEYPAD_CLOUMNS_PORT, KEY_PAD_COLUMN0_PIN, DIO_u8PIN_OUTPUT);
    1532:	81 e0       	ldi	r24, 0x01	; 1
    1534:	60 e0       	ldi	r22, 0x00	; 0
    1536:	41 e0       	ldi	r20, 0x01	; 1
    1538:	0e 94 d1 06 	call	0xda2	; 0xda2 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KEYPAD_CLOUMNS_PORT, KEY_PAD_COLUMN1_PIN, DIO_u8PIN_OUTPUT);
    153c:	81 e0       	ldi	r24, 0x01	; 1
    153e:	61 e0       	ldi	r22, 0x01	; 1
    1540:	41 e0       	ldi	r20, 0x01	; 1
    1542:	0e 94 d1 06 	call	0xda2	; 0xda2 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KEYPAD_CLOUMNS_PORT, KEY_PAD_COLUMN2_PIN, DIO_u8PIN_OUTPUT);
    1546:	81 e0       	ldi	r24, 0x01	; 1
    1548:	62 e0       	ldi	r22, 0x02	; 2
    154a:	41 e0       	ldi	r20, 0x01	; 1
    154c:	0e 94 d1 06 	call	0xda2	; 0xda2 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KEYPAD_CLOUMNS_PORT, KEY_PAD_COLUMN3_PIN, DIO_u8PIN_OUTPUT);
    1550:	81 e0       	ldi	r24, 0x01	; 1
    1552:	63 e0       	ldi	r22, 0x03	; 3
    1554:	41 e0       	ldi	r20, 0x01	; 1
    1556:	0e 94 d1 06 	call	0xda2	; 0xda2 <DIO_voidSetPinDirection>

	// Set keypad rows pins as INPUT
	DIO_voidSetPinDirection(KEYPAD_ROWS_PORT, KEY_PAD_ROW0_PIN, DIO_u8PIN_INPUT);
    155a:	82 e0       	ldi	r24, 0x02	; 2
    155c:	60 e0       	ldi	r22, 0x00	; 0
    155e:	40 e0       	ldi	r20, 0x00	; 0
    1560:	0e 94 d1 06 	call	0xda2	; 0xda2 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KEYPAD_ROWS_PORT, KEY_PAD_ROW1_PIN, DIO_u8PIN_INPUT);
    1564:	82 e0       	ldi	r24, 0x02	; 2
    1566:	61 e0       	ldi	r22, 0x01	; 1
    1568:	40 e0       	ldi	r20, 0x00	; 0
    156a:	0e 94 d1 06 	call	0xda2	; 0xda2 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KEYPAD_ROWS_PORT, KEY_PAD_ROW2_PIN, DIO_u8PIN_INPUT);
    156e:	82 e0       	ldi	r24, 0x02	; 2
    1570:	62 e0       	ldi	r22, 0x02	; 2
    1572:	40 e0       	ldi	r20, 0x00	; 0
    1574:	0e 94 d1 06 	call	0xda2	; 0xda2 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KEYPAD_ROWS_PORT, KEY_PAD_ROW3_PIN, DIO_u8PIN_INPUT);
    1578:	82 e0       	ldi	r24, 0x02	; 2
    157a:	63 e0       	ldi	r22, 0x03	; 3
    157c:	40 e0       	ldi	r20, 0x00	; 0
    157e:	0e 94 d1 06 	call	0xda2	; 0xda2 <DIO_voidSetPinDirection>
	//DIO_voidSetPortValue(KEYPAD_PORT, DIO_u8PORT_HIGH);


	/* Set keypad pins values  to HIGH (to enable pull-up in rows pins
	   and output HIGH signal on columns pins) */
	DIO_voidSetPinValue(KEYPAD_CLOUMNS_PORT,KEY_PAD_COLUMN0_PIN,DIO_u8PIN_HIGH);
    1582:	81 e0       	ldi	r24, 0x01	; 1
    1584:	60 e0       	ldi	r22, 0x00	; 0
    1586:	41 e0       	ldi	r20, 0x01	; 1
    1588:	0e 94 19 08 	call	0x1032	; 0x1032 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KEYPAD_CLOUMNS_PORT,KEY_PAD_COLUMN1_PIN,DIO_u8PIN_HIGH);
    158c:	81 e0       	ldi	r24, 0x01	; 1
    158e:	61 e0       	ldi	r22, 0x01	; 1
    1590:	41 e0       	ldi	r20, 0x01	; 1
    1592:	0e 94 19 08 	call	0x1032	; 0x1032 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KEYPAD_CLOUMNS_PORT,KEY_PAD_COLUMN2_PIN,DIO_u8PIN_HIGH);
    1596:	81 e0       	ldi	r24, 0x01	; 1
    1598:	62 e0       	ldi	r22, 0x02	; 2
    159a:	41 e0       	ldi	r20, 0x01	; 1
    159c:	0e 94 19 08 	call	0x1032	; 0x1032 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KEYPAD_CLOUMNS_PORT,KEY_PAD_COLUMN3_PIN,DIO_u8PIN_HIGH);
    15a0:	81 e0       	ldi	r24, 0x01	; 1
    15a2:	63 e0       	ldi	r22, 0x03	; 3
    15a4:	41 e0       	ldi	r20, 0x01	; 1
    15a6:	0e 94 19 08 	call	0x1032	; 0x1032 <DIO_voidSetPinValue>

	DIO_voidSetPinValue(KEYPAD_ROWS_PORT,KEY_PAD_ROW0_PIN,DIO_u8PIN_HIGH);
    15aa:	82 e0       	ldi	r24, 0x02	; 2
    15ac:	60 e0       	ldi	r22, 0x00	; 0
    15ae:	41 e0       	ldi	r20, 0x01	; 1
    15b0:	0e 94 19 08 	call	0x1032	; 0x1032 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KEYPAD_ROWS_PORT,KEY_PAD_ROW1_PIN,DIO_u8PIN_HIGH);
    15b4:	82 e0       	ldi	r24, 0x02	; 2
    15b6:	61 e0       	ldi	r22, 0x01	; 1
    15b8:	41 e0       	ldi	r20, 0x01	; 1
    15ba:	0e 94 19 08 	call	0x1032	; 0x1032 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KEYPAD_ROWS_PORT,KEY_PAD_ROW2_PIN,DIO_u8PIN_HIGH);
    15be:	82 e0       	ldi	r24, 0x02	; 2
    15c0:	62 e0       	ldi	r22, 0x02	; 2
    15c2:	41 e0       	ldi	r20, 0x01	; 1
    15c4:	0e 94 19 08 	call	0x1032	; 0x1032 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KEYPAD_ROWS_PORT,KEY_PAD_ROW3_PIN,DIO_u8PIN_HIGH);
    15c8:	82 e0       	ldi	r24, 0x02	; 2
    15ca:	63 e0       	ldi	r22, 0x03	; 3
    15cc:	41 e0       	ldi	r20, 0x01	; 1
    15ce:	0e 94 19 08 	call	0x1032	; 0x1032 <DIO_voidSetPinValue>
}
    15d2:	cf 91       	pop	r28
    15d4:	df 91       	pop	r29
    15d6:	08 95       	ret

000015d8 <KEYPAD_u8GetPressedKey>:

u8 KEYPAD_u8GetPressedKey(void)
{
    15d8:	df 93       	push	r29
    15da:	cf 93       	push	r28
    15dc:	cd b7       	in	r28, 0x3d	; 61
    15de:	de b7       	in	r29, 0x3e	; 62
    15e0:	a1 97       	sbiw	r28, 0x21	; 33
    15e2:	0f b6       	in	r0, 0x3f	; 63
    15e4:	f8 94       	cli
    15e6:	de bf       	out	0x3e, r29	; 62
    15e8:	0f be       	out	0x3f, r0	; 63
    15ea:	cd bf       	out	0x3d, r28	; 61
	u8 local_u8PressedKey = KEYPAD_DEFAULT_KEY;
    15ec:	8f ef       	ldi	r24, 0xFF	; 255
    15ee:	8b 83       	std	Y+3, r24	; 0x03

	// Keypad characters array
	u8 KeypadArr [KEYPAD_ROWS_NUM][KEYPAD_COLS_NUM] = KEYPAD_ARR_VAL;
    15f0:	ce 01       	movw	r24, r28
    15f2:	04 96       	adiw	r24, 0x04	; 4
    15f4:	9e 8f       	std	Y+30, r25	; 0x1e
    15f6:	8d 8f       	std	Y+29, r24	; 0x1d
    15f8:	e4 ea       	ldi	r30, 0xA4	; 164
    15fa:	f0 e0       	ldi	r31, 0x00	; 0
    15fc:	f8 a3       	std	Y+32, r31	; 0x20
    15fe:	ef 8f       	std	Y+31, r30	; 0x1f
    1600:	f0 e1       	ldi	r31, 0x10	; 16
    1602:	f9 a3       	std	Y+33, r31	; 0x21
    1604:	ef 8d       	ldd	r30, Y+31	; 0x1f
    1606:	f8 a1       	ldd	r31, Y+32	; 0x20
    1608:	00 80       	ld	r0, Z
    160a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    160c:	98 a1       	ldd	r25, Y+32	; 0x20
    160e:	01 96       	adiw	r24, 0x01	; 1
    1610:	98 a3       	std	Y+32, r25	; 0x20
    1612:	8f 8f       	std	Y+31, r24	; 0x1f
    1614:	ed 8d       	ldd	r30, Y+29	; 0x1d
    1616:	fe 8d       	ldd	r31, Y+30	; 0x1e
    1618:	00 82       	st	Z, r0
    161a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    161c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    161e:	01 96       	adiw	r24, 0x01	; 1
    1620:	9e 8f       	std	Y+30, r25	; 0x1e
    1622:	8d 8f       	std	Y+29, r24	; 0x1d
    1624:	99 a1       	ldd	r25, Y+33	; 0x21
    1626:	91 50       	subi	r25, 0x01	; 1
    1628:	99 a3       	std	Y+33, r25	; 0x21
    162a:	e9 a1       	ldd	r30, Y+33	; 0x21
    162c:	ee 23       	and	r30, r30
    162e:	51 f7       	brne	.-44     	; 0x1604 <KEYPAD_u8GetPressedKey+0x2c>

	// Rows and columns arrays
	u8 ColumnsArr[KEYPAD_COLS_NUM] = {KEY_PAD_COLUMN0_PIN, KEY_PAD_COLUMN1_PIN, KEY_PAD_COLUMN2_PIN, KEY_PAD_COLUMN3_PIN};
    1630:	1c 8a       	std	Y+20, r1	; 0x14
    1632:	81 e0       	ldi	r24, 0x01	; 1
    1634:	8d 8b       	std	Y+21, r24	; 0x15
    1636:	82 e0       	ldi	r24, 0x02	; 2
    1638:	8e 8b       	std	Y+22, r24	; 0x16
    163a:	83 e0       	ldi	r24, 0x03	; 3
    163c:	8f 8b       	std	Y+23, r24	; 0x17
	u8 RowsArr[KEYPAD_ROWS_NUM] = {KEY_PAD_ROW0_PIN, KEY_PAD_ROW1_PIN, KEY_PAD_ROW2_PIN, KEY_PAD_ROW3_PIN};
    163e:	18 8e       	std	Y+24, r1	; 0x18
    1640:	81 e0       	ldi	r24, 0x01	; 1
    1642:	89 8f       	std	Y+25, r24	; 0x19
    1644:	82 e0       	ldi	r24, 0x02	; 2
    1646:	8a 8f       	std	Y+26, r24	; 0x1a
    1648:	83 e0       	ldi	r24, 0x03	; 3
    164a:	8b 8f       	std	Y+27, r24	; 0x1b

	// Loop over each column
	for(u8 i = 0; i < KEYPAD_COLS_NUM; i++)
    164c:	1a 82       	std	Y+2, r1	; 0x02
    164e:	72 c0       	rjmp	.+228    	; 0x1734 <KEYPAD_u8GetPressedKey+0x15c>
	{
		// Activate current column (Set to PIN_LOW)
		DIO_voidSetPinValue(KEYPAD_CLOUMNS_PORT, ColumnsArr[i], DIO_u8PIN_LOW);
    1650:	8a 81       	ldd	r24, Y+2	; 0x02
    1652:	28 2f       	mov	r18, r24
    1654:	30 e0       	ldi	r19, 0x00	; 0
    1656:	ce 01       	movw	r24, r28
    1658:	44 96       	adiw	r24, 0x14	; 20
    165a:	fc 01       	movw	r30, r24
    165c:	e2 0f       	add	r30, r18
    165e:	f3 1f       	adc	r31, r19
    1660:	90 81       	ld	r25, Z
    1662:	81 e0       	ldi	r24, 0x01	; 1
    1664:	69 2f       	mov	r22, r25
    1666:	40 e0       	ldi	r20, 0x00	; 0
    1668:	0e 94 19 08 	call	0x1032	; 0x1032 <DIO_voidSetPinValue>

		// Loop over rows to get the pressed key
		for(u8 j = 0; j < KEYPAD_ROWS_NUM; j++)
    166c:	19 82       	std	Y+1, r1	; 0x01
    166e:	4d c0       	rjmp	.+154    	; 0x170a <KEYPAD_u8GetPressedKey+0x132>
		{
			if(DIO_u8GetPinValue(KEYPAD_ROWS_PORT, RowsArr[j]) == DIO_u8PIN_LOW)
    1670:	89 81       	ldd	r24, Y+1	; 0x01
    1672:	28 2f       	mov	r18, r24
    1674:	30 e0       	ldi	r19, 0x00	; 0
    1676:	ce 01       	movw	r24, r28
    1678:	48 96       	adiw	r24, 0x18	; 24
    167a:	fc 01       	movw	r30, r24
    167c:	e2 0f       	add	r30, r18
    167e:	f3 1f       	adc	r31, r19
    1680:	90 81       	ld	r25, Z
    1682:	82 e0       	ldi	r24, 0x02	; 2
    1684:	69 2f       	mov	r22, r25
    1686:	0e 94 61 09 	call	0x12c2	; 0x12c2 <DIO_u8GetPinValue>
    168a:	88 23       	and	r24, r24
    168c:	d9 f5       	brne	.+118    	; 0x1704 <KEYPAD_u8GetPressedKey+0x12c>
			{
				local_u8PressedKey = KeypadArr[j][i];
    168e:	89 81       	ldd	r24, Y+1	; 0x01
    1690:	28 2f       	mov	r18, r24
    1692:	30 e0       	ldi	r19, 0x00	; 0
    1694:	8a 81       	ldd	r24, Y+2	; 0x02
    1696:	48 2f       	mov	r20, r24
    1698:	50 e0       	ldi	r21, 0x00	; 0
    169a:	22 0f       	add	r18, r18
    169c:	33 1f       	adc	r19, r19
    169e:	22 0f       	add	r18, r18
    16a0:	33 1f       	adc	r19, r19
    16a2:	ce 01       	movw	r24, r28
    16a4:	01 96       	adiw	r24, 0x01	; 1
    16a6:	82 0f       	add	r24, r18
    16a8:	93 1f       	adc	r25, r19
    16aa:	84 0f       	add	r24, r20
    16ac:	95 1f       	adc	r25, r21
    16ae:	fc 01       	movw	r30, r24
    16b0:	33 96       	adiw	r30, 0x03	; 3
    16b2:	80 81       	ld	r24, Z
    16b4:	8b 83       	std	Y+3, r24	; 0x03
    16b6:	14 c0       	rjmp	.+40     	; 0x16e0 <KEYPAD_u8GetPressedKey+0x108>

				// Polling till switch released (to avoid bouncing)
				while(DIO_u8GetPinValue(KEYPAD_ROWS_PORT, RowsArr[j]) == DIO_u8PIN_LOW)
				{
					/*Blank condition*/
					local_u8PressedKey = KeypadArr[j][i];
    16b8:	89 81       	ldd	r24, Y+1	; 0x01
    16ba:	28 2f       	mov	r18, r24
    16bc:	30 e0       	ldi	r19, 0x00	; 0
    16be:	8a 81       	ldd	r24, Y+2	; 0x02
    16c0:	48 2f       	mov	r20, r24
    16c2:	50 e0       	ldi	r21, 0x00	; 0
    16c4:	22 0f       	add	r18, r18
    16c6:	33 1f       	adc	r19, r19
    16c8:	22 0f       	add	r18, r18
    16ca:	33 1f       	adc	r19, r19
    16cc:	ce 01       	movw	r24, r28
    16ce:	01 96       	adiw	r24, 0x01	; 1
    16d0:	82 0f       	add	r24, r18
    16d2:	93 1f       	adc	r25, r19
    16d4:	84 0f       	add	r24, r20
    16d6:	95 1f       	adc	r25, r21
    16d8:	fc 01       	movw	r30, r24
    16da:	33 96       	adiw	r30, 0x03	; 3
    16dc:	80 81       	ld	r24, Z
    16de:	8b 83       	std	Y+3, r24	; 0x03
			if(DIO_u8GetPinValue(KEYPAD_ROWS_PORT, RowsArr[j]) == DIO_u8PIN_LOW)
			{
				local_u8PressedKey = KeypadArr[j][i];

				// Polling till switch released (to avoid bouncing)
				while(DIO_u8GetPinValue(KEYPAD_ROWS_PORT, RowsArr[j]) == DIO_u8PIN_LOW)
    16e0:	89 81       	ldd	r24, Y+1	; 0x01
    16e2:	28 2f       	mov	r18, r24
    16e4:	30 e0       	ldi	r19, 0x00	; 0
    16e6:	ce 01       	movw	r24, r28
    16e8:	48 96       	adiw	r24, 0x18	; 24
    16ea:	fc 01       	movw	r30, r24
    16ec:	e2 0f       	add	r30, r18
    16ee:	f3 1f       	adc	r31, r19
    16f0:	90 81       	ld	r25, Z
    16f2:	82 e0       	ldi	r24, 0x02	; 2
    16f4:	69 2f       	mov	r22, r25
    16f6:	0e 94 61 09 	call	0x12c2	; 0x12c2 <DIO_u8GetPinValue>
    16fa:	88 23       	and	r24, r24
    16fc:	e9 f2       	breq	.-70     	; 0x16b8 <KEYPAD_u8GetPressedKey+0xe0>
				{
					/*Blank condition*/
					local_u8PressedKey = KeypadArr[j][i];
				}

				return local_u8PressedKey;
    16fe:	fb 81       	ldd	r31, Y+3	; 0x03
    1700:	fc 8f       	std	Y+28, r31	; 0x1c
    1702:	1e c0       	rjmp	.+60     	; 0x1740 <KEYPAD_u8GetPressedKey+0x168>
	{
		// Activate current column (Set to PIN_LOW)
		DIO_voidSetPinValue(KEYPAD_CLOUMNS_PORT, ColumnsArr[i], DIO_u8PIN_LOW);

		// Loop over rows to get the pressed key
		for(u8 j = 0; j < KEYPAD_ROWS_NUM; j++)
    1704:	89 81       	ldd	r24, Y+1	; 0x01
    1706:	8f 5f       	subi	r24, 0xFF	; 255
    1708:	89 83       	std	Y+1, r24	; 0x01
    170a:	89 81       	ldd	r24, Y+1	; 0x01
    170c:	84 30       	cpi	r24, 0x04	; 4
    170e:	08 f4       	brcc	.+2      	; 0x1712 <KEYPAD_u8GetPressedKey+0x13a>
    1710:	af cf       	rjmp	.-162    	; 0x1670 <KEYPAD_u8GetPressedKey+0x98>
			}
			else{}
		}

		// deActivate the current column (Set to PIN_HIGH)
		DIO_voidSetPinValue(KEYPAD_CLOUMNS_PORT, ColumnsArr[i], DIO_u8PIN_HIGH);
    1712:	8a 81       	ldd	r24, Y+2	; 0x02
    1714:	28 2f       	mov	r18, r24
    1716:	30 e0       	ldi	r19, 0x00	; 0
    1718:	ce 01       	movw	r24, r28
    171a:	44 96       	adiw	r24, 0x14	; 20
    171c:	fc 01       	movw	r30, r24
    171e:	e2 0f       	add	r30, r18
    1720:	f3 1f       	adc	r31, r19
    1722:	90 81       	ld	r25, Z
    1724:	81 e0       	ldi	r24, 0x01	; 1
    1726:	69 2f       	mov	r22, r25
    1728:	41 e0       	ldi	r20, 0x01	; 1
    172a:	0e 94 19 08 	call	0x1032	; 0x1032 <DIO_voidSetPinValue>
	// Rows and columns arrays
	u8 ColumnsArr[KEYPAD_COLS_NUM] = {KEY_PAD_COLUMN0_PIN, KEY_PAD_COLUMN1_PIN, KEY_PAD_COLUMN2_PIN, KEY_PAD_COLUMN3_PIN};
	u8 RowsArr[KEYPAD_ROWS_NUM] = {KEY_PAD_ROW0_PIN, KEY_PAD_ROW1_PIN, KEY_PAD_ROW2_PIN, KEY_PAD_ROW3_PIN};

	// Loop over each column
	for(u8 i = 0; i < KEYPAD_COLS_NUM; i++)
    172e:	8a 81       	ldd	r24, Y+2	; 0x02
    1730:	8f 5f       	subi	r24, 0xFF	; 255
    1732:	8a 83       	std	Y+2, r24	; 0x02
    1734:	8a 81       	ldd	r24, Y+2	; 0x02
    1736:	84 30       	cpi	r24, 0x04	; 4
    1738:	08 f4       	brcc	.+2      	; 0x173c <KEYPAD_u8GetPressedKey+0x164>
    173a:	8a cf       	rjmp	.-236    	; 0x1650 <KEYPAD_u8GetPressedKey+0x78>

		// deActivate the current column (Set to PIN_HIGH)
		DIO_voidSetPinValue(KEYPAD_CLOUMNS_PORT, ColumnsArr[i], DIO_u8PIN_HIGH);
	}
//if its the default value,it means that is no pressed key, so i will put simple if condition in the main.c so the LCD doesnt print it
	return local_u8PressedKey;
    173c:	8b 81       	ldd	r24, Y+3	; 0x03
    173e:	8c 8f       	std	Y+28, r24	; 0x1c
    1740:	8c 8d       	ldd	r24, Y+28	; 0x1c
}
    1742:	a1 96       	adiw	r28, 0x21	; 33
    1744:	0f b6       	in	r0, 0x3f	; 63
    1746:	f8 94       	cli
    1748:	de bf       	out	0x3e, r29	; 62
    174a:	0f be       	out	0x3f, r0	; 63
    174c:	cd bf       	out	0x3d, r28	; 61
    174e:	cf 91       	pop	r28
    1750:	df 91       	pop	r29
    1752:	08 95       	ret

00001754 <LCD_voidSendCommand>:

#include"LCD_interface.h"
#include"LCD_config.h"
#include"LCD_private.h"
void LCD_voidSendCommand(u8 Copy_u8Command)
{
    1754:	df 93       	push	r29
    1756:	cf 93       	push	r28
    1758:	cd b7       	in	r28, 0x3d	; 61
    175a:	de b7       	in	r29, 0x3e	; 62
    175c:	2f 97       	sbiw	r28, 0x0f	; 15
    175e:	0f b6       	in	r0, 0x3f	; 63
    1760:	f8 94       	cli
    1762:	de bf       	out	0x3e, r29	; 62
    1764:	0f be       	out	0x3f, r0	; 63
    1766:	cd bf       	out	0x3d, r28	; 61
    1768:	8f 87       	std	Y+15, r24	; 0x0f
	/*NOTE:ana ha3mel al port wel pin direction fel Init function*/
	/*to send command, put RS to low(0)*/


	DIO_voidSetPinValue(LCD_Control_Port,LCD_RS_PIN,DIO_u8PIN_LOW);// 7ATET AL RS be zero
    176a:	84 e0       	ldi	r24, 0x04	; 4
    176c:	65 e0       	ldi	r22, 0x05	; 5
    176e:	40 e0       	ldi	r20, 0x00	; 0
    1770:	0e 94 19 08 	call	0x1032	; 0x1032 <DIO_voidSetPinValue>
	/*to get to write mode, u have to et RW to low(0)*/
	DIO_voidSetPinValue(LCD_Control_Port,LCD_RW_PIN,DIO_u8PIN_LOW);
    1774:	84 e0       	ldi	r24, 0x04	; 4
    1776:	66 e0       	ldi	r22, 0x06	; 6
    1778:	40 e0       	ldi	r20, 0x00	; 0
    177a:	0e 94 19 08 	call	0x1032	; 0x1032 <DIO_voidSetPinValue>
	/*7ot b2a al command al user hayb3to fel data port(D0---D7)*/
	DIO_voidSetPortValue(LCD_Data_Port,Copy_u8Command);
    177e:	83 e0       	ldi	r24, 0x03	; 3
    1780:	6f 85       	ldd	r22, Y+15	; 0x0f
    1782:	0e 94 1f 09 	call	0x123e	; 0x123e <DIO_voidSetPortValue>
	/*4a8al al enable---HIGH-delay-low*/
	DIO_voidSetPinValue(LCD_Control_Port,LCD_E_PIN,DIO_u8PIN_HIGH);
    1786:	84 e0       	ldi	r24, 0x04	; 4
    1788:	67 e0       	ldi	r22, 0x07	; 7
    178a:	41 e0       	ldi	r20, 0x01	; 1
    178c:	0e 94 19 08 	call	0x1032	; 0x1032 <DIO_voidSetPinValue>
    1790:	80 e0       	ldi	r24, 0x00	; 0
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	a0 e0       	ldi	r26, 0x00	; 0
    1796:	b0 e4       	ldi	r27, 0x40	; 64
    1798:	8b 87       	std	Y+11, r24	; 0x0b
    179a:	9c 87       	std	Y+12, r25	; 0x0c
    179c:	ad 87       	std	Y+13, r26	; 0x0d
    179e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    17a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    17a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    17a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    17a8:	20 e0       	ldi	r18, 0x00	; 0
    17aa:	30 e0       	ldi	r19, 0x00	; 0
    17ac:	4a ef       	ldi	r20, 0xFA	; 250
    17ae:	54 e4       	ldi	r21, 0x44	; 68
    17b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17b4:	dc 01       	movw	r26, r24
    17b6:	cb 01       	movw	r24, r22
    17b8:	8f 83       	std	Y+7, r24	; 0x07
    17ba:	98 87       	std	Y+8, r25	; 0x08
    17bc:	a9 87       	std	Y+9, r26	; 0x09
    17be:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17c0:	6f 81       	ldd	r22, Y+7	; 0x07
    17c2:	78 85       	ldd	r23, Y+8	; 0x08
    17c4:	89 85       	ldd	r24, Y+9	; 0x09
    17c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    17c8:	20 e0       	ldi	r18, 0x00	; 0
    17ca:	30 e0       	ldi	r19, 0x00	; 0
    17cc:	40 e8       	ldi	r20, 0x80	; 128
    17ce:	5f e3       	ldi	r21, 0x3F	; 63
    17d0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17d4:	88 23       	and	r24, r24
    17d6:	2c f4       	brge	.+10     	; 0x17e2 <LCD_voidSendCommand+0x8e>
		__ticks = 1;
    17d8:	81 e0       	ldi	r24, 0x01	; 1
    17da:	90 e0       	ldi	r25, 0x00	; 0
    17dc:	9e 83       	std	Y+6, r25	; 0x06
    17de:	8d 83       	std	Y+5, r24	; 0x05
    17e0:	3f c0       	rjmp	.+126    	; 0x1860 <LCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
    17e2:	6f 81       	ldd	r22, Y+7	; 0x07
    17e4:	78 85       	ldd	r23, Y+8	; 0x08
    17e6:	89 85       	ldd	r24, Y+9	; 0x09
    17e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    17ea:	20 e0       	ldi	r18, 0x00	; 0
    17ec:	3f ef       	ldi	r19, 0xFF	; 255
    17ee:	4f e7       	ldi	r20, 0x7F	; 127
    17f0:	57 e4       	ldi	r21, 0x47	; 71
    17f2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17f6:	18 16       	cp	r1, r24
    17f8:	4c f5       	brge	.+82     	; 0x184c <LCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    17fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    17fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1800:	9e 85       	ldd	r25, Y+14	; 0x0e
    1802:	20 e0       	ldi	r18, 0x00	; 0
    1804:	30 e0       	ldi	r19, 0x00	; 0
    1806:	40 e2       	ldi	r20, 0x20	; 32
    1808:	51 e4       	ldi	r21, 0x41	; 65
    180a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    180e:	dc 01       	movw	r26, r24
    1810:	cb 01       	movw	r24, r22
    1812:	bc 01       	movw	r22, r24
    1814:	cd 01       	movw	r24, r26
    1816:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    181a:	dc 01       	movw	r26, r24
    181c:	cb 01       	movw	r24, r22
    181e:	9e 83       	std	Y+6, r25	; 0x06
    1820:	8d 83       	std	Y+5, r24	; 0x05
    1822:	0f c0       	rjmp	.+30     	; 0x1842 <LCD_voidSendCommand+0xee>
    1824:	88 ec       	ldi	r24, 0xC8	; 200
    1826:	90 e0       	ldi	r25, 0x00	; 0
    1828:	9c 83       	std	Y+4, r25	; 0x04
    182a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    182c:	8b 81       	ldd	r24, Y+3	; 0x03
    182e:	9c 81       	ldd	r25, Y+4	; 0x04
    1830:	01 97       	sbiw	r24, 0x01	; 1
    1832:	f1 f7       	brne	.-4      	; 0x1830 <LCD_voidSendCommand+0xdc>
    1834:	9c 83       	std	Y+4, r25	; 0x04
    1836:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1838:	8d 81       	ldd	r24, Y+5	; 0x05
    183a:	9e 81       	ldd	r25, Y+6	; 0x06
    183c:	01 97       	sbiw	r24, 0x01	; 1
    183e:	9e 83       	std	Y+6, r25	; 0x06
    1840:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1842:	8d 81       	ldd	r24, Y+5	; 0x05
    1844:	9e 81       	ldd	r25, Y+6	; 0x06
    1846:	00 97       	sbiw	r24, 0x00	; 0
    1848:	69 f7       	brne	.-38     	; 0x1824 <LCD_voidSendCommand+0xd0>
    184a:	14 c0       	rjmp	.+40     	; 0x1874 <LCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    184c:	6f 81       	ldd	r22, Y+7	; 0x07
    184e:	78 85       	ldd	r23, Y+8	; 0x08
    1850:	89 85       	ldd	r24, Y+9	; 0x09
    1852:	9a 85       	ldd	r25, Y+10	; 0x0a
    1854:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1858:	dc 01       	movw	r26, r24
    185a:	cb 01       	movw	r24, r22
    185c:	9e 83       	std	Y+6, r25	; 0x06
    185e:	8d 83       	std	Y+5, r24	; 0x05
    1860:	8d 81       	ldd	r24, Y+5	; 0x05
    1862:	9e 81       	ldd	r25, Y+6	; 0x06
    1864:	9a 83       	std	Y+2, r25	; 0x02
    1866:	89 83       	std	Y+1, r24	; 0x01
    1868:	89 81       	ldd	r24, Y+1	; 0x01
    186a:	9a 81       	ldd	r25, Y+2	; 0x02
    186c:	01 97       	sbiw	r24, 0x01	; 1
    186e:	f1 f7       	brne	.-4      	; 0x186c <LCD_voidSendCommand+0x118>
    1870:	9a 83       	std	Y+2, r25	; 0x02
    1872:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);//han3raf leh 2 millisecond 2odam
	DIO_voidSetPinValue(LCD_Control_Port,LCD_E_PIN,DIO_u8PIN_LOW);
    1874:	84 e0       	ldi	r24, 0x04	; 4
    1876:	67 e0       	ldi	r22, 0x07	; 7
    1878:	40 e0       	ldi	r20, 0x00	; 0
    187a:	0e 94 19 08 	call	0x1032	; 0x1032 <DIO_voidSetPinValue>
}
    187e:	2f 96       	adiw	r28, 0x0f	; 15
    1880:	0f b6       	in	r0, 0x3f	; 63
    1882:	f8 94       	cli
    1884:	de bf       	out	0x3e, r29	; 62
    1886:	0f be       	out	0x3f, r0	; 63
    1888:	cd bf       	out	0x3d, r28	; 61
    188a:	cf 91       	pop	r28
    188c:	df 91       	pop	r29
    188e:	08 95       	ret

00001890 <LCD_voidSendCharacter>:

void LCD_voidSendCharacter(u8 Copy_u8Character)
{
    1890:	df 93       	push	r29
    1892:	cf 93       	push	r28
    1894:	cd b7       	in	r28, 0x3d	; 61
    1896:	de b7       	in	r29, 0x3e	; 62
    1898:	2f 97       	sbiw	r28, 0x0f	; 15
    189a:	0f b6       	in	r0, 0x3f	; 63
    189c:	f8 94       	cli
    189e:	de bf       	out	0x3e, r29	; 62
    18a0:	0f be       	out	0x3f, r0	; 63
    18a2:	cd bf       	out	0x3d, r28	; 61
    18a4:	8f 87       	std	Y+15, r24	; 0x0f
	/*to send data, put RS to high(1)*/

	DIO_voidSetPinValue(LCD_Control_Port,LCD_RS_PIN,DIO_u8PIN_HIGH);// 7ATET AL RS be zero
    18a6:	84 e0       	ldi	r24, 0x04	; 4
    18a8:	65 e0       	ldi	r22, 0x05	; 5
    18aa:	41 e0       	ldi	r20, 0x01	; 1
    18ac:	0e 94 19 08 	call	0x1032	; 0x1032 <DIO_voidSetPinValue>
	/*to get to write mode, u have to et RW to low(0)*/
	DIO_voidSetPinValue(LCD_Control_Port,LCD_RW_PIN,DIO_u8PIN_LOW);
    18b0:	84 e0       	ldi	r24, 0x04	; 4
    18b2:	66 e0       	ldi	r22, 0x06	; 6
    18b4:	40 e0       	ldi	r20, 0x00	; 0
    18b6:	0e 94 19 08 	call	0x1032	; 0x1032 <DIO_voidSetPinValue>
	/*7ot b2a al data al user hayb3to fel data port(D0---D7)*/
	DIO_voidSetPortValue(LCD_Data_Port,Copy_u8Character);
    18ba:	83 e0       	ldi	r24, 0x03	; 3
    18bc:	6f 85       	ldd	r22, Y+15	; 0x0f
    18be:	0e 94 1f 09 	call	0x123e	; 0x123e <DIO_voidSetPortValue>
	/*4a8al al enable*/
	DIO_voidSetPinValue(LCD_Control_Port,LCD_E_PIN,DIO_u8PIN_HIGH);
    18c2:	84 e0       	ldi	r24, 0x04	; 4
    18c4:	67 e0       	ldi	r22, 0x07	; 7
    18c6:	41 e0       	ldi	r20, 0x01	; 1
    18c8:	0e 94 19 08 	call	0x1032	; 0x1032 <DIO_voidSetPinValue>
    18cc:	80 e0       	ldi	r24, 0x00	; 0
    18ce:	90 e0       	ldi	r25, 0x00	; 0
    18d0:	a0 e0       	ldi	r26, 0x00	; 0
    18d2:	b0 e4       	ldi	r27, 0x40	; 64
    18d4:	8b 87       	std	Y+11, r24	; 0x0b
    18d6:	9c 87       	std	Y+12, r25	; 0x0c
    18d8:	ad 87       	std	Y+13, r26	; 0x0d
    18da:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    18de:	7c 85       	ldd	r23, Y+12	; 0x0c
    18e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    18e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    18e4:	20 e0       	ldi	r18, 0x00	; 0
    18e6:	30 e0       	ldi	r19, 0x00	; 0
    18e8:	4a ef       	ldi	r20, 0xFA	; 250
    18ea:	54 e4       	ldi	r21, 0x44	; 68
    18ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18f0:	dc 01       	movw	r26, r24
    18f2:	cb 01       	movw	r24, r22
    18f4:	8f 83       	std	Y+7, r24	; 0x07
    18f6:	98 87       	std	Y+8, r25	; 0x08
    18f8:	a9 87       	std	Y+9, r26	; 0x09
    18fa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    18fc:	6f 81       	ldd	r22, Y+7	; 0x07
    18fe:	78 85       	ldd	r23, Y+8	; 0x08
    1900:	89 85       	ldd	r24, Y+9	; 0x09
    1902:	9a 85       	ldd	r25, Y+10	; 0x0a
    1904:	20 e0       	ldi	r18, 0x00	; 0
    1906:	30 e0       	ldi	r19, 0x00	; 0
    1908:	40 e8       	ldi	r20, 0x80	; 128
    190a:	5f e3       	ldi	r21, 0x3F	; 63
    190c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1910:	88 23       	and	r24, r24
    1912:	2c f4       	brge	.+10     	; 0x191e <LCD_voidSendCharacter+0x8e>
		__ticks = 1;
    1914:	81 e0       	ldi	r24, 0x01	; 1
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	9e 83       	std	Y+6, r25	; 0x06
    191a:	8d 83       	std	Y+5, r24	; 0x05
    191c:	3f c0       	rjmp	.+126    	; 0x199c <LCD_voidSendCharacter+0x10c>
	else if (__tmp > 65535)
    191e:	6f 81       	ldd	r22, Y+7	; 0x07
    1920:	78 85       	ldd	r23, Y+8	; 0x08
    1922:	89 85       	ldd	r24, Y+9	; 0x09
    1924:	9a 85       	ldd	r25, Y+10	; 0x0a
    1926:	20 e0       	ldi	r18, 0x00	; 0
    1928:	3f ef       	ldi	r19, 0xFF	; 255
    192a:	4f e7       	ldi	r20, 0x7F	; 127
    192c:	57 e4       	ldi	r21, 0x47	; 71
    192e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1932:	18 16       	cp	r1, r24
    1934:	4c f5       	brge	.+82     	; 0x1988 <LCD_voidSendCharacter+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1936:	6b 85       	ldd	r22, Y+11	; 0x0b
    1938:	7c 85       	ldd	r23, Y+12	; 0x0c
    193a:	8d 85       	ldd	r24, Y+13	; 0x0d
    193c:	9e 85       	ldd	r25, Y+14	; 0x0e
    193e:	20 e0       	ldi	r18, 0x00	; 0
    1940:	30 e0       	ldi	r19, 0x00	; 0
    1942:	40 e2       	ldi	r20, 0x20	; 32
    1944:	51 e4       	ldi	r21, 0x41	; 65
    1946:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    194a:	dc 01       	movw	r26, r24
    194c:	cb 01       	movw	r24, r22
    194e:	bc 01       	movw	r22, r24
    1950:	cd 01       	movw	r24, r26
    1952:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1956:	dc 01       	movw	r26, r24
    1958:	cb 01       	movw	r24, r22
    195a:	9e 83       	std	Y+6, r25	; 0x06
    195c:	8d 83       	std	Y+5, r24	; 0x05
    195e:	0f c0       	rjmp	.+30     	; 0x197e <LCD_voidSendCharacter+0xee>
    1960:	88 ec       	ldi	r24, 0xC8	; 200
    1962:	90 e0       	ldi	r25, 0x00	; 0
    1964:	9c 83       	std	Y+4, r25	; 0x04
    1966:	8b 83       	std	Y+3, r24	; 0x03
    1968:	8b 81       	ldd	r24, Y+3	; 0x03
    196a:	9c 81       	ldd	r25, Y+4	; 0x04
    196c:	01 97       	sbiw	r24, 0x01	; 1
    196e:	f1 f7       	brne	.-4      	; 0x196c <LCD_voidSendCharacter+0xdc>
    1970:	9c 83       	std	Y+4, r25	; 0x04
    1972:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1974:	8d 81       	ldd	r24, Y+5	; 0x05
    1976:	9e 81       	ldd	r25, Y+6	; 0x06
    1978:	01 97       	sbiw	r24, 0x01	; 1
    197a:	9e 83       	std	Y+6, r25	; 0x06
    197c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    197e:	8d 81       	ldd	r24, Y+5	; 0x05
    1980:	9e 81       	ldd	r25, Y+6	; 0x06
    1982:	00 97       	sbiw	r24, 0x00	; 0
    1984:	69 f7       	brne	.-38     	; 0x1960 <LCD_voidSendCharacter+0xd0>
    1986:	14 c0       	rjmp	.+40     	; 0x19b0 <LCD_voidSendCharacter+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1988:	6f 81       	ldd	r22, Y+7	; 0x07
    198a:	78 85       	ldd	r23, Y+8	; 0x08
    198c:	89 85       	ldd	r24, Y+9	; 0x09
    198e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1990:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1994:	dc 01       	movw	r26, r24
    1996:	cb 01       	movw	r24, r22
    1998:	9e 83       	std	Y+6, r25	; 0x06
    199a:	8d 83       	std	Y+5, r24	; 0x05
    199c:	8d 81       	ldd	r24, Y+5	; 0x05
    199e:	9e 81       	ldd	r25, Y+6	; 0x06
    19a0:	9a 83       	std	Y+2, r25	; 0x02
    19a2:	89 83       	std	Y+1, r24	; 0x01
    19a4:	89 81       	ldd	r24, Y+1	; 0x01
    19a6:	9a 81       	ldd	r25, Y+2	; 0x02
    19a8:	01 97       	sbiw	r24, 0x01	; 1
    19aa:	f1 f7       	brne	.-4      	; 0x19a8 <LCD_voidSendCharacter+0x118>
    19ac:	9a 83       	std	Y+2, r25	; 0x02
    19ae:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);//han3raf leh 2 millisecond 2odam
	DIO_voidSetPinValue(LCD_Control_Port,LCD_E_PIN,DIO_u8PIN_LOW);
    19b0:	84 e0       	ldi	r24, 0x04	; 4
    19b2:	67 e0       	ldi	r22, 0x07	; 7
    19b4:	40 e0       	ldi	r20, 0x00	; 0
    19b6:	0e 94 19 08 	call	0x1032	; 0x1032 <DIO_voidSetPinValue>



}
    19ba:	2f 96       	adiw	r28, 0x0f	; 15
    19bc:	0f b6       	in	r0, 0x3f	; 63
    19be:	f8 94       	cli
    19c0:	de bf       	out	0x3e, r29	; 62
    19c2:	0f be       	out	0x3f, r0	; 63
    19c4:	cd bf       	out	0x3d, r28	; 61
    19c6:	cf 91       	pop	r28
    19c8:	df 91       	pop	r29
    19ca:	08 95       	ret

000019cc <LCD_voidInit>:
void LCD_voidInit(void)//hena ha7ot al direction bta3 pins al data wel control
{
    19cc:	df 93       	push	r29
    19ce:	cf 93       	push	r28
    19d0:	cd b7       	in	r28, 0x3d	; 61
    19d2:	de b7       	in	r29, 0x3e	; 62
    19d4:	2e 97       	sbiw	r28, 0x0e	; 14
    19d6:	0f b6       	in	r0, 0x3f	; 63
    19d8:	f8 94       	cli
    19da:	de bf       	out	0x3e, r29	; 62
    19dc:	0f be       	out	0x3f, r0	; 63
    19de:	cd bf       	out	0x3d, r28	; 61
	/*ha5aly al data pins output, hya keda 3la tol ayan kan hatla3 commands wla data*/
	DIO_voidSetPortDirection(LCD_Data_Port,DIO_u8PORT_OUTPUT);
    19e0:	83 e0       	ldi	r24, 0x03	; 3
    19e2:	6f ef       	ldi	r22, 0xFF	; 255
    19e4:	0e 94 d7 07 	call	0xfae	; 0xfae <DIO_voidSetPortDirection>
	/*ha5aly bardo al control pins kol wa7da output,bla4 a5aly al control port kolo output 34an dol 3 pins momkn ast3mel nafs al port al 5 pins al ba2yeen fe 7aga tanya*/
	DIO_voidSetPinDirection(LCD_Control_Port,LCD_RS_PIN,DIO_u8PIN_OUTPUT);
    19e8:	84 e0       	ldi	r24, 0x04	; 4
    19ea:	65 e0       	ldi	r22, 0x05	; 5
    19ec:	41 e0       	ldi	r20, 0x01	; 1
    19ee:	0e 94 d1 06 	call	0xda2	; 0xda2 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_Control_Port,LCD_RW_PIN,DIO_u8PIN_OUTPUT);
    19f2:	84 e0       	ldi	r24, 0x04	; 4
    19f4:	66 e0       	ldi	r22, 0x06	; 6
    19f6:	41 e0       	ldi	r20, 0x01	; 1
    19f8:	0e 94 d1 06 	call	0xda2	; 0xda2 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_Control_Port,LCD_E_PIN,DIO_u8PIN_OUTPUT);
    19fc:	84 e0       	ldi	r24, 0x04	; 4
    19fe:	67 e0       	ldi	r22, 0x07	; 7
    1a00:	41 e0       	ldi	r20, 0x01	; 1
    1a02:	0e 94 d1 06 	call	0xda2	; 0xda2 <DIO_voidSetPinDirection>
    1a06:	80 e0       	ldi	r24, 0x00	; 0
    1a08:	90 e0       	ldi	r25, 0x00	; 0
    1a0a:	a0 e2       	ldi	r26, 0x20	; 32
    1a0c:	b2 e4       	ldi	r27, 0x42	; 66
    1a0e:	8b 87       	std	Y+11, r24	; 0x0b
    1a10:	9c 87       	std	Y+12, r25	; 0x0c
    1a12:	ad 87       	std	Y+13, r26	; 0x0d
    1a14:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a16:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a18:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a1a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a1c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a1e:	20 e0       	ldi	r18, 0x00	; 0
    1a20:	30 e0       	ldi	r19, 0x00	; 0
    1a22:	4a ef       	ldi	r20, 0xFA	; 250
    1a24:	54 e4       	ldi	r21, 0x44	; 68
    1a26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a2a:	dc 01       	movw	r26, r24
    1a2c:	cb 01       	movw	r24, r22
    1a2e:	8f 83       	std	Y+7, r24	; 0x07
    1a30:	98 87       	std	Y+8, r25	; 0x08
    1a32:	a9 87       	std	Y+9, r26	; 0x09
    1a34:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a36:	6f 81       	ldd	r22, Y+7	; 0x07
    1a38:	78 85       	ldd	r23, Y+8	; 0x08
    1a3a:	89 85       	ldd	r24, Y+9	; 0x09
    1a3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a3e:	20 e0       	ldi	r18, 0x00	; 0
    1a40:	30 e0       	ldi	r19, 0x00	; 0
    1a42:	40 e8       	ldi	r20, 0x80	; 128
    1a44:	5f e3       	ldi	r21, 0x3F	; 63
    1a46:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a4a:	88 23       	and	r24, r24
    1a4c:	2c f4       	brge	.+10     	; 0x1a58 <LCD_voidInit+0x8c>
		__ticks = 1;
    1a4e:	81 e0       	ldi	r24, 0x01	; 1
    1a50:	90 e0       	ldi	r25, 0x00	; 0
    1a52:	9e 83       	std	Y+6, r25	; 0x06
    1a54:	8d 83       	std	Y+5, r24	; 0x05
    1a56:	3f c0       	rjmp	.+126    	; 0x1ad6 <LCD_voidInit+0x10a>
	else if (__tmp > 65535)
    1a58:	6f 81       	ldd	r22, Y+7	; 0x07
    1a5a:	78 85       	ldd	r23, Y+8	; 0x08
    1a5c:	89 85       	ldd	r24, Y+9	; 0x09
    1a5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a60:	20 e0       	ldi	r18, 0x00	; 0
    1a62:	3f ef       	ldi	r19, 0xFF	; 255
    1a64:	4f e7       	ldi	r20, 0x7F	; 127
    1a66:	57 e4       	ldi	r21, 0x47	; 71
    1a68:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a6c:	18 16       	cp	r1, r24
    1a6e:	4c f5       	brge	.+82     	; 0x1ac2 <LCD_voidInit+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a70:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a72:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a74:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a76:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a78:	20 e0       	ldi	r18, 0x00	; 0
    1a7a:	30 e0       	ldi	r19, 0x00	; 0
    1a7c:	40 e2       	ldi	r20, 0x20	; 32
    1a7e:	51 e4       	ldi	r21, 0x41	; 65
    1a80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a84:	dc 01       	movw	r26, r24
    1a86:	cb 01       	movw	r24, r22
    1a88:	bc 01       	movw	r22, r24
    1a8a:	cd 01       	movw	r24, r26
    1a8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a90:	dc 01       	movw	r26, r24
    1a92:	cb 01       	movw	r24, r22
    1a94:	9e 83       	std	Y+6, r25	; 0x06
    1a96:	8d 83       	std	Y+5, r24	; 0x05
    1a98:	0f c0       	rjmp	.+30     	; 0x1ab8 <LCD_voidInit+0xec>
    1a9a:	88 ec       	ldi	r24, 0xC8	; 200
    1a9c:	90 e0       	ldi	r25, 0x00	; 0
    1a9e:	9c 83       	std	Y+4, r25	; 0x04
    1aa0:	8b 83       	std	Y+3, r24	; 0x03
    1aa2:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa4:	9c 81       	ldd	r25, Y+4	; 0x04
    1aa6:	01 97       	sbiw	r24, 0x01	; 1
    1aa8:	f1 f7       	brne	.-4      	; 0x1aa6 <LCD_voidInit+0xda>
    1aaa:	9c 83       	std	Y+4, r25	; 0x04
    1aac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1aae:	8d 81       	ldd	r24, Y+5	; 0x05
    1ab0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ab2:	01 97       	sbiw	r24, 0x01	; 1
    1ab4:	9e 83       	std	Y+6, r25	; 0x06
    1ab6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ab8:	8d 81       	ldd	r24, Y+5	; 0x05
    1aba:	9e 81       	ldd	r25, Y+6	; 0x06
    1abc:	00 97       	sbiw	r24, 0x00	; 0
    1abe:	69 f7       	brne	.-38     	; 0x1a9a <LCD_voidInit+0xce>
    1ac0:	14 c0       	rjmp	.+40     	; 0x1aea <LCD_voidInit+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ac2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ac4:	78 85       	ldd	r23, Y+8	; 0x08
    1ac6:	89 85       	ldd	r24, Y+9	; 0x09
    1ac8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ace:	dc 01       	movw	r26, r24
    1ad0:	cb 01       	movw	r24, r22
    1ad2:	9e 83       	std	Y+6, r25	; 0x06
    1ad4:	8d 83       	std	Y+5, r24	; 0x05
    1ad6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ad8:	9e 81       	ldd	r25, Y+6	; 0x06
    1ada:	9a 83       	std	Y+2, r25	; 0x02
    1adc:	89 83       	std	Y+1, r24	; 0x01
    1ade:	89 81       	ldd	r24, Y+1	; 0x01
    1ae0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ae2:	01 97       	sbiw	r24, 0x01	; 1
    1ae4:	f1 f7       	brne	.-4      	; 0x1ae2 <LCD_voidInit+0x116>
    1ae6:	9a 83       	std	Y+2, r25	; 0x02
    1ae8:	89 83       	std	Y+1, r24	; 0x01
_delay_ms(40);
/*In 8 bit initialization (data sheet) we have to send commands of 0b0011NFxx(Ma4ro7a fel kashkol)
 *N:Number of lines, 0:for 1 line, 1:for two lines
 *F:Font size, 0:for 5*8 ,1:for 5*11
 *x:Dont care (0 or 1 doesnt matter)*/
  LCD_voidSendCommand(0b00111000);
    1aea:	88 e3       	ldi	r24, 0x38	; 56
    1aec:	0e 94 aa 0b 	call	0x1754	; 0x1754 <LCD_voidSendCommand>
  /*Initialize display on-off
   *D:display 0:disable 1: enable
   *C:cursor 0: disable 1: enable
   *B: blinking cursor : 0: fixed 1: blinking  */
  LCD_voidSendCommand(0b00001100);
    1af0:	8c e0       	ldi	r24, 0x0C	; 12
    1af2:	0e 94 aa 0b 	call	0x1754	; 0x1754 <LCD_voidSendCommand>
/*To clear display(tenadaf ale etkatab 2abl keda)*/
  LCD_voidSendCommand(0b00000001);
    1af6:	81 e0       	ldi	r24, 0x01	; 1
    1af8:	0e 94 aa 0b 	call	0x1754	; 0x1754 <LCD_voidSendCommand>

}
    1afc:	2e 96       	adiw	r28, 0x0e	; 14
    1afe:	0f b6       	in	r0, 0x3f	; 63
    1b00:	f8 94       	cli
    1b02:	de bf       	out	0x3e, r29	; 62
    1b04:	0f be       	out	0x3f, r0	; 63
    1b06:	cd bf       	out	0x3d, r28	; 61
    1b08:	cf 91       	pop	r28
    1b0a:	df 91       	pop	r29
    1b0c:	08 95       	ret

00001b0e <LCD_voidPosition>:
void LCD_voidPosition(u8 Copy_u8RowPos,u8 Copy_u8ColPos){
    1b0e:	df 93       	push	r29
    1b10:	cf 93       	push	r28
    1b12:	00 d0       	rcall	.+0      	; 0x1b14 <LCD_voidPosition+0x6>
    1b14:	0f 92       	push	r0
    1b16:	cd b7       	in	r28, 0x3d	; 61
    1b18:	de b7       	in	r29, 0x3e	; 62
    1b1a:	8a 83       	std	Y+2, r24	; 0x02
    1b1c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Address;
	/*Setting the address location if the user wants to set the posion in the first row*/
	if(Copy_u8RowPos==0){
    1b1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b20:	88 23       	and	r24, r24
    1b22:	19 f4       	brne	.+6      	; 0x1b2a <LCD_voidPosition+0x1c>
		Local_u8Address=Copy_u8ColPos;
    1b24:	8b 81       	ldd	r24, Y+3	; 0x03
    1b26:	89 83       	std	Y+1, r24	; 0x01
    1b28:	06 c0       	rjmp	.+12     	; 0x1b36 <LCD_voidPosition+0x28>

	}
	/*Setting the address location if the user wants to set the posion in the second row*/
	else if(Copy_u8RowPos==1){
    1b2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b2c:	81 30       	cpi	r24, 0x01	; 1
    1b2e:	19 f4       	brne	.+6      	; 0x1b36 <LCD_voidPosition+0x28>
		Local_u8Address=Copy_u8ColPos+0x40;
    1b30:	8b 81       	ldd	r24, Y+3	; 0x03
    1b32:	80 5c       	subi	r24, 0xC0	; 192
    1b34:	89 83       	std	Y+1, r24	; 0x01
	}
	/*ana keda 3rf al location na2es ab3to lel LCD ,mawgoda fel datasheet ezay ab3t al address lel DDRAM*/
	//ma4o7a fel ka4kol
	LCD_voidSendCommand(Local_u8Address+128);
    1b36:	89 81       	ldd	r24, Y+1	; 0x01
    1b38:	80 58       	subi	r24, 0x80	; 128
    1b3a:	0e 94 aa 0b 	call	0x1754	; 0x1754 <LCD_voidSendCommand>
	}
    1b3e:	0f 90       	pop	r0
    1b40:	0f 90       	pop	r0
    1b42:	0f 90       	pop	r0
    1b44:	cf 91       	pop	r28
    1b46:	df 91       	pop	r29
    1b48:	08 95       	ret

00001b4a <LCD_voidSendString>:



/*String is an array of charachters, and the last charachter is (/0)
 */
void LCD_voidSendString(char*Copy_pcString){
    1b4a:	df 93       	push	r29
    1b4c:	cf 93       	push	r28
    1b4e:	00 d0       	rcall	.+0      	; 0x1b50 <LCD_voidSendString+0x6>
    1b50:	0f 92       	push	r0
    1b52:	cd b7       	in	r28, 0x3d	; 61
    1b54:	de b7       	in	r29, 0x3e	; 62
    1b56:	9b 83       	std	Y+3, r25	; 0x03
    1b58:	8a 83       	std	Y+2, r24	; 0x02
    1b5a:	0e c0       	rjmp	.+28     	; 0x1b78 <LCD_voidSendString+0x2e>

	u8 Local_u8Counter;
	while(Copy_pcString[Local_u8Counter]!='\0')
	{
		LCD_voidSendCharacter(Copy_pcString[Local_u8Counter]);
    1b5c:	89 81       	ldd	r24, Y+1	; 0x01
    1b5e:	28 2f       	mov	r18, r24
    1b60:	30 e0       	ldi	r19, 0x00	; 0
    1b62:	8a 81       	ldd	r24, Y+2	; 0x02
    1b64:	9b 81       	ldd	r25, Y+3	; 0x03
    1b66:	fc 01       	movw	r30, r24
    1b68:	e2 0f       	add	r30, r18
    1b6a:	f3 1f       	adc	r31, r19
    1b6c:	80 81       	ld	r24, Z
    1b6e:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCD_voidSendCharacter>
		Local_u8Counter++;
    1b72:	89 81       	ldd	r24, Y+1	; 0x01
    1b74:	8f 5f       	subi	r24, 0xFF	; 255
    1b76:	89 83       	std	Y+1, r24	; 0x01
/*String is an array of charachters, and the last charachter is (/0)
 */
void LCD_voidSendString(char*Copy_pcString){

	u8 Local_u8Counter;
	while(Copy_pcString[Local_u8Counter]!='\0')
    1b78:	89 81       	ldd	r24, Y+1	; 0x01
    1b7a:	28 2f       	mov	r18, r24
    1b7c:	30 e0       	ldi	r19, 0x00	; 0
    1b7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b80:	9b 81       	ldd	r25, Y+3	; 0x03
    1b82:	fc 01       	movw	r30, r24
    1b84:	e2 0f       	add	r30, r18
    1b86:	f3 1f       	adc	r31, r19
    1b88:	80 81       	ld	r24, Z
    1b8a:	88 23       	and	r24, r24
    1b8c:	39 f7       	brne	.-50     	; 0x1b5c <LCD_voidSendString+0x12>
	{
		LCD_voidSendCharacter(Copy_pcString[Local_u8Counter]);
		Local_u8Counter++;
	}

}
    1b8e:	0f 90       	pop	r0
    1b90:	0f 90       	pop	r0
    1b92:	0f 90       	pop	r0
    1b94:	cf 91       	pop	r28
    1b96:	df 91       	pop	r29
    1b98:	08 95       	ret

00001b9a <LCD_voidDrawSpecialCharachter>:


void LCD_voidDrawSpecialCharachter(u8*Copy_pu8Pattern,u8 Copy_u8LocationNum,u8 Copy_u8RowNum,u8 Copy_u8ColNum)
{
    1b9a:	df 93       	push	r29
    1b9c:	cf 93       	push	r28
    1b9e:	cd b7       	in	r28, 0x3d	; 61
    1ba0:	de b7       	in	r29, 0x3e	; 62
    1ba2:	27 97       	sbiw	r28, 0x07	; 7
    1ba4:	0f b6       	in	r0, 0x3f	; 63
    1ba6:	f8 94       	cli
    1ba8:	de bf       	out	0x3e, r29	; 62
    1baa:	0f be       	out	0x3f, r0	; 63
    1bac:	cd bf       	out	0x3d, r28	; 61
    1bae:	9c 83       	std	Y+4, r25	; 0x04
    1bb0:	8b 83       	std	Y+3, r24	; 0x03
    1bb2:	6d 83       	std	Y+5, r22	; 0x05
    1bb4:	4e 83       	std	Y+6, r20	; 0x06
    1bb6:	2f 83       	std	Y+7, r18	; 0x07
/*Accessing the CGRAM address*/
	u8 Local_u8CGRAMAddress,Local_u8Counter;
	Local_u8CGRAMAddress=Copy_u8LocationNum*8;//ma4ro7a fel ka4kol
    1bb8:	8d 81       	ldd	r24, Y+5	; 0x05
    1bba:	88 2f       	mov	r24, r24
    1bbc:	90 e0       	ldi	r25, 0x00	; 0
    1bbe:	88 0f       	add	r24, r24
    1bc0:	99 1f       	adc	r25, r25
    1bc2:	88 0f       	add	r24, r24
    1bc4:	99 1f       	adc	r25, r25
    1bc6:	88 0f       	add	r24, r24
    1bc8:	99 1f       	adc	r25, r25
    1bca:	8a 83       	std	Y+2, r24	; 0x02
	/*Accesing CGRAM of lcd by command 0b01xxxxxx*/
LCD_voidSendCommand(Local_u8CGRAMAddress+64);
    1bcc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bce:	80 5c       	subi	r24, 0xC0	; 192
    1bd0:	0e 94 aa 0b 	call	0x1754	; 0x1754 <LCD_voidSendCommand>
/*Write the pattern on CGRAM*/
/*zy makont ba3mel fel string ha3mel hena , bas al fekra ane hawa2f al loop 3nd (((8))) ale howa max bytes in a location in the CGRAM fal user masaln e5tar location 0 fa2a5ro feh 8 charachters ale homa 8 bytes*/
for(Local_u8Counter=0;Local_u8Counter<8;Local_u8Counter++)
    1bd4:	19 82       	std	Y+1, r1	; 0x01
    1bd6:	0e c0       	rjmp	.+28     	; 0x1bf4 <LCD_voidDrawSpecialCharachter+0x5a>
{
LCD_voidSendCharacter(Copy_pu8Pattern[Local_u8Counter]);
    1bd8:	89 81       	ldd	r24, Y+1	; 0x01
    1bda:	28 2f       	mov	r18, r24
    1bdc:	30 e0       	ldi	r19, 0x00	; 0
    1bde:	8b 81       	ldd	r24, Y+3	; 0x03
    1be0:	9c 81       	ldd	r25, Y+4	; 0x04
    1be2:	fc 01       	movw	r30, r24
    1be4:	e2 0f       	add	r30, r18
    1be6:	f3 1f       	adc	r31, r19
    1be8:	80 81       	ld	r24, Z
    1bea:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCD_voidSendCharacter>
	Local_u8CGRAMAddress=Copy_u8LocationNum*8;//ma4ro7a fel ka4kol
	/*Accesing CGRAM of lcd by command 0b01xxxxxx*/
LCD_voidSendCommand(Local_u8CGRAMAddress+64);
/*Write the pattern on CGRAM*/
/*zy makont ba3mel fel string ha3mel hena , bas al fekra ane hawa2f al loop 3nd (((8))) ale howa max bytes in a location in the CGRAM fal user masaln e5tar location 0 fa2a5ro feh 8 charachters ale homa 8 bytes*/
for(Local_u8Counter=0;Local_u8Counter<8;Local_u8Counter++)
    1bee:	89 81       	ldd	r24, Y+1	; 0x01
    1bf0:	8f 5f       	subi	r24, 0xFF	; 255
    1bf2:	89 83       	std	Y+1, r24	; 0x01
    1bf4:	89 81       	ldd	r24, Y+1	; 0x01
    1bf6:	88 30       	cpi	r24, 0x08	; 8
    1bf8:	78 f3       	brcs	.-34     	; 0x1bd8 <LCD_voidDrawSpecialCharachter+0x3e>
{
LCD_voidSendCharacter(Copy_pu8Pattern[Local_u8Counter]);
}
/*Keda e7na 7atena al pattern fe location mo3yn fel CGRAM, fa na2esna bas neb3at al pattern lel DDRAM 34an n7oto fel LCD */
/*kona fo2 3malna command 34an ne access al CGRAM 34an ne access al DDRAM lazem command tany,,wel set position feha asln al command dah*/
LCD_voidPosition(Copy_u8RowNum,Copy_u8ColNum);
    1bfa:	8e 81       	ldd	r24, Y+6	; 0x06
    1bfc:	6f 81       	ldd	r22, Y+7	; 0x07
    1bfe:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <LCD_voidPosition>
LCD_voidSendCharacter(Copy_u8LocationNum);
    1c02:	8d 81       	ldd	r24, Y+5	; 0x05
    1c04:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCD_voidSendCharacter>
}
    1c08:	27 96       	adiw	r28, 0x07	; 7
    1c0a:	0f b6       	in	r0, 0x3f	; 63
    1c0c:	f8 94       	cli
    1c0e:	de bf       	out	0x3e, r29	; 62
    1c10:	0f be       	out	0x3f, r0	; 63
    1c12:	cd bf       	out	0x3d, r28	; 61
    1c14:	cf 91       	pop	r28
    1c16:	df 91       	pop	r29
    1c18:	08 95       	ret

00001c1a <LCD_voidClear>:

void LCD_voidClear(void)
{
    1c1a:	df 93       	push	r29
    1c1c:	cf 93       	push	r28
    1c1e:	cd b7       	in	r28, 0x3d	; 61
    1c20:	de b7       	in	r29, 0x3e	; 62

	LCD_voidSendCommand(0b00000001);
    1c22:	81 e0       	ldi	r24, 0x01	; 1
    1c24:	0e 94 aa 0b 	call	0x1754	; 0x1754 <LCD_voidSendCommand>
}
    1c28:	cf 91       	pop	r28
    1c2a:	df 91       	pop	r29
    1c2c:	08 95       	ret

00001c2e <LCD_voidWriteNum>:


void LCD_voidWriteNum(u32 copy_u32Number)
{
    1c2e:	df 93       	push	r29
    1c30:	cf 93       	push	r28
    1c32:	cd b7       	in	r28, 0x3d	; 61
    1c34:	de b7       	in	r29, 0x3e	; 62
    1c36:	29 97       	sbiw	r28, 0x09	; 9
    1c38:	0f b6       	in	r0, 0x3f	; 63
    1c3a:	f8 94       	cli
    1c3c:	de bf       	out	0x3e, r29	; 62
    1c3e:	0f be       	out	0x3f, r0	; 63
    1c40:	cd bf       	out	0x3d, r28	; 61
    1c42:	6e 83       	std	Y+6, r22	; 0x06
    1c44:	7f 83       	std	Y+7, r23	; 0x07
    1c46:	88 87       	std	Y+8, r24	; 0x08
    1c48:	99 87       	std	Y+9, r25	; 0x09
	u8 FirstDigit=0;
    1c4a:	1d 82       	std	Y+5, r1	; 0x05
	for(u32 i=1000000000;i>0;i/=10)
    1c4c:	80 e0       	ldi	r24, 0x00	; 0
    1c4e:	9a ec       	ldi	r25, 0xCA	; 202
    1c50:	aa e9       	ldi	r26, 0x9A	; 154
    1c52:	bb e3       	ldi	r27, 0x3B	; 59
    1c54:	89 83       	std	Y+1, r24	; 0x01
    1c56:	9a 83       	std	Y+2, r25	; 0x02
    1c58:	ab 83       	std	Y+3, r26	; 0x03
    1c5a:	bc 83       	std	Y+4, r27	; 0x04
    1c5c:	50 c0       	rjmp	.+160    	; 0x1cfe <LCD_voidWriteNum+0xd0>
	{

		if(copy_u32Number/i>0)
    1c5e:	8e 81       	ldd	r24, Y+6	; 0x06
    1c60:	9f 81       	ldd	r25, Y+7	; 0x07
    1c62:	a8 85       	ldd	r26, Y+8	; 0x08
    1c64:	b9 85       	ldd	r27, Y+9	; 0x09
    1c66:	29 81       	ldd	r18, Y+1	; 0x01
    1c68:	3a 81       	ldd	r19, Y+2	; 0x02
    1c6a:	4b 81       	ldd	r20, Y+3	; 0x03
    1c6c:	5c 81       	ldd	r21, Y+4	; 0x04
    1c6e:	bc 01       	movw	r22, r24
    1c70:	cd 01       	movw	r24, r26
    1c72:	0e 94 72 13 	call	0x26e4	; 0x26e4 <__udivmodsi4>
    1c76:	da 01       	movw	r26, r20
    1c78:	c9 01       	movw	r24, r18
    1c7a:	00 97       	sbiw	r24, 0x00	; 0
    1c7c:	a1 05       	cpc	r26, r1
    1c7e:	b1 05       	cpc	r27, r1
    1c80:	31 f1       	breq	.+76     	; 0x1cce <LCD_voidWriteNum+0xa0>
		{
			LCD_voidSendCharacter(copy_u32Number/i+48);
    1c82:	8e 81       	ldd	r24, Y+6	; 0x06
    1c84:	9f 81       	ldd	r25, Y+7	; 0x07
    1c86:	a8 85       	ldd	r26, Y+8	; 0x08
    1c88:	b9 85       	ldd	r27, Y+9	; 0x09
    1c8a:	29 81       	ldd	r18, Y+1	; 0x01
    1c8c:	3a 81       	ldd	r19, Y+2	; 0x02
    1c8e:	4b 81       	ldd	r20, Y+3	; 0x03
    1c90:	5c 81       	ldd	r21, Y+4	; 0x04
    1c92:	bc 01       	movw	r22, r24
    1c94:	cd 01       	movw	r24, r26
    1c96:	0e 94 72 13 	call	0x26e4	; 0x26e4 <__udivmodsi4>
    1c9a:	da 01       	movw	r26, r20
    1c9c:	c9 01       	movw	r24, r18
    1c9e:	80 5d       	subi	r24, 0xD0	; 208
    1ca0:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCD_voidSendCharacter>
			copy_u32Number%=i;
    1ca4:	8e 81       	ldd	r24, Y+6	; 0x06
    1ca6:	9f 81       	ldd	r25, Y+7	; 0x07
    1ca8:	a8 85       	ldd	r26, Y+8	; 0x08
    1caa:	b9 85       	ldd	r27, Y+9	; 0x09
    1cac:	29 81       	ldd	r18, Y+1	; 0x01
    1cae:	3a 81       	ldd	r19, Y+2	; 0x02
    1cb0:	4b 81       	ldd	r20, Y+3	; 0x03
    1cb2:	5c 81       	ldd	r21, Y+4	; 0x04
    1cb4:	bc 01       	movw	r22, r24
    1cb6:	cd 01       	movw	r24, r26
    1cb8:	0e 94 72 13 	call	0x26e4	; 0x26e4 <__udivmodsi4>
    1cbc:	dc 01       	movw	r26, r24
    1cbe:	cb 01       	movw	r24, r22
    1cc0:	8e 83       	std	Y+6, r24	; 0x06
    1cc2:	9f 83       	std	Y+7, r25	; 0x07
    1cc4:	a8 87       	std	Y+8, r26	; 0x08
    1cc6:	b9 87       	std	Y+9, r27	; 0x09
			FirstDigit=1;
    1cc8:	81 e0       	ldi	r24, 0x01	; 1
    1cca:	8d 83       	std	Y+5, r24	; 0x05
    1ccc:	06 c0       	rjmp	.+12     	; 0x1cda <LCD_voidWriteNum+0xac>
		}
		// print 0 after the first digit
		else if(FirstDigit==1)
    1cce:	8d 81       	ldd	r24, Y+5	; 0x05
    1cd0:	81 30       	cpi	r24, 0x01	; 1
    1cd2:	19 f4       	brne	.+6      	; 0x1cda <LCD_voidWriteNum+0xac>
		{
			LCD_voidSendCharacter(48);
    1cd4:	80 e3       	ldi	r24, 0x30	; 48
    1cd6:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCD_voidSendCharacter>


void LCD_voidWriteNum(u32 copy_u32Number)
{
	u8 FirstDigit=0;
	for(u32 i=1000000000;i>0;i/=10)
    1cda:	89 81       	ldd	r24, Y+1	; 0x01
    1cdc:	9a 81       	ldd	r25, Y+2	; 0x02
    1cde:	ab 81       	ldd	r26, Y+3	; 0x03
    1ce0:	bc 81       	ldd	r27, Y+4	; 0x04
    1ce2:	2a e0       	ldi	r18, 0x0A	; 10
    1ce4:	30 e0       	ldi	r19, 0x00	; 0
    1ce6:	40 e0       	ldi	r20, 0x00	; 0
    1ce8:	50 e0       	ldi	r21, 0x00	; 0
    1cea:	bc 01       	movw	r22, r24
    1cec:	cd 01       	movw	r24, r26
    1cee:	0e 94 72 13 	call	0x26e4	; 0x26e4 <__udivmodsi4>
    1cf2:	da 01       	movw	r26, r20
    1cf4:	c9 01       	movw	r24, r18
    1cf6:	89 83       	std	Y+1, r24	; 0x01
    1cf8:	9a 83       	std	Y+2, r25	; 0x02
    1cfa:	ab 83       	std	Y+3, r26	; 0x03
    1cfc:	bc 83       	std	Y+4, r27	; 0x04
    1cfe:	89 81       	ldd	r24, Y+1	; 0x01
    1d00:	9a 81       	ldd	r25, Y+2	; 0x02
    1d02:	ab 81       	ldd	r26, Y+3	; 0x03
    1d04:	bc 81       	ldd	r27, Y+4	; 0x04
    1d06:	00 97       	sbiw	r24, 0x00	; 0
    1d08:	a1 05       	cpc	r26, r1
    1d0a:	b1 05       	cpc	r27, r1
    1d0c:	09 f0       	breq	.+2      	; 0x1d10 <LCD_voidWriteNum+0xe2>
    1d0e:	a7 cf       	rjmp	.-178    	; 0x1c5e <LCD_voidWriteNum+0x30>
		else if(FirstDigit==1)
		{
			LCD_voidSendCharacter(48);
		}
	}
}
    1d10:	29 96       	adiw	r28, 0x09	; 9
    1d12:	0f b6       	in	r0, 0x3f	; 63
    1d14:	f8 94       	cli
    1d16:	de bf       	out	0x3e, r29	; 62
    1d18:	0f be       	out	0x3f, r0	; 63
    1d1a:	cd bf       	out	0x3d, r28	; 61
    1d1c:	cf 91       	pop	r28
    1d1e:	df 91       	pop	r29
    1d20:	08 95       	ret

00001d22 <UART_voidInit>:
#include "UART_Private.h"
#include "UART_Config.h"


void UART_voidInit(void)
{
    1d22:	df 93       	push	r29
    1d24:	cf 93       	push	r28
    1d26:	cd b7       	in	r28, 0x3d	; 61
    1d28:	de b7       	in	r29, 0x3e	; 62
	/*Enable the Reciever*/
	SET_BIT(UCSRB,UCSRB_RXEN);
    1d2a:	aa e2       	ldi	r26, 0x2A	; 42
    1d2c:	b0 e0       	ldi	r27, 0x00	; 0
    1d2e:	ea e2       	ldi	r30, 0x2A	; 42
    1d30:	f0 e0       	ldi	r31, 0x00	; 0
    1d32:	80 81       	ld	r24, Z
    1d34:	80 61       	ori	r24, 0x10	; 16
    1d36:	8c 93       	st	X, r24

	/*Enable the transmitter*/
	SET_BIT(UCSRB,UCSRB_TXEN);
    1d38:	aa e2       	ldi	r26, 0x2A	; 42
    1d3a:	b0 e0       	ldi	r27, 0x00	; 0
    1d3c:	ea e2       	ldi	r30, 0x2A	; 42
    1d3e:	f0 e0       	ldi	r31, 0x00	; 0
    1d40:	80 81       	ld	r24, Z
    1d42:	88 60       	ori	r24, 0x08	; 8
    1d44:	8c 93       	st	X, r24

	/*Working on normal speed */
	CLR_BIT(UCSRA,UCSRA_U2X);
    1d46:	ab e2       	ldi	r26, 0x2B	; 43
    1d48:	b0 e0       	ldi	r27, 0x00	; 0
    1d4a:	eb e2       	ldi	r30, 0x2B	; 43
    1d4c:	f0 e0       	ldi	r31, 0x00	; 0
    1d4e:	80 81       	ld	r24, Z
    1d50:	8d 7f       	andi	r24, 0xFD	; 253
    1d52:	8c 93       	st	X, r24

	/*No multiprocessor communication mode*/
	CLR_BIT(UCSRA,UCSRA_MPCM);
    1d54:	ab e2       	ldi	r26, 0x2B	; 43
    1d56:	b0 e0       	ldi	r27, 0x00	; 0
    1d58:	eb e2       	ldi	r30, 0x2B	; 43
    1d5a:	f0 e0       	ldi	r31, 0x00	; 0
    1d5c:	80 81       	ld	r24, Z
    1d5e:	8e 7f       	andi	r24, 0xFE	; 254
    1d60:	8c 93       	st	X, r24

	/*Setting the baud rate to 9600 (UBRR=51)*/
	UBRRH_UCSRC=0b00000000;
    1d62:	e0 e4       	ldi	r30, 0x40	; 64
    1d64:	f0 e0       	ldi	r31, 0x00	; 0
    1d66:	10 82       	st	Z, r1
	UBRRL=0b00110011;
    1d68:	e9 e2       	ldi	r30, 0x29	; 41
    1d6a:	f0 e0       	ldi	r31, 0x00	; 0
    1d6c:	83 e3       	ldi	r24, 0x33	; 51
    1d6e:	80 83       	st	Z, r24

	/*Enabling the interrupt on the reciving action*/
	SET_BIT(UCSRB,UCSRB_RXCIE);
    1d70:	aa e2       	ldi	r26, 0x2A	; 42
    1d72:	b0 e0       	ldi	r27, 0x00	; 0
    1d74:	ea e2       	ldi	r30, 0x2A	; 42
    1d76:	f0 e0       	ldi	r31, 0x00	; 0
    1d78:	80 81       	ld	r24, Z
    1d7a:	80 68       	ori	r24, 0x80	; 128
    1d7c:	8c 93       	st	X, r24
	UBRRH_UCSRC=0b10000010;
#elif UART_BIT_MODE == UART_7_BIT_MODE
	CLR_BIT(UCSRB,UCSRB_UCSZ2);
	UBRRH_UCSRC=0b10000100;
#elif UART_BIT_MODE ==UART_8_BIT_MODE
	CLR_BIT(UCSRB,UCSRB_UCSZ2);
    1d7e:	aa e2       	ldi	r26, 0x2A	; 42
    1d80:	b0 e0       	ldi	r27, 0x00	; 0
    1d82:	ea e2       	ldi	r30, 0x2A	; 42
    1d84:	f0 e0       	ldi	r31, 0x00	; 0
    1d86:	80 81       	ld	r24, Z
    1d88:	8b 7f       	andi	r24, 0xFB	; 251
    1d8a:	8c 93       	st	X, r24
	UBRRH_UCSRC=0b10000110;
    1d8c:	e0 e4       	ldi	r30, 0x40	; 64
    1d8e:	f0 e0       	ldi	r31, 0x00	; 0
    1d90:	86 e8       	ldi	r24, 0x86	; 134
    1d92:	80 83       	st	Z, r24
#elif UART_BIT_MODE ==UART_9_BIT_MODE
	SET_BIT(UCSRB,UCSRB_UCSZ2);
	UBRRH_UCSRC=0b10000110;
#endif
}
    1d94:	cf 91       	pop	r28
    1d96:	df 91       	pop	r29
    1d98:	08 95       	ret

00001d9a <UART_u8Transmit>:


void UART_u8Transmit(u8 Copy_u8TransmitData)
{
    1d9a:	df 93       	push	r29
    1d9c:	cf 93       	push	r28
    1d9e:	0f 92       	push	r0
    1da0:	cd b7       	in	r28, 0x3d	; 61
    1da2:	de b7       	in	r29, 0x3e	; 62
    1da4:	89 83       	std	Y+1, r24	; 0x01
	/*Polling until the UDR is empty b waiting till the UDRE bit is to be set*/
	while(GET_BIT(UCSRA,UCSRA_UDRE) == 0);
    1da6:	eb e2       	ldi	r30, 0x2B	; 43
    1da8:	f0 e0       	ldi	r31, 0x00	; 0
    1daa:	80 81       	ld	r24, Z
    1dac:	82 95       	swap	r24
    1dae:	86 95       	lsr	r24
    1db0:	87 70       	andi	r24, 0x07	; 7
    1db2:	88 2f       	mov	r24, r24
    1db4:	90 e0       	ldi	r25, 0x00	; 0
    1db6:	81 70       	andi	r24, 0x01	; 1
    1db8:	90 70       	andi	r25, 0x00	; 0
    1dba:	00 97       	sbiw	r24, 0x00	; 0
    1dbc:	a1 f3       	breq	.-24     	; 0x1da6 <UART_u8Transmit+0xc>
	/*Putting the User data into the UDR register to be sent to TXD pin*/
	UDR=Copy_u8TransmitData;
    1dbe:	ec e2       	ldi	r30, 0x2C	; 44
    1dc0:	f0 e0       	ldi	r31, 0x00	; 0
    1dc2:	89 81       	ldd	r24, Y+1	; 0x01
    1dc4:	80 83       	st	Z, r24

}
    1dc6:	0f 90       	pop	r0
    1dc8:	cf 91       	pop	r28
    1dca:	df 91       	pop	r29
    1dcc:	08 95       	ret

00001dce <UART_u8Recieve>:
u8 UART_u8Recieve(void)
{
    1dce:	df 93       	push	r29
    1dd0:	cf 93       	push	r28
    1dd2:	0f 92       	push	r0
    1dd4:	cd b7       	in	r28, 0x3d	; 61
    1dd6:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8RecievedData=0;
    1dd8:	19 82       	std	Y+1, r1	; 0x01

	/*polling till the Recieving is complete*/
	//while(GET_BIT(UCSRA,UCSRA_RXC) == 0);

	/*Sending the data in the UDR register to the user*/
	Local_u8RecievedData=UDR;
    1dda:	ec e2       	ldi	r30, 0x2C	; 44
    1ddc:	f0 e0       	ldi	r31, 0x00	; 0
    1dde:	80 81       	ld	r24, Z
    1de0:	89 83       	std	Y+1, r24	; 0x01

	return Local_u8RecievedData;
    1de2:	89 81       	ldd	r24, Y+1	; 0x01
}
    1de4:	0f 90       	pop	r0
    1de6:	cf 91       	pop	r28
    1de8:	df 91       	pop	r29
    1dea:	08 95       	ret

00001dec <main>:
u8 APP_u8SentUARTManualAction=NULL;

u8 Local_u8ElementsEntered=0;
u8 Local_PasswordIsCorrect=0;
void main(void)
{
    1dec:	df 93       	push	r29
    1dee:	cf 93       	push	r28
    1df0:	cd b7       	in	r28, 0x3d	; 61
    1df2:	de b7       	in	r29, 0x3e	; 62
    1df4:	c2 54       	subi	r28, 0x42	; 66
    1df6:	d0 40       	sbci	r29, 0x00	; 0
    1df8:	0f b6       	in	r0, 0x3f	; 63
    1dfa:	f8 94       	cli
    1dfc:	de bf       	out	0x3e, r29	; 62
    1dfe:	0f be       	out	0x3f, r0	; 63
    1e00:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8TempReading=0;
    1e02:	1a ae       	std	Y+58, r1	; 0x3a
	u8 Local_KEYVAL;

	/*Definig arrays for the correct password & for the password the user will put
	 * to compare them */
	char Local_u8CorrectPasswordArr[4]={'2','2','2','2'};
    1e04:	82 e3       	ldi	r24, 0x32	; 50
    1e06:	8b af       	std	Y+59, r24	; 0x3b
    1e08:	82 e3       	ldi	r24, 0x32	; 50
    1e0a:	8c af       	std	Y+60, r24	; 0x3c
    1e0c:	82 e3       	ldi	r24, 0x32	; 50
    1e0e:	8d af       	std	Y+61, r24	; 0x3d
    1e10:	82 e3       	ldi	r24, 0x32	; 50
    1e12:	8e af       	std	Y+62, r24	; 0x3e
	char Local_u8TrialPasswordArr[4];


	/*Defining the lamp pin as output*/
	DIO_voidSetPinDirection(DIO_u8PORTB,DIO_u8PIN4,DIO_u8PIN_OUTPUT);
    1e14:	82 e0       	ldi	r24, 0x02	; 2
    1e16:	64 e0       	ldi	r22, 0x04	; 4
    1e18:	41 e0       	ldi	r20, 0x01	; 1
    1e1a:	0e 94 d1 06 	call	0xda2	; 0xda2 <DIO_voidSetPinDirection>

	/*Defining the Fan pin as output*/
	DIO_voidSetPinDirection(DIO_u8PORTB,DIO_u8PIN5,DIO_u8PIN_OUTPUT);
    1e1e:	82 e0       	ldi	r24, 0x02	; 2
    1e20:	65 e0       	ldi	r22, 0x05	; 5
    1e22:	41 e0       	ldi	r20, 0x01	; 1
    1e24:	0e 94 d1 06 	call	0xda2	; 0xda2 <DIO_voidSetPinDirection>

	/*Defining the EXT0 pin as input*/
	DIO_voidSetPinDirection(DIO_u8PORTD,DIO_u8PIN2,DIO_u8PIN_INPUT);
    1e28:	84 e0       	ldi	r24, 0x04	; 4
    1e2a:	62 e0       	ldi	r22, 0x02	; 2
    1e2c:	40 e0       	ldi	r20, 0x00	; 0
    1e2e:	0e 94 d1 06 	call	0xda2	; 0xda2 <DIO_voidSetPinDirection>

	/*Setting the ADC channel pin to input*/
	DIO_voidSetPinDirection(DIO_u8PORTA,DIO_u8PIN7,DIO_u8PIN_INPUT);
    1e32:	81 e0       	ldi	r24, 0x01	; 1
    1e34:	67 e0       	ldi	r22, 0x07	; 7
    1e36:	40 e0       	ldi	r20, 0x00	; 0
    1e38:	0e 94 d1 06 	call	0xda2	; 0xda2 <DIO_voidSetPinDirection>

	/*RX PIN*/
	DIO_voidSetPinDirection(DIO_u8PORTD,DIO_u8PIN0,DIO_u8PIN_INPUT);
    1e3c:	84 e0       	ldi	r24, 0x04	; 4
    1e3e:	60 e0       	ldi	r22, 0x00	; 0
    1e40:	40 e0       	ldi	r20, 0x00	; 0
    1e42:	0e 94 d1 06 	call	0xda2	; 0xda2 <DIO_voidSetPinDirection>

	/*TX PIN*/
	DIO_voidSetPinDirection(DIO_u8PORTD,DIO_u8PIN1,DIO_u8PIN_OUTPUT);
    1e46:	84 e0       	ldi	r24, 0x04	; 4
    1e48:	61 e0       	ldi	r22, 0x01	; 1
    1e4a:	41 e0       	ldi	r20, 0x01	; 1
    1e4c:	0e 94 d1 06 	call	0xda2	; 0xda2 <DIO_voidSetPinDirection>



	/*Initialize USART*/
	UART_voidInit();
    1e50:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <UART_voidInit>

	/*Initializing the ADC*/
	ADC_voidADCInit();
    1e54:	0e 94 a3 05 	call	0xb46	; 0xb46 <ADC_voidADCInit>

	/*Initializing the EXT0 for IR*/
	EXTI_voidINT0Init();
    1e58:	0e 94 db 09 	call	0x13b6	; 0x13b6 <EXTI_voidINT0Init>

	/*Set callback function to excute the ISR*/
	EXTI_u8SetCallBack(&IR_SystemON_OFF);
    1e5c:	8f e2       	ldi	r24, 0x2F	; 47
    1e5e:	92 e1       	ldi	r25, 0x12	; 18
    1e60:	0e 94 44 0a 	call	0x1488	; 0x1488 <EXTI_u8SetCallBack>

	/*Initializing the global interrupt*/
	GIE_voidEnable();
    1e64:	0e 94 28 0a 	call	0x1450	; 0x1450 <GIE_voidEnable>

	/*Keybad initializing*/
	KEYPAD_voidInit();
    1e68:	0e 94 95 0a 	call	0x152a	; 0x152a <KEYPAD_voidInit>

	/*LCD initializing and clearing*/
	LCD_voidInit();
    1e6c:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <LCD_voidInit>
	LCD_voidClear();
    1e70:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <LCD_voidClear>
	LCD_voidPosition(0,0);
    1e74:	80 e0       	ldi	r24, 0x00	; 0
    1e76:	60 e0       	ldi	r22, 0x00	; 0
    1e78:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <LCD_voidPosition>
    1e7c:	2b c0       	rjmp	.+86     	; 0x1ed4 <main+0xe8>
	while(1)
	{
		while(Local_u8ElementsEntered!=4)
		{
			/*I will not check the password again if it was entered correctly*/
			if(Local_PasswordIsCorrect==1){break;}
    1e7e:	80 91 bd 00 	lds	r24, 0x00BD
    1e82:	81 30       	cpi	r24, 0x01	; 1
    1e84:	59 f1       	breq	.+86     	; 0x1edc <main+0xf0>

			LCD_voidPosition(0,0);
    1e86:	80 e0       	ldi	r24, 0x00	; 0
    1e88:	60 e0       	ldi	r22, 0x00	; 0
    1e8a:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <LCD_voidPosition>
			LCD_voidSendString("Enter pass");
    1e8e:	80 e6       	ldi	r24, 0x60	; 96
    1e90:	90 e0       	ldi	r25, 0x00	; 0
    1e92:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <LCD_voidSendString>
			Local_KEYVAL=KEYPAD_u8GetPressedKey();
    1e96:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <KEYPAD_u8GetPressedKey>
    1e9a:	89 af       	std	Y+57, r24	; 0x39
			if (Local_KEYVAL!=KEYPAD_DEFAULT_KEY)
    1e9c:	89 ad       	ldd	r24, Y+57	; 0x39
    1e9e:	8f 3f       	cpi	r24, 0xFF	; 255
    1ea0:	c9 f0       	breq	.+50     	; 0x1ed4 <main+0xe8>
			{
				Local_u8TrialPasswordArr[Local_u8ElementsEntered]=Local_KEYVAL;
    1ea2:	80 91 bc 00 	lds	r24, 0x00BC
    1ea6:	28 2f       	mov	r18, r24
    1ea8:	30 e0       	ldi	r19, 0x00	; 0
    1eaa:	ce 01       	movw	r24, r28
    1eac:	cf 96       	adiw	r24, 0x3f	; 63
    1eae:	fc 01       	movw	r30, r24
    1eb0:	e2 0f       	add	r30, r18
    1eb2:	f3 1f       	adc	r31, r19
    1eb4:	89 ad       	ldd	r24, Y+57	; 0x39
    1eb6:	80 83       	st	Z, r24
				LCD_voidPosition(1,Local_u8ElementsEntered);
    1eb8:	90 91 bc 00 	lds	r25, 0x00BC
    1ebc:	81 e0       	ldi	r24, 0x01	; 1
    1ebe:	69 2f       	mov	r22, r25
    1ec0:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <LCD_voidPosition>
				LCD_voidSendCharacter(Local_KEYVAL);
    1ec4:	89 ad       	ldd	r24, Y+57	; 0x39
    1ec6:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCD_voidSendCharacter>
				Local_u8ElementsEntered++;
    1eca:	80 91 bc 00 	lds	r24, 0x00BC
    1ece:	8f 5f       	subi	r24, 0xFF	; 255
    1ed0:	80 93 bc 00 	sts	0x00BC, r24
	LCD_voidClear();
	LCD_voidPosition(0,0);

	while(1)
	{
		while(Local_u8ElementsEntered!=4)
    1ed4:	80 91 bc 00 	lds	r24, 0x00BC
    1ed8:	84 30       	cpi	r24, 0x04	; 4
    1eda:	89 f6       	brne	.-94     	; 0x1e7e <main+0x92>
				Local_u8ElementsEntered++;
			}
			else{}
		}

		if(Local_PasswordIsCorrect==0)
    1edc:	80 91 bd 00 	lds	r24, 0x00BD
    1ee0:	88 23       	and	r24, r24
    1ee2:	09 f0       	breq	.+2      	; 0x1ee6 <main+0xfa>
    1ee4:	45 c1       	rjmp	.+650    	; 0x2170 <main+0x384>
		{
			/*Checking if the entered password is correct or not*/
			if((Local_u8TrialPasswordArr[0]==Local_u8CorrectPasswordArr[0])&&(Local_u8TrialPasswordArr[1]==Local_u8CorrectPasswordArr[1])&&(Local_u8TrialPasswordArr[2]==Local_u8CorrectPasswordArr[2])&&(Local_u8TrialPasswordArr[3]==Local_u8CorrectPasswordArr[3]))
    1ee6:	fe 01       	movw	r30, r28
    1ee8:	ff 96       	adiw	r30, 0x3f	; 63
    1eea:	90 81       	ld	r25, Z
    1eec:	8b ad       	ldd	r24, Y+59	; 0x3b
    1eee:	98 17       	cp	r25, r24
    1ef0:	09 f0       	breq	.+2      	; 0x1ef4 <main+0x108>
    1ef2:	9d c0       	rjmp	.+314    	; 0x202e <main+0x242>
    1ef4:	fe 01       	movw	r30, r28
    1ef6:	ff 96       	adiw	r30, 0x3f	; 63
    1ef8:	91 81       	ldd	r25, Z+1	; 0x01
    1efa:	8c ad       	ldd	r24, Y+60	; 0x3c
    1efc:	98 17       	cp	r25, r24
    1efe:	09 f0       	breq	.+2      	; 0x1f02 <main+0x116>
    1f00:	96 c0       	rjmp	.+300    	; 0x202e <main+0x242>
    1f02:	fe 01       	movw	r30, r28
    1f04:	ff 96       	adiw	r30, 0x3f	; 63
    1f06:	92 81       	ldd	r25, Z+2	; 0x02
    1f08:	8d ad       	ldd	r24, Y+61	; 0x3d
    1f0a:	98 17       	cp	r25, r24
    1f0c:	09 f0       	breq	.+2      	; 0x1f10 <main+0x124>
    1f0e:	8f c0       	rjmp	.+286    	; 0x202e <main+0x242>
    1f10:	fe 01       	movw	r30, r28
    1f12:	ff 96       	adiw	r30, 0x3f	; 63
    1f14:	93 81       	ldd	r25, Z+3	; 0x03
    1f16:	8e ad       	ldd	r24, Y+62	; 0x3e
    1f18:	98 17       	cp	r25, r24
    1f1a:	09 f0       	breq	.+2      	; 0x1f1e <main+0x132>
    1f1c:	88 c0       	rjmp	.+272    	; 0x202e <main+0x242>
			{
				/*I put a flag to not check the password again if its correct*/
				Local_PasswordIsCorrect=1;
    1f1e:	81 e0       	ldi	r24, 0x01	; 1
    1f20:	80 93 bd 00 	sts	0x00BD, r24
				LCD_voidClear();
    1f24:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <LCD_voidClear>
				LCD_voidPosition(0,0);
    1f28:	80 e0       	ldi	r24, 0x00	; 0
    1f2a:	60 e0       	ldi	r22, 0x00	; 0
    1f2c:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <LCD_voidPosition>
				LCD_voidSendString("Password is R");
    1f30:	8b e6       	ldi	r24, 0x6B	; 107
    1f32:	90 e0       	ldi	r25, 0x00	; 0
    1f34:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <LCD_voidSendString>
				LCD_voidPosition(1,0);
    1f38:	81 e0       	ldi	r24, 0x01	; 1
    1f3a:	60 e0       	ldi	r22, 0x00	; 0
    1f3c:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <LCD_voidPosition>
				LCD_voidSendString("Enter home");
    1f40:	89 e7       	ldi	r24, 0x79	; 121
    1f42:	90 e0       	ldi	r25, 0x00	; 0
    1f44:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <LCD_voidSendString>
    1f48:	80 e0       	ldi	r24, 0x00	; 0
    1f4a:	90 e0       	ldi	r25, 0x00	; 0
    1f4c:	a8 ec       	ldi	r26, 0xC8	; 200
    1f4e:	b2 e4       	ldi	r27, 0x42	; 66
    1f50:	8d ab       	std	Y+53, r24	; 0x35
    1f52:	9e ab       	std	Y+54, r25	; 0x36
    1f54:	af ab       	std	Y+55, r26	; 0x37
    1f56:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f58:	6d a9       	ldd	r22, Y+53	; 0x35
    1f5a:	7e a9       	ldd	r23, Y+54	; 0x36
    1f5c:	8f a9       	ldd	r24, Y+55	; 0x37
    1f5e:	98 ad       	ldd	r25, Y+56	; 0x38
    1f60:	20 e0       	ldi	r18, 0x00	; 0
    1f62:	30 e0       	ldi	r19, 0x00	; 0
    1f64:	4a ef       	ldi	r20, 0xFA	; 250
    1f66:	54 e4       	ldi	r21, 0x44	; 68
    1f68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f6c:	dc 01       	movw	r26, r24
    1f6e:	cb 01       	movw	r24, r22
    1f70:	89 ab       	std	Y+49, r24	; 0x31
    1f72:	9a ab       	std	Y+50, r25	; 0x32
    1f74:	ab ab       	std	Y+51, r26	; 0x33
    1f76:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1f78:	69 a9       	ldd	r22, Y+49	; 0x31
    1f7a:	7a a9       	ldd	r23, Y+50	; 0x32
    1f7c:	8b a9       	ldd	r24, Y+51	; 0x33
    1f7e:	9c a9       	ldd	r25, Y+52	; 0x34
    1f80:	20 e0       	ldi	r18, 0x00	; 0
    1f82:	30 e0       	ldi	r19, 0x00	; 0
    1f84:	40 e8       	ldi	r20, 0x80	; 128
    1f86:	5f e3       	ldi	r21, 0x3F	; 63
    1f88:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f8c:	88 23       	and	r24, r24
    1f8e:	2c f4       	brge	.+10     	; 0x1f9a <main+0x1ae>
		__ticks = 1;
    1f90:	81 e0       	ldi	r24, 0x01	; 1
    1f92:	90 e0       	ldi	r25, 0x00	; 0
    1f94:	98 ab       	std	Y+48, r25	; 0x30
    1f96:	8f a7       	std	Y+47, r24	; 0x2f
    1f98:	3f c0       	rjmp	.+126    	; 0x2018 <main+0x22c>
	else if (__tmp > 65535)
    1f9a:	69 a9       	ldd	r22, Y+49	; 0x31
    1f9c:	7a a9       	ldd	r23, Y+50	; 0x32
    1f9e:	8b a9       	ldd	r24, Y+51	; 0x33
    1fa0:	9c a9       	ldd	r25, Y+52	; 0x34
    1fa2:	20 e0       	ldi	r18, 0x00	; 0
    1fa4:	3f ef       	ldi	r19, 0xFF	; 255
    1fa6:	4f e7       	ldi	r20, 0x7F	; 127
    1fa8:	57 e4       	ldi	r21, 0x47	; 71
    1faa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fae:	18 16       	cp	r1, r24
    1fb0:	4c f5       	brge	.+82     	; 0x2004 <main+0x218>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fb2:	6d a9       	ldd	r22, Y+53	; 0x35
    1fb4:	7e a9       	ldd	r23, Y+54	; 0x36
    1fb6:	8f a9       	ldd	r24, Y+55	; 0x37
    1fb8:	98 ad       	ldd	r25, Y+56	; 0x38
    1fba:	20 e0       	ldi	r18, 0x00	; 0
    1fbc:	30 e0       	ldi	r19, 0x00	; 0
    1fbe:	40 e2       	ldi	r20, 0x20	; 32
    1fc0:	51 e4       	ldi	r21, 0x41	; 65
    1fc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fc6:	dc 01       	movw	r26, r24
    1fc8:	cb 01       	movw	r24, r22
    1fca:	bc 01       	movw	r22, r24
    1fcc:	cd 01       	movw	r24, r26
    1fce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fd2:	dc 01       	movw	r26, r24
    1fd4:	cb 01       	movw	r24, r22
    1fd6:	98 ab       	std	Y+48, r25	; 0x30
    1fd8:	8f a7       	std	Y+47, r24	; 0x2f
    1fda:	0f c0       	rjmp	.+30     	; 0x1ffa <main+0x20e>
    1fdc:	88 ec       	ldi	r24, 0xC8	; 200
    1fde:	90 e0       	ldi	r25, 0x00	; 0
    1fe0:	9e a7       	std	Y+46, r25	; 0x2e
    1fe2:	8d a7       	std	Y+45, r24	; 0x2d
    1fe4:	8d a5       	ldd	r24, Y+45	; 0x2d
    1fe6:	9e a5       	ldd	r25, Y+46	; 0x2e
    1fe8:	01 97       	sbiw	r24, 0x01	; 1
    1fea:	f1 f7       	brne	.-4      	; 0x1fe8 <main+0x1fc>
    1fec:	9e a7       	std	Y+46, r25	; 0x2e
    1fee:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ff0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ff2:	98 a9       	ldd	r25, Y+48	; 0x30
    1ff4:	01 97       	sbiw	r24, 0x01	; 1
    1ff6:	98 ab       	std	Y+48, r25	; 0x30
    1ff8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ffa:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ffc:	98 a9       	ldd	r25, Y+48	; 0x30
    1ffe:	00 97       	sbiw	r24, 0x00	; 0
    2000:	69 f7       	brne	.-38     	; 0x1fdc <main+0x1f0>
    2002:	b6 c0       	rjmp	.+364    	; 0x2170 <main+0x384>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2004:	69 a9       	ldd	r22, Y+49	; 0x31
    2006:	7a a9       	ldd	r23, Y+50	; 0x32
    2008:	8b a9       	ldd	r24, Y+51	; 0x33
    200a:	9c a9       	ldd	r25, Y+52	; 0x34
    200c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2010:	dc 01       	movw	r26, r24
    2012:	cb 01       	movw	r24, r22
    2014:	98 ab       	std	Y+48, r25	; 0x30
    2016:	8f a7       	std	Y+47, r24	; 0x2f
    2018:	8f a5       	ldd	r24, Y+47	; 0x2f
    201a:	98 a9       	ldd	r25, Y+48	; 0x30
    201c:	9c a7       	std	Y+44, r25	; 0x2c
    201e:	8b a7       	std	Y+43, r24	; 0x2b
    2020:	8b a5       	ldd	r24, Y+43	; 0x2b
    2022:	9c a5       	ldd	r25, Y+44	; 0x2c
    2024:	01 97       	sbiw	r24, 0x01	; 1
    2026:	f1 f7       	brne	.-4      	; 0x2024 <main+0x238>
    2028:	9c a7       	std	Y+44, r25	; 0x2c
    202a:	8b a7       	std	Y+43, r24	; 0x2b
    202c:	a1 c0       	rjmp	.+322    	; 0x2170 <main+0x384>
				_delay_ms(100);
			}
			else if((Local_u8TrialPasswordArr[0]!=Local_u8CorrectPasswordArr[0])||(Local_u8TrialPasswordArr[1]!=Local_u8CorrectPasswordArr[1])||(Local_u8TrialPasswordArr[2]!=Local_u8CorrectPasswordArr[2])||(Local_u8TrialPasswordArr[3]!=Local_u8CorrectPasswordArr[3]))
    202e:	fe 01       	movw	r30, r28
    2030:	ff 96       	adiw	r30, 0x3f	; 63
    2032:	90 81       	ld	r25, Z
    2034:	8b ad       	ldd	r24, Y+59	; 0x3b
    2036:	98 17       	cp	r25, r24
    2038:	99 f4       	brne	.+38     	; 0x2060 <main+0x274>
    203a:	fe 01       	movw	r30, r28
    203c:	ff 96       	adiw	r30, 0x3f	; 63
    203e:	91 81       	ldd	r25, Z+1	; 0x01
    2040:	8c ad       	ldd	r24, Y+60	; 0x3c
    2042:	98 17       	cp	r25, r24
    2044:	69 f4       	brne	.+26     	; 0x2060 <main+0x274>
    2046:	fe 01       	movw	r30, r28
    2048:	ff 96       	adiw	r30, 0x3f	; 63
    204a:	92 81       	ldd	r25, Z+2	; 0x02
    204c:	8d ad       	ldd	r24, Y+61	; 0x3d
    204e:	98 17       	cp	r25, r24
    2050:	39 f4       	brne	.+14     	; 0x2060 <main+0x274>
    2052:	fe 01       	movw	r30, r28
    2054:	ff 96       	adiw	r30, 0x3f	; 63
    2056:	93 81       	ldd	r25, Z+3	; 0x03
    2058:	8e ad       	ldd	r24, Y+62	; 0x3e
    205a:	98 17       	cp	r25, r24
    205c:	09 f4       	brne	.+2      	; 0x2060 <main+0x274>
    205e:	88 c0       	rjmp	.+272    	; 0x2170 <main+0x384>
			{

				LCD_voidClear();
    2060:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <LCD_voidClear>
				LCD_voidPosition(0,0);
    2064:	80 e0       	ldi	r24, 0x00	; 0
    2066:	60 e0       	ldi	r22, 0x00	; 0
    2068:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <LCD_voidPosition>
				LCD_voidSendString("Password is W");
    206c:	84 e8       	ldi	r24, 0x84	; 132
    206e:	90 e0       	ldi	r25, 0x00	; 0
    2070:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <LCD_voidSendString>
				LCD_voidPosition(1,0);
    2074:	81 e0       	ldi	r24, 0x01	; 1
    2076:	60 e0       	ldi	r22, 0x00	; 0
    2078:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <LCD_voidPosition>
				LCD_voidSendString("Try again");
    207c:	82 e9       	ldi	r24, 0x92	; 146
    207e:	90 e0       	ldi	r25, 0x00	; 0
    2080:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <LCD_voidSendString>
    2084:	80 e0       	ldi	r24, 0x00	; 0
    2086:	90 e0       	ldi	r25, 0x00	; 0
    2088:	aa e7       	ldi	r26, 0x7A	; 122
    208a:	b4 e4       	ldi	r27, 0x44	; 68
    208c:	8f a3       	std	Y+39, r24	; 0x27
    208e:	98 a7       	std	Y+40, r25	; 0x28
    2090:	a9 a7       	std	Y+41, r26	; 0x29
    2092:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2094:	6f a1       	ldd	r22, Y+39	; 0x27
    2096:	78 a5       	ldd	r23, Y+40	; 0x28
    2098:	89 a5       	ldd	r24, Y+41	; 0x29
    209a:	9a a5       	ldd	r25, Y+42	; 0x2a
    209c:	20 e0       	ldi	r18, 0x00	; 0
    209e:	30 e0       	ldi	r19, 0x00	; 0
    20a0:	4a ef       	ldi	r20, 0xFA	; 250
    20a2:	54 e4       	ldi	r21, 0x44	; 68
    20a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20a8:	dc 01       	movw	r26, r24
    20aa:	cb 01       	movw	r24, r22
    20ac:	8b a3       	std	Y+35, r24	; 0x23
    20ae:	9c a3       	std	Y+36, r25	; 0x24
    20b0:	ad a3       	std	Y+37, r26	; 0x25
    20b2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    20b4:	6b a1       	ldd	r22, Y+35	; 0x23
    20b6:	7c a1       	ldd	r23, Y+36	; 0x24
    20b8:	8d a1       	ldd	r24, Y+37	; 0x25
    20ba:	9e a1       	ldd	r25, Y+38	; 0x26
    20bc:	20 e0       	ldi	r18, 0x00	; 0
    20be:	30 e0       	ldi	r19, 0x00	; 0
    20c0:	40 e8       	ldi	r20, 0x80	; 128
    20c2:	5f e3       	ldi	r21, 0x3F	; 63
    20c4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20c8:	88 23       	and	r24, r24
    20ca:	2c f4       	brge	.+10     	; 0x20d6 <main+0x2ea>
		__ticks = 1;
    20cc:	81 e0       	ldi	r24, 0x01	; 1
    20ce:	90 e0       	ldi	r25, 0x00	; 0
    20d0:	9a a3       	std	Y+34, r25	; 0x22
    20d2:	89 a3       	std	Y+33, r24	; 0x21
    20d4:	3f c0       	rjmp	.+126    	; 0x2154 <main+0x368>
	else if (__tmp > 65535)
    20d6:	6b a1       	ldd	r22, Y+35	; 0x23
    20d8:	7c a1       	ldd	r23, Y+36	; 0x24
    20da:	8d a1       	ldd	r24, Y+37	; 0x25
    20dc:	9e a1       	ldd	r25, Y+38	; 0x26
    20de:	20 e0       	ldi	r18, 0x00	; 0
    20e0:	3f ef       	ldi	r19, 0xFF	; 255
    20e2:	4f e7       	ldi	r20, 0x7F	; 127
    20e4:	57 e4       	ldi	r21, 0x47	; 71
    20e6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20ea:	18 16       	cp	r1, r24
    20ec:	4c f5       	brge	.+82     	; 0x2140 <main+0x354>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20ee:	6f a1       	ldd	r22, Y+39	; 0x27
    20f0:	78 a5       	ldd	r23, Y+40	; 0x28
    20f2:	89 a5       	ldd	r24, Y+41	; 0x29
    20f4:	9a a5       	ldd	r25, Y+42	; 0x2a
    20f6:	20 e0       	ldi	r18, 0x00	; 0
    20f8:	30 e0       	ldi	r19, 0x00	; 0
    20fa:	40 e2       	ldi	r20, 0x20	; 32
    20fc:	51 e4       	ldi	r21, 0x41	; 65
    20fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2102:	dc 01       	movw	r26, r24
    2104:	cb 01       	movw	r24, r22
    2106:	bc 01       	movw	r22, r24
    2108:	cd 01       	movw	r24, r26
    210a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    210e:	dc 01       	movw	r26, r24
    2110:	cb 01       	movw	r24, r22
    2112:	9a a3       	std	Y+34, r25	; 0x22
    2114:	89 a3       	std	Y+33, r24	; 0x21
    2116:	0f c0       	rjmp	.+30     	; 0x2136 <main+0x34a>
    2118:	88 ec       	ldi	r24, 0xC8	; 200
    211a:	90 e0       	ldi	r25, 0x00	; 0
    211c:	98 a3       	std	Y+32, r25	; 0x20
    211e:	8f 8f       	std	Y+31, r24	; 0x1f
    2120:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2122:	98 a1       	ldd	r25, Y+32	; 0x20
    2124:	01 97       	sbiw	r24, 0x01	; 1
    2126:	f1 f7       	brne	.-4      	; 0x2124 <main+0x338>
    2128:	98 a3       	std	Y+32, r25	; 0x20
    212a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    212c:	89 a1       	ldd	r24, Y+33	; 0x21
    212e:	9a a1       	ldd	r25, Y+34	; 0x22
    2130:	01 97       	sbiw	r24, 0x01	; 1
    2132:	9a a3       	std	Y+34, r25	; 0x22
    2134:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2136:	89 a1       	ldd	r24, Y+33	; 0x21
    2138:	9a a1       	ldd	r25, Y+34	; 0x22
    213a:	00 97       	sbiw	r24, 0x00	; 0
    213c:	69 f7       	brne	.-38     	; 0x2118 <main+0x32c>
    213e:	14 c0       	rjmp	.+40     	; 0x2168 <main+0x37c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2140:	6b a1       	ldd	r22, Y+35	; 0x23
    2142:	7c a1       	ldd	r23, Y+36	; 0x24
    2144:	8d a1       	ldd	r24, Y+37	; 0x25
    2146:	9e a1       	ldd	r25, Y+38	; 0x26
    2148:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    214c:	dc 01       	movw	r26, r24
    214e:	cb 01       	movw	r24, r22
    2150:	9a a3       	std	Y+34, r25	; 0x22
    2152:	89 a3       	std	Y+33, r24	; 0x21
    2154:	89 a1       	ldd	r24, Y+33	; 0x21
    2156:	9a a1       	ldd	r25, Y+34	; 0x22
    2158:	9e 8f       	std	Y+30, r25	; 0x1e
    215a:	8d 8f       	std	Y+29, r24	; 0x1d
    215c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    215e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2160:	01 97       	sbiw	r24, 0x01	; 1
    2162:	f1 f7       	brne	.-4      	; 0x2160 <main+0x374>
    2164:	9e 8f       	std	Y+30, r25	; 0x1e
    2166:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(1000);
				LCD_voidClear();
    2168:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <LCD_voidClear>
				/*Clearing the holding variable of the elements to re-enter the password */
				Local_u8ElementsEntered=0;
    216c:	10 92 bc 00 	sts	0x00BC, r1

		}



		if(APP_u8SentUARTMode==Autonomous_Mode)
    2170:	80 91 ba 00 	lds	r24, 0x00BA
    2174:	81 34       	cpi	r24, 0x41	; 65
    2176:	09 f0       	breq	.+2      	; 0x217a <main+0x38e>
    2178:	0b c1       	rjmp	.+534    	; 0x2390 <main+0x5a4>
    217a:	f7 c0       	rjmp	.+494    	; 0x236a <main+0x57e>
		{
			while((APP_u8SentUARTMode==Autonomous_Mode)&&(Local_PasswordIsCorrect==1))
			{
				Local_u8TempReading=LM35TempCalculations();
    217c:	0e 94 ca 12 	call	0x2594	; 0x2594 <LM35TempCalculations>
    2180:	8a af       	std	Y+58, r24	; 0x3a

				if((Local_u8TempReading>HighTemp)||(Local_u8TempReading==HighTemp))
    2182:	8a ad       	ldd	r24, Y+58	; 0x3a
    2184:	80 31       	cpi	r24, 0x10	; 16
    2186:	20 f4       	brcc	.+8      	; 0x2190 <main+0x3a4>
    2188:	8a ad       	ldd	r24, Y+58	; 0x3a
    218a:	8f 30       	cpi	r24, 0x0F	; 15
    218c:	09 f0       	breq	.+2      	; 0x2190 <main+0x3a4>
    218e:	77 c0       	rjmp	.+238    	; 0x227e <main+0x492>
				{
					Fan_On();
    2190:	0e 94 17 12 	call	0x242e	; 0x242e <Fan_On>
					Lamp_OFF();
    2194:	0e 94 0b 12 	call	0x2416	; 0x2416 <Lamp_OFF>
    2198:	80 e0       	ldi	r24, 0x00	; 0
    219a:	90 e0       	ldi	r25, 0x00	; 0
    219c:	aa e7       	ldi	r26, 0x7A	; 122
    219e:	b4 e4       	ldi	r27, 0x44	; 68
    21a0:	89 8f       	std	Y+25, r24	; 0x19
    21a2:	9a 8f       	std	Y+26, r25	; 0x1a
    21a4:	ab 8f       	std	Y+27, r26	; 0x1b
    21a6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21a8:	69 8d       	ldd	r22, Y+25	; 0x19
    21aa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21ac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21ae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21b0:	20 e0       	ldi	r18, 0x00	; 0
    21b2:	30 e0       	ldi	r19, 0x00	; 0
    21b4:	4a ef       	ldi	r20, 0xFA	; 250
    21b6:	54 e4       	ldi	r21, 0x44	; 68
    21b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21bc:	dc 01       	movw	r26, r24
    21be:	cb 01       	movw	r24, r22
    21c0:	8d 8b       	std	Y+21, r24	; 0x15
    21c2:	9e 8b       	std	Y+22, r25	; 0x16
    21c4:	af 8b       	std	Y+23, r26	; 0x17
    21c6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    21c8:	6d 89       	ldd	r22, Y+21	; 0x15
    21ca:	7e 89       	ldd	r23, Y+22	; 0x16
    21cc:	8f 89       	ldd	r24, Y+23	; 0x17
    21ce:	98 8d       	ldd	r25, Y+24	; 0x18
    21d0:	20 e0       	ldi	r18, 0x00	; 0
    21d2:	30 e0       	ldi	r19, 0x00	; 0
    21d4:	40 e8       	ldi	r20, 0x80	; 128
    21d6:	5f e3       	ldi	r21, 0x3F	; 63
    21d8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21dc:	88 23       	and	r24, r24
    21de:	2c f4       	brge	.+10     	; 0x21ea <main+0x3fe>
		__ticks = 1;
    21e0:	81 e0       	ldi	r24, 0x01	; 1
    21e2:	90 e0       	ldi	r25, 0x00	; 0
    21e4:	9c 8b       	std	Y+20, r25	; 0x14
    21e6:	8b 8b       	std	Y+19, r24	; 0x13
    21e8:	3f c0       	rjmp	.+126    	; 0x2268 <main+0x47c>
	else if (__tmp > 65535)
    21ea:	6d 89       	ldd	r22, Y+21	; 0x15
    21ec:	7e 89       	ldd	r23, Y+22	; 0x16
    21ee:	8f 89       	ldd	r24, Y+23	; 0x17
    21f0:	98 8d       	ldd	r25, Y+24	; 0x18
    21f2:	20 e0       	ldi	r18, 0x00	; 0
    21f4:	3f ef       	ldi	r19, 0xFF	; 255
    21f6:	4f e7       	ldi	r20, 0x7F	; 127
    21f8:	57 e4       	ldi	r21, 0x47	; 71
    21fa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21fe:	18 16       	cp	r1, r24
    2200:	4c f5       	brge	.+82     	; 0x2254 <main+0x468>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2202:	69 8d       	ldd	r22, Y+25	; 0x19
    2204:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2206:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2208:	9c 8d       	ldd	r25, Y+28	; 0x1c
    220a:	20 e0       	ldi	r18, 0x00	; 0
    220c:	30 e0       	ldi	r19, 0x00	; 0
    220e:	40 e2       	ldi	r20, 0x20	; 32
    2210:	51 e4       	ldi	r21, 0x41	; 65
    2212:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2216:	dc 01       	movw	r26, r24
    2218:	cb 01       	movw	r24, r22
    221a:	bc 01       	movw	r22, r24
    221c:	cd 01       	movw	r24, r26
    221e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2222:	dc 01       	movw	r26, r24
    2224:	cb 01       	movw	r24, r22
    2226:	9c 8b       	std	Y+20, r25	; 0x14
    2228:	8b 8b       	std	Y+19, r24	; 0x13
    222a:	0f c0       	rjmp	.+30     	; 0x224a <main+0x45e>
    222c:	88 ec       	ldi	r24, 0xC8	; 200
    222e:	90 e0       	ldi	r25, 0x00	; 0
    2230:	9a 8b       	std	Y+18, r25	; 0x12
    2232:	89 8b       	std	Y+17, r24	; 0x11
    2234:	89 89       	ldd	r24, Y+17	; 0x11
    2236:	9a 89       	ldd	r25, Y+18	; 0x12
    2238:	01 97       	sbiw	r24, 0x01	; 1
    223a:	f1 f7       	brne	.-4      	; 0x2238 <main+0x44c>
    223c:	9a 8b       	std	Y+18, r25	; 0x12
    223e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2240:	8b 89       	ldd	r24, Y+19	; 0x13
    2242:	9c 89       	ldd	r25, Y+20	; 0x14
    2244:	01 97       	sbiw	r24, 0x01	; 1
    2246:	9c 8b       	std	Y+20, r25	; 0x14
    2248:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    224a:	8b 89       	ldd	r24, Y+19	; 0x13
    224c:	9c 89       	ldd	r25, Y+20	; 0x14
    224e:	00 97       	sbiw	r24, 0x00	; 0
    2250:	69 f7       	brne	.-38     	; 0x222c <main+0x440>
    2252:	8b c0       	rjmp	.+278    	; 0x236a <main+0x57e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2254:	6d 89       	ldd	r22, Y+21	; 0x15
    2256:	7e 89       	ldd	r23, Y+22	; 0x16
    2258:	8f 89       	ldd	r24, Y+23	; 0x17
    225a:	98 8d       	ldd	r25, Y+24	; 0x18
    225c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2260:	dc 01       	movw	r26, r24
    2262:	cb 01       	movw	r24, r22
    2264:	9c 8b       	std	Y+20, r25	; 0x14
    2266:	8b 8b       	std	Y+19, r24	; 0x13
    2268:	8b 89       	ldd	r24, Y+19	; 0x13
    226a:	9c 89       	ldd	r25, Y+20	; 0x14
    226c:	98 8b       	std	Y+16, r25	; 0x10
    226e:	8f 87       	std	Y+15, r24	; 0x0f
    2270:	8f 85       	ldd	r24, Y+15	; 0x0f
    2272:	98 89       	ldd	r25, Y+16	; 0x10
    2274:	01 97       	sbiw	r24, 0x01	; 1
    2276:	f1 f7       	brne	.-4      	; 0x2274 <main+0x488>
    2278:	98 8b       	std	Y+16, r25	; 0x10
    227a:	8f 87       	std	Y+15, r24	; 0x0f
    227c:	76 c0       	rjmp	.+236    	; 0x236a <main+0x57e>
                    _delay_ms(1000);
				}

				else
				{
					Fan_OFF();
    227e:	0e 94 23 12 	call	0x2446	; 0x2446 <Fan_OFF>
					Lamp_On();
    2282:	0e 94 ff 11 	call	0x23fe	; 0x23fe <Lamp_On>
    2286:	80 e0       	ldi	r24, 0x00	; 0
    2288:	90 e0       	ldi	r25, 0x00	; 0
    228a:	aa e7       	ldi	r26, 0x7A	; 122
    228c:	b4 e4       	ldi	r27, 0x44	; 68
    228e:	8b 87       	std	Y+11, r24	; 0x0b
    2290:	9c 87       	std	Y+12, r25	; 0x0c
    2292:	ad 87       	std	Y+13, r26	; 0x0d
    2294:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2296:	6b 85       	ldd	r22, Y+11	; 0x0b
    2298:	7c 85       	ldd	r23, Y+12	; 0x0c
    229a:	8d 85       	ldd	r24, Y+13	; 0x0d
    229c:	9e 85       	ldd	r25, Y+14	; 0x0e
    229e:	20 e0       	ldi	r18, 0x00	; 0
    22a0:	30 e0       	ldi	r19, 0x00	; 0
    22a2:	4a ef       	ldi	r20, 0xFA	; 250
    22a4:	54 e4       	ldi	r21, 0x44	; 68
    22a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22aa:	dc 01       	movw	r26, r24
    22ac:	cb 01       	movw	r24, r22
    22ae:	8f 83       	std	Y+7, r24	; 0x07
    22b0:	98 87       	std	Y+8, r25	; 0x08
    22b2:	a9 87       	std	Y+9, r26	; 0x09
    22b4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22b6:	6f 81       	ldd	r22, Y+7	; 0x07
    22b8:	78 85       	ldd	r23, Y+8	; 0x08
    22ba:	89 85       	ldd	r24, Y+9	; 0x09
    22bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    22be:	20 e0       	ldi	r18, 0x00	; 0
    22c0:	30 e0       	ldi	r19, 0x00	; 0
    22c2:	40 e8       	ldi	r20, 0x80	; 128
    22c4:	5f e3       	ldi	r21, 0x3F	; 63
    22c6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22ca:	88 23       	and	r24, r24
    22cc:	2c f4       	brge	.+10     	; 0x22d8 <main+0x4ec>
		__ticks = 1;
    22ce:	81 e0       	ldi	r24, 0x01	; 1
    22d0:	90 e0       	ldi	r25, 0x00	; 0
    22d2:	9e 83       	std	Y+6, r25	; 0x06
    22d4:	8d 83       	std	Y+5, r24	; 0x05
    22d6:	3f c0       	rjmp	.+126    	; 0x2356 <main+0x56a>
	else if (__tmp > 65535)
    22d8:	6f 81       	ldd	r22, Y+7	; 0x07
    22da:	78 85       	ldd	r23, Y+8	; 0x08
    22dc:	89 85       	ldd	r24, Y+9	; 0x09
    22de:	9a 85       	ldd	r25, Y+10	; 0x0a
    22e0:	20 e0       	ldi	r18, 0x00	; 0
    22e2:	3f ef       	ldi	r19, 0xFF	; 255
    22e4:	4f e7       	ldi	r20, 0x7F	; 127
    22e6:	57 e4       	ldi	r21, 0x47	; 71
    22e8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22ec:	18 16       	cp	r1, r24
    22ee:	4c f5       	brge	.+82     	; 0x2342 <main+0x556>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    22f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    22f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    22f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    22f8:	20 e0       	ldi	r18, 0x00	; 0
    22fa:	30 e0       	ldi	r19, 0x00	; 0
    22fc:	40 e2       	ldi	r20, 0x20	; 32
    22fe:	51 e4       	ldi	r21, 0x41	; 65
    2300:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2304:	dc 01       	movw	r26, r24
    2306:	cb 01       	movw	r24, r22
    2308:	bc 01       	movw	r22, r24
    230a:	cd 01       	movw	r24, r26
    230c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2310:	dc 01       	movw	r26, r24
    2312:	cb 01       	movw	r24, r22
    2314:	9e 83       	std	Y+6, r25	; 0x06
    2316:	8d 83       	std	Y+5, r24	; 0x05
    2318:	0f c0       	rjmp	.+30     	; 0x2338 <main+0x54c>
    231a:	88 ec       	ldi	r24, 0xC8	; 200
    231c:	90 e0       	ldi	r25, 0x00	; 0
    231e:	9c 83       	std	Y+4, r25	; 0x04
    2320:	8b 83       	std	Y+3, r24	; 0x03
    2322:	8b 81       	ldd	r24, Y+3	; 0x03
    2324:	9c 81       	ldd	r25, Y+4	; 0x04
    2326:	01 97       	sbiw	r24, 0x01	; 1
    2328:	f1 f7       	brne	.-4      	; 0x2326 <main+0x53a>
    232a:	9c 83       	std	Y+4, r25	; 0x04
    232c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    232e:	8d 81       	ldd	r24, Y+5	; 0x05
    2330:	9e 81       	ldd	r25, Y+6	; 0x06
    2332:	01 97       	sbiw	r24, 0x01	; 1
    2334:	9e 83       	std	Y+6, r25	; 0x06
    2336:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2338:	8d 81       	ldd	r24, Y+5	; 0x05
    233a:	9e 81       	ldd	r25, Y+6	; 0x06
    233c:	00 97       	sbiw	r24, 0x00	; 0
    233e:	69 f7       	brne	.-38     	; 0x231a <main+0x52e>
    2340:	14 c0       	rjmp	.+40     	; 0x236a <main+0x57e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2342:	6f 81       	ldd	r22, Y+7	; 0x07
    2344:	78 85       	ldd	r23, Y+8	; 0x08
    2346:	89 85       	ldd	r24, Y+9	; 0x09
    2348:	9a 85       	ldd	r25, Y+10	; 0x0a
    234a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    234e:	dc 01       	movw	r26, r24
    2350:	cb 01       	movw	r24, r22
    2352:	9e 83       	std	Y+6, r25	; 0x06
    2354:	8d 83       	std	Y+5, r24	; 0x05
    2356:	8d 81       	ldd	r24, Y+5	; 0x05
    2358:	9e 81       	ldd	r25, Y+6	; 0x06
    235a:	9a 83       	std	Y+2, r25	; 0x02
    235c:	89 83       	std	Y+1, r24	; 0x01
    235e:	89 81       	ldd	r24, Y+1	; 0x01
    2360:	9a 81       	ldd	r25, Y+2	; 0x02
    2362:	01 97       	sbiw	r24, 0x01	; 1
    2364:	f1 f7       	brne	.-4      	; 0x2362 <main+0x576>
    2366:	9a 83       	std	Y+2, r25	; 0x02
    2368:	89 83       	std	Y+1, r24	; 0x01



		if(APP_u8SentUARTMode==Autonomous_Mode)
		{
			while((APP_u8SentUARTMode==Autonomous_Mode)&&(Local_PasswordIsCorrect==1))
    236a:	80 91 ba 00 	lds	r24, 0x00BA
    236e:	81 34       	cpi	r24, 0x41	; 65
    2370:	29 f4       	brne	.+10     	; 0x237c <main+0x590>
    2372:	80 91 bd 00 	lds	r24, 0x00BD
    2376:	81 30       	cpi	r24, 0x01	; 1
    2378:	09 f4       	brne	.+2      	; 0x237c <main+0x590>
    237a:	00 cf       	rjmp	.-512    	; 0x217c <main+0x390>
					_delay_ms(1000);
				}

			}

			if(Local_PasswordIsCorrect==0)
    237c:	80 91 bd 00 	lds	r24, 0x00BD
    2380:	88 23       	and	r24, r24
    2382:	09 f0       	breq	.+2      	; 0x2386 <main+0x59a>
    2384:	a7 cd       	rjmp	.-1202   	; 0x1ed4 <main+0xe8>
			{
				Fan_OFF();
    2386:	0e 94 23 12 	call	0x2446	; 0x2446 <Fan_OFF>
				Lamp_OFF();
    238a:	0e 94 0b 12 	call	0x2416	; 0x2416 <Lamp_OFF>
    238e:	a2 cd       	rjmp	.-1212   	; 0x1ed4 <main+0xe8>
			}


		}
		else if(APP_u8SentUARTMode==Manual_Mode)
    2390:	80 91 ba 00 	lds	r24, 0x00BA
    2394:	82 34       	cpi	r24, 0x42	; 66
    2396:	71 f5       	brne	.+92     	; 0x23f4 <main+0x608>
    2398:	1b c0       	rjmp	.+54     	; 0x23d0 <main+0x5e4>
		{
			while((APP_u8SentUARTMode==Manual_Mode)&&(Local_PasswordIsCorrect==1))
			{

				if(APP_u8SentUARTManualAction==Manual_Mode_LampOn)
    239a:	80 91 bb 00 	lds	r24, 0x00BB
    239e:	83 34       	cpi	r24, 0x43	; 67
    23a0:	19 f4       	brne	.+6      	; 0x23a8 <main+0x5bc>
				{
					Lamp_On();
    23a2:	0e 94 ff 11 	call	0x23fe	; 0x23fe <Lamp_On>
    23a6:	14 c0       	rjmp	.+40     	; 0x23d0 <main+0x5e4>

				}
				else if(APP_u8SentUARTManualAction==Manual_Mode_LampOFF)
    23a8:	80 91 bb 00 	lds	r24, 0x00BB
    23ac:	84 34       	cpi	r24, 0x44	; 68
    23ae:	19 f4       	brne	.+6      	; 0x23b6 <main+0x5ca>
				{
					Lamp_OFF();
    23b0:	0e 94 0b 12 	call	0x2416	; 0x2416 <Lamp_OFF>
    23b4:	0d c0       	rjmp	.+26     	; 0x23d0 <main+0x5e4>

				}
				else if(APP_u8SentUARTManualAction==Manual_Mode_FanOn)
    23b6:	80 91 bb 00 	lds	r24, 0x00BB
    23ba:	85 34       	cpi	r24, 0x45	; 69
    23bc:	19 f4       	brne	.+6      	; 0x23c4 <main+0x5d8>
				{
					Fan_On();
    23be:	0e 94 17 12 	call	0x242e	; 0x242e <Fan_On>
    23c2:	06 c0       	rjmp	.+12     	; 0x23d0 <main+0x5e4>

				}
				else if(APP_u8SentUARTManualAction==Manual_Mode_FanOFF)
    23c4:	80 91 bb 00 	lds	r24, 0x00BB
    23c8:	86 34       	cpi	r24, 0x46	; 70
    23ca:	11 f4       	brne	.+4      	; 0x23d0 <main+0x5e4>
				{
					Fan_OFF();
    23cc:	0e 94 23 12 	call	0x2446	; 0x2446 <Fan_OFF>


		}
		else if(APP_u8SentUARTMode==Manual_Mode)
		{
			while((APP_u8SentUARTMode==Manual_Mode)&&(Local_PasswordIsCorrect==1))
    23d0:	80 91 ba 00 	lds	r24, 0x00BA
    23d4:	82 34       	cpi	r24, 0x42	; 66
    23d6:	21 f4       	brne	.+8      	; 0x23e0 <main+0x5f4>
    23d8:	80 91 bd 00 	lds	r24, 0x00BD
    23dc:	81 30       	cpi	r24, 0x01	; 1
    23de:	e9 f2       	breq	.-70     	; 0x239a <main+0x5ae>
				}


			}

			if(Local_PasswordIsCorrect==0)
    23e0:	80 91 bd 00 	lds	r24, 0x00BD
    23e4:	88 23       	and	r24, r24
    23e6:	09 f0       	breq	.+2      	; 0x23ea <main+0x5fe>
    23e8:	75 cd       	rjmp	.-1302   	; 0x1ed4 <main+0xe8>
			{
				Fan_OFF();
    23ea:	0e 94 23 12 	call	0x2446	; 0x2446 <Fan_OFF>
				Lamp_OFF();
    23ee:	0e 94 0b 12 	call	0x2416	; 0x2416 <Lamp_OFF>
    23f2:	70 cd       	rjmp	.-1312   	; 0x1ed4 <main+0xe8>

		}

		else
		{
			Fan_OFF();
    23f4:	0e 94 23 12 	call	0x2446	; 0x2446 <Fan_OFF>
			Lamp_OFF();
    23f8:	0e 94 0b 12 	call	0x2416	; 0x2416 <Lamp_OFF>
    23fc:	6b cd       	rjmp	.-1322   	; 0x1ed4 <main+0xe8>

000023fe <Lamp_On>:
}



void Lamp_On (void)
{
    23fe:	df 93       	push	r29
    2400:	cf 93       	push	r28
    2402:	cd b7       	in	r28, 0x3d	; 61
    2404:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue(DIO_u8PORTB,DIO_u8PIN4,DIO_u8PIN_HIGH);
    2406:	82 e0       	ldi	r24, 0x02	; 2
    2408:	64 e0       	ldi	r22, 0x04	; 4
    240a:	41 e0       	ldi	r20, 0x01	; 1
    240c:	0e 94 19 08 	call	0x1032	; 0x1032 <DIO_voidSetPinValue>
}
    2410:	cf 91       	pop	r28
    2412:	df 91       	pop	r29
    2414:	08 95       	ret

00002416 <Lamp_OFF>:

void Lamp_OFF(void)
{
    2416:	df 93       	push	r29
    2418:	cf 93       	push	r28
    241a:	cd b7       	in	r28, 0x3d	; 61
    241c:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue(DIO_u8PORTB,DIO_u8PIN4,DIO_u8PIN_LOW);
    241e:	82 e0       	ldi	r24, 0x02	; 2
    2420:	64 e0       	ldi	r22, 0x04	; 4
    2422:	40 e0       	ldi	r20, 0x00	; 0
    2424:	0e 94 19 08 	call	0x1032	; 0x1032 <DIO_voidSetPinValue>
}
    2428:	cf 91       	pop	r28
    242a:	df 91       	pop	r29
    242c:	08 95       	ret

0000242e <Fan_On>:
void Fan_On (void)
{
    242e:	df 93       	push	r29
    2430:	cf 93       	push	r28
    2432:	cd b7       	in	r28, 0x3d	; 61
    2434:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue(DIO_u8PORTB,DIO_u8PIN5,DIO_u8PIN_HIGH);
    2436:	82 e0       	ldi	r24, 0x02	; 2
    2438:	65 e0       	ldi	r22, 0x05	; 5
    243a:	41 e0       	ldi	r20, 0x01	; 1
    243c:	0e 94 19 08 	call	0x1032	; 0x1032 <DIO_voidSetPinValue>
}
    2440:	cf 91       	pop	r28
    2442:	df 91       	pop	r29
    2444:	08 95       	ret

00002446 <Fan_OFF>:
void Fan_OFF (void)
{
    2446:	df 93       	push	r29
    2448:	cf 93       	push	r28
    244a:	cd b7       	in	r28, 0x3d	; 61
    244c:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue(DIO_u8PORTB,DIO_u8PIN5,DIO_u8PIN_LOW);
    244e:	82 e0       	ldi	r24, 0x02	; 2
    2450:	65 e0       	ldi	r22, 0x05	; 5
    2452:	40 e0       	ldi	r20, 0x00	; 0
    2454:	0e 94 19 08 	call	0x1032	; 0x1032 <DIO_voidSetPinValue>
}
    2458:	cf 91       	pop	r28
    245a:	df 91       	pop	r29
    245c:	08 95       	ret

0000245e <IR_SystemON_OFF>:


void IR_SystemON_OFF(void)
{
    245e:	df 93       	push	r29
    2460:	cf 93       	push	r28
    2462:	cd b7       	in	r28, 0x3d	; 61
    2464:	de b7       	in	r29, 0x3e	; 62
    2466:	2f 97       	sbiw	r28, 0x0f	; 15
    2468:	0f b6       	in	r0, 0x3f	; 63
    246a:	f8 94       	cli
    246c:	de bf       	out	0x3e, r29	; 62
    246e:	0f be       	out	0x3f, r0	; 63
    2470:	cd bf       	out	0x3d, r28	; 61
    2472:	80 e0       	ldi	r24, 0x00	; 0
    2474:	90 e0       	ldi	r25, 0x00	; 0
    2476:	a0 e2       	ldi	r26, 0x20	; 32
    2478:	b1 e4       	ldi	r27, 0x41	; 65
    247a:	8b 87       	std	Y+11, r24	; 0x0b
    247c:	9c 87       	std	Y+12, r25	; 0x0c
    247e:	ad 87       	std	Y+13, r26	; 0x0d
    2480:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2482:	6b 85       	ldd	r22, Y+11	; 0x0b
    2484:	7c 85       	ldd	r23, Y+12	; 0x0c
    2486:	8d 85       	ldd	r24, Y+13	; 0x0d
    2488:	9e 85       	ldd	r25, Y+14	; 0x0e
    248a:	20 e0       	ldi	r18, 0x00	; 0
    248c:	30 e0       	ldi	r19, 0x00	; 0
    248e:	4a ef       	ldi	r20, 0xFA	; 250
    2490:	54 e4       	ldi	r21, 0x44	; 68
    2492:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2496:	dc 01       	movw	r26, r24
    2498:	cb 01       	movw	r24, r22
    249a:	8f 83       	std	Y+7, r24	; 0x07
    249c:	98 87       	std	Y+8, r25	; 0x08
    249e:	a9 87       	std	Y+9, r26	; 0x09
    24a0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24a2:	6f 81       	ldd	r22, Y+7	; 0x07
    24a4:	78 85       	ldd	r23, Y+8	; 0x08
    24a6:	89 85       	ldd	r24, Y+9	; 0x09
    24a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    24aa:	20 e0       	ldi	r18, 0x00	; 0
    24ac:	30 e0       	ldi	r19, 0x00	; 0
    24ae:	40 e8       	ldi	r20, 0x80	; 128
    24b0:	5f e3       	ldi	r21, 0x3F	; 63
    24b2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24b6:	88 23       	and	r24, r24
    24b8:	2c f4       	brge	.+10     	; 0x24c4 <IR_SystemON_OFF+0x66>
		__ticks = 1;
    24ba:	81 e0       	ldi	r24, 0x01	; 1
    24bc:	90 e0       	ldi	r25, 0x00	; 0
    24be:	9e 83       	std	Y+6, r25	; 0x06
    24c0:	8d 83       	std	Y+5, r24	; 0x05
    24c2:	3f c0       	rjmp	.+126    	; 0x2542 <IR_SystemON_OFF+0xe4>
	else if (__tmp > 65535)
    24c4:	6f 81       	ldd	r22, Y+7	; 0x07
    24c6:	78 85       	ldd	r23, Y+8	; 0x08
    24c8:	89 85       	ldd	r24, Y+9	; 0x09
    24ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    24cc:	20 e0       	ldi	r18, 0x00	; 0
    24ce:	3f ef       	ldi	r19, 0xFF	; 255
    24d0:	4f e7       	ldi	r20, 0x7F	; 127
    24d2:	57 e4       	ldi	r21, 0x47	; 71
    24d4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24d8:	18 16       	cp	r1, r24
    24da:	4c f5       	brge	.+82     	; 0x252e <IR_SystemON_OFF+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    24de:	7c 85       	ldd	r23, Y+12	; 0x0c
    24e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    24e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    24e4:	20 e0       	ldi	r18, 0x00	; 0
    24e6:	30 e0       	ldi	r19, 0x00	; 0
    24e8:	40 e2       	ldi	r20, 0x20	; 32
    24ea:	51 e4       	ldi	r21, 0x41	; 65
    24ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24f0:	dc 01       	movw	r26, r24
    24f2:	cb 01       	movw	r24, r22
    24f4:	bc 01       	movw	r22, r24
    24f6:	cd 01       	movw	r24, r26
    24f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24fc:	dc 01       	movw	r26, r24
    24fe:	cb 01       	movw	r24, r22
    2500:	9e 83       	std	Y+6, r25	; 0x06
    2502:	8d 83       	std	Y+5, r24	; 0x05
    2504:	0f c0       	rjmp	.+30     	; 0x2524 <IR_SystemON_OFF+0xc6>
    2506:	88 ec       	ldi	r24, 0xC8	; 200
    2508:	90 e0       	ldi	r25, 0x00	; 0
    250a:	9c 83       	std	Y+4, r25	; 0x04
    250c:	8b 83       	std	Y+3, r24	; 0x03
    250e:	8b 81       	ldd	r24, Y+3	; 0x03
    2510:	9c 81       	ldd	r25, Y+4	; 0x04
    2512:	01 97       	sbiw	r24, 0x01	; 1
    2514:	f1 f7       	brne	.-4      	; 0x2512 <IR_SystemON_OFF+0xb4>
    2516:	9c 83       	std	Y+4, r25	; 0x04
    2518:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    251a:	8d 81       	ldd	r24, Y+5	; 0x05
    251c:	9e 81       	ldd	r25, Y+6	; 0x06
    251e:	01 97       	sbiw	r24, 0x01	; 1
    2520:	9e 83       	std	Y+6, r25	; 0x06
    2522:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2524:	8d 81       	ldd	r24, Y+5	; 0x05
    2526:	9e 81       	ldd	r25, Y+6	; 0x06
    2528:	00 97       	sbiw	r24, 0x00	; 0
    252a:	69 f7       	brne	.-38     	; 0x2506 <IR_SystemON_OFF+0xa8>
    252c:	14 c0       	rjmp	.+40     	; 0x2556 <IR_SystemON_OFF+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    252e:	6f 81       	ldd	r22, Y+7	; 0x07
    2530:	78 85       	ldd	r23, Y+8	; 0x08
    2532:	89 85       	ldd	r24, Y+9	; 0x09
    2534:	9a 85       	ldd	r25, Y+10	; 0x0a
    2536:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    253a:	dc 01       	movw	r26, r24
    253c:	cb 01       	movw	r24, r22
    253e:	9e 83       	std	Y+6, r25	; 0x06
    2540:	8d 83       	std	Y+5, r24	; 0x05
    2542:	8d 81       	ldd	r24, Y+5	; 0x05
    2544:	9e 81       	ldd	r25, Y+6	; 0x06
    2546:	9a 83       	std	Y+2, r25	; 0x02
    2548:	89 83       	std	Y+1, r24	; 0x01
    254a:	89 81       	ldd	r24, Y+1	; 0x01
    254c:	9a 81       	ldd	r25, Y+2	; 0x02
    254e:	01 97       	sbiw	r24, 0x01	; 1
    2550:	f1 f7       	brne	.-4      	; 0x254e <IR_SystemON_OFF+0xf0>
    2552:	9a 83       	std	Y+2, r25	; 0x02
    2554:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	u8 Local_u8IRData=DIO_u8GetPinValue(DIO_u8PORTD,DIO_u8PIN2);
    2556:	84 e0       	ldi	r24, 0x04	; 4
    2558:	62 e0       	ldi	r22, 0x02	; 2
    255a:	0e 94 61 09 	call	0x12c2	; 0x12c2 <DIO_u8GetPinValue>
    255e:	8f 87       	std	Y+15, r24	; 0x0f
	if(Local_u8IRData==DIO_u8PIN_HIGH)
    2560:	8f 85       	ldd	r24, Y+15	; 0x0f
    2562:	81 30       	cpi	r24, 0x01	; 1
    2564:	19 f4       	brne	.+6      	; 0x256c <IR_SystemON_OFF+0x10e>
	 {
 LCD_voidClear();
    2566:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <LCD_voidClear>
    256a:	0b c0       	rjmp	.+22     	; 0x2582 <IR_SystemON_OFF+0x124>
	 }
	else if(Local_u8IRData==DIO_u8PIN_LOW)
    256c:	8f 85       	ldd	r24, Y+15	; 0x0f
    256e:	88 23       	and	r24, r24
    2570:	41 f4       	brne	.+16     	; 0x2582 <IR_SystemON_OFF+0x124>
	 {
	/*Re-entering the password*/
     Local_u8ElementsEntered=0;
    2572:	10 92 bc 00 	sts	0x00BC, r1
     Local_PasswordIsCorrect=0;
    2576:	10 92 bd 00 	sts	0x00BD, r1

     /*Reseting the UART mode*/
     APP_u8SentUARTMode=NULL;
    257a:	10 92 ba 00 	sts	0x00BA, r1
     APP_u8SentUARTManualAction=NULL;
    257e:	10 92 bb 00 	sts	0x00BB, r1
	 }

}
    2582:	2f 96       	adiw	r28, 0x0f	; 15
    2584:	0f b6       	in	r0, 0x3f	; 63
    2586:	f8 94       	cli
    2588:	de bf       	out	0x3e, r29	; 62
    258a:	0f be       	out	0x3f, r0	; 63
    258c:	cd bf       	out	0x3d, r28	; 61
    258e:	cf 91       	pop	r28
    2590:	df 91       	pop	r29
    2592:	08 95       	ret

00002594 <LM35TempCalculations>:



u8 LM35TempCalculations (void)
{
    2594:	df 93       	push	r29
    2596:	cf 93       	push	r28
    2598:	00 d0       	rcall	.+0      	; 0x259a <LM35TempCalculations+0x6>
    259a:	0f 92       	push	r0
    259c:	cd b7       	in	r28, 0x3d	; 61
    259e:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8DigitalChannelRead=ADC_u8GetChannelReadSynch(7);
    25a0:	87 e0       	ldi	r24, 0x07	; 7
    25a2:	0e 94 db 05 	call	0xbb6	; 0xbb6 <ADC_u8GetChannelReadSynch>
    25a6:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_AnalogValue_millivolt=((u32)Local_u8DigitalChannelRead*5000UL)/256UL;
    25a8:	8b 81       	ldd	r24, Y+3	; 0x03
    25aa:	88 2f       	mov	r24, r24
    25ac:	90 e0       	ldi	r25, 0x00	; 0
    25ae:	a0 e0       	ldi	r26, 0x00	; 0
    25b0:	b0 e0       	ldi	r27, 0x00	; 0
    25b2:	28 e8       	ldi	r18, 0x88	; 136
    25b4:	33 e1       	ldi	r19, 0x13	; 19
    25b6:	40 e0       	ldi	r20, 0x00	; 0
    25b8:	50 e0       	ldi	r21, 0x00	; 0
    25ba:	bc 01       	movw	r22, r24
    25bc:	cd 01       	movw	r24, r26
    25be:	0e 94 47 13 	call	0x268e	; 0x268e <__mulsi3>
    25c2:	dc 01       	movw	r26, r24
    25c4:	cb 01       	movw	r24, r22
    25c6:	89 2f       	mov	r24, r25
    25c8:	9a 2f       	mov	r25, r26
    25ca:	ab 2f       	mov	r26, r27
    25cc:	bb 27       	eor	r27, r27
    25ce:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_TempretureReading=Local_AnalogValue_millivolt/10;
    25d0:	8a 81       	ldd	r24, Y+2	; 0x02
    25d2:	9a e0       	ldi	r25, 0x0A	; 10
    25d4:	69 2f       	mov	r22, r25
    25d6:	0e 94 66 13 	call	0x26cc	; 0x26cc <__udivmodqi4>
    25da:	89 83       	std	Y+1, r24	; 0x01
  // LCD_voidWriteNum(Local_TempretureReading);
	return Local_TempretureReading;
    25dc:	89 81       	ldd	r24, Y+1	; 0x01
}
    25de:	0f 90       	pop	r0
    25e0:	0f 90       	pop	r0
    25e2:	0f 90       	pop	r0
    25e4:	cf 91       	pop	r28
    25e6:	df 91       	pop	r29
    25e8:	08 95       	ret

000025ea <__vector_13>:



void __vector_13(void) __attribute__((signal));
void __vector_13(void)
{
    25ea:	1f 92       	push	r1
    25ec:	0f 92       	push	r0
    25ee:	0f b6       	in	r0, 0x3f	; 63
    25f0:	0f 92       	push	r0
    25f2:	11 24       	eor	r1, r1
    25f4:	2f 93       	push	r18
    25f6:	3f 93       	push	r19
    25f8:	4f 93       	push	r20
    25fa:	5f 93       	push	r21
    25fc:	6f 93       	push	r22
    25fe:	7f 93       	push	r23
    2600:	8f 93       	push	r24
    2602:	9f 93       	push	r25
    2604:	af 93       	push	r26
    2606:	bf 93       	push	r27
    2608:	ef 93       	push	r30
    260a:	ff 93       	push	r31
    260c:	df 93       	push	r29
    260e:	cf 93       	push	r28
    2610:	0f 92       	push	r0
    2612:	cd b7       	in	r28, 0x3d	; 61
    2614:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8SentUARTData=UART_u8Recieve();
    2616:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <UART_u8Recieve>
    261a:	89 83       	std	Y+1, r24	; 0x01

	if((Local_PasswordIsCorrect==1)&&((Local_u8SentUARTData==Autonomous_Mode)||(Local_u8SentUARTData==Manual_Mode)))
    261c:	80 91 bd 00 	lds	r24, 0x00BD
    2620:	81 30       	cpi	r24, 0x01	; 1
    2622:	51 f4       	brne	.+20     	; 0x2638 <__vector_13+0x4e>
    2624:	89 81       	ldd	r24, Y+1	; 0x01
    2626:	81 34       	cpi	r24, 0x41	; 65
    2628:	19 f0       	breq	.+6      	; 0x2630 <__vector_13+0x46>
    262a:	89 81       	ldd	r24, Y+1	; 0x01
    262c:	82 34       	cpi	r24, 0x42	; 66
    262e:	21 f4       	brne	.+8      	; 0x2638 <__vector_13+0x4e>
	{
		APP_u8SentUARTMode=Local_u8SentUARTData;
    2630:	89 81       	ldd	r24, Y+1	; 0x01
    2632:	80 93 ba 00 	sts	0x00BA, r24
    2636:	17 c0       	rjmp	.+46     	; 0x2666 <__vector_13+0x7c>
	}

	else if ((Local_PasswordIsCorrect==1)&&(APP_u8SentUARTMode==Manual_Mode)&&
    2638:	80 91 bd 00 	lds	r24, 0x00BD
    263c:	81 30       	cpi	r24, 0x01	; 1
    263e:	99 f4       	brne	.+38     	; 0x2666 <__vector_13+0x7c>
    2640:	80 91 ba 00 	lds	r24, 0x00BA
    2644:	82 34       	cpi	r24, 0x42	; 66
    2646:	79 f4       	brne	.+30     	; 0x2666 <__vector_13+0x7c>
    2648:	89 81       	ldd	r24, Y+1	; 0x01
    264a:	83 34       	cpi	r24, 0x43	; 67
    264c:	49 f0       	breq	.+18     	; 0x2660 <__vector_13+0x76>
    264e:	89 81       	ldd	r24, Y+1	; 0x01
    2650:	84 34       	cpi	r24, 0x44	; 68
    2652:	31 f0       	breq	.+12     	; 0x2660 <__vector_13+0x76>
    2654:	89 81       	ldd	r24, Y+1	; 0x01
    2656:	85 34       	cpi	r24, 0x45	; 69
    2658:	19 f0       	breq	.+6      	; 0x2660 <__vector_13+0x76>
    265a:	89 81       	ldd	r24, Y+1	; 0x01
    265c:	86 34       	cpi	r24, 0x46	; 70
    265e:	19 f4       	brne	.+6      	; 0x2666 <__vector_13+0x7c>
			((Local_u8SentUARTData==Manual_Mode_LampOn)||(Local_u8SentUARTData==Manual_Mode_LampOFF)||
			(Local_u8SentUARTData==Manual_Mode_FanOn)||(Local_u8SentUARTData==Manual_Mode_FanOFF)))
	{
		APP_u8SentUARTManualAction=Local_u8SentUARTData;
    2660:	89 81       	ldd	r24, Y+1	; 0x01
    2662:	80 93 bb 00 	sts	0x00BB, r24
	{
		/*Do nothing*/

	}

}
    2666:	0f 90       	pop	r0
    2668:	cf 91       	pop	r28
    266a:	df 91       	pop	r29
    266c:	ff 91       	pop	r31
    266e:	ef 91       	pop	r30
    2670:	bf 91       	pop	r27
    2672:	af 91       	pop	r26
    2674:	9f 91       	pop	r25
    2676:	8f 91       	pop	r24
    2678:	7f 91       	pop	r23
    267a:	6f 91       	pop	r22
    267c:	5f 91       	pop	r21
    267e:	4f 91       	pop	r20
    2680:	3f 91       	pop	r19
    2682:	2f 91       	pop	r18
    2684:	0f 90       	pop	r0
    2686:	0f be       	out	0x3f, r0	; 63
    2688:	0f 90       	pop	r0
    268a:	1f 90       	pop	r1
    268c:	18 95       	reti

0000268e <__mulsi3>:
    268e:	62 9f       	mul	r22, r18
    2690:	d0 01       	movw	r26, r0
    2692:	73 9f       	mul	r23, r19
    2694:	f0 01       	movw	r30, r0
    2696:	82 9f       	mul	r24, r18
    2698:	e0 0d       	add	r30, r0
    269a:	f1 1d       	adc	r31, r1
    269c:	64 9f       	mul	r22, r20
    269e:	e0 0d       	add	r30, r0
    26a0:	f1 1d       	adc	r31, r1
    26a2:	92 9f       	mul	r25, r18
    26a4:	f0 0d       	add	r31, r0
    26a6:	83 9f       	mul	r24, r19
    26a8:	f0 0d       	add	r31, r0
    26aa:	74 9f       	mul	r23, r20
    26ac:	f0 0d       	add	r31, r0
    26ae:	65 9f       	mul	r22, r21
    26b0:	f0 0d       	add	r31, r0
    26b2:	99 27       	eor	r25, r25
    26b4:	72 9f       	mul	r23, r18
    26b6:	b0 0d       	add	r27, r0
    26b8:	e1 1d       	adc	r30, r1
    26ba:	f9 1f       	adc	r31, r25
    26bc:	63 9f       	mul	r22, r19
    26be:	b0 0d       	add	r27, r0
    26c0:	e1 1d       	adc	r30, r1
    26c2:	f9 1f       	adc	r31, r25
    26c4:	bd 01       	movw	r22, r26
    26c6:	cf 01       	movw	r24, r30
    26c8:	11 24       	eor	r1, r1
    26ca:	08 95       	ret

000026cc <__udivmodqi4>:
    26cc:	99 1b       	sub	r25, r25
    26ce:	79 e0       	ldi	r23, 0x09	; 9
    26d0:	04 c0       	rjmp	.+8      	; 0x26da <__udivmodqi4_ep>

000026d2 <__udivmodqi4_loop>:
    26d2:	99 1f       	adc	r25, r25
    26d4:	96 17       	cp	r25, r22
    26d6:	08 f0       	brcs	.+2      	; 0x26da <__udivmodqi4_ep>
    26d8:	96 1b       	sub	r25, r22

000026da <__udivmodqi4_ep>:
    26da:	88 1f       	adc	r24, r24
    26dc:	7a 95       	dec	r23
    26de:	c9 f7       	brne	.-14     	; 0x26d2 <__udivmodqi4_loop>
    26e0:	80 95       	com	r24
    26e2:	08 95       	ret

000026e4 <__udivmodsi4>:
    26e4:	a1 e2       	ldi	r26, 0x21	; 33
    26e6:	1a 2e       	mov	r1, r26
    26e8:	aa 1b       	sub	r26, r26
    26ea:	bb 1b       	sub	r27, r27
    26ec:	fd 01       	movw	r30, r26
    26ee:	0d c0       	rjmp	.+26     	; 0x270a <__udivmodsi4_ep>

000026f0 <__udivmodsi4_loop>:
    26f0:	aa 1f       	adc	r26, r26
    26f2:	bb 1f       	adc	r27, r27
    26f4:	ee 1f       	adc	r30, r30
    26f6:	ff 1f       	adc	r31, r31
    26f8:	a2 17       	cp	r26, r18
    26fa:	b3 07       	cpc	r27, r19
    26fc:	e4 07       	cpc	r30, r20
    26fe:	f5 07       	cpc	r31, r21
    2700:	20 f0       	brcs	.+8      	; 0x270a <__udivmodsi4_ep>
    2702:	a2 1b       	sub	r26, r18
    2704:	b3 0b       	sbc	r27, r19
    2706:	e4 0b       	sbc	r30, r20
    2708:	f5 0b       	sbc	r31, r21

0000270a <__udivmodsi4_ep>:
    270a:	66 1f       	adc	r22, r22
    270c:	77 1f       	adc	r23, r23
    270e:	88 1f       	adc	r24, r24
    2710:	99 1f       	adc	r25, r25
    2712:	1a 94       	dec	r1
    2714:	69 f7       	brne	.-38     	; 0x26f0 <__udivmodsi4_loop>
    2716:	60 95       	com	r22
    2718:	70 95       	com	r23
    271a:	80 95       	com	r24
    271c:	90 95       	com	r25
    271e:	9b 01       	movw	r18, r22
    2720:	ac 01       	movw	r20, r24
    2722:	bd 01       	movw	r22, r26
    2724:	cf 01       	movw	r24, r30
    2726:	08 95       	ret

00002728 <__prologue_saves__>:
    2728:	2f 92       	push	r2
    272a:	3f 92       	push	r3
    272c:	4f 92       	push	r4
    272e:	5f 92       	push	r5
    2730:	6f 92       	push	r6
    2732:	7f 92       	push	r7
    2734:	8f 92       	push	r8
    2736:	9f 92       	push	r9
    2738:	af 92       	push	r10
    273a:	bf 92       	push	r11
    273c:	cf 92       	push	r12
    273e:	df 92       	push	r13
    2740:	ef 92       	push	r14
    2742:	ff 92       	push	r15
    2744:	0f 93       	push	r16
    2746:	1f 93       	push	r17
    2748:	cf 93       	push	r28
    274a:	df 93       	push	r29
    274c:	cd b7       	in	r28, 0x3d	; 61
    274e:	de b7       	in	r29, 0x3e	; 62
    2750:	ca 1b       	sub	r28, r26
    2752:	db 0b       	sbc	r29, r27
    2754:	0f b6       	in	r0, 0x3f	; 63
    2756:	f8 94       	cli
    2758:	de bf       	out	0x3e, r29	; 62
    275a:	0f be       	out	0x3f, r0	; 63
    275c:	cd bf       	out	0x3d, r28	; 61
    275e:	09 94       	ijmp

00002760 <__epilogue_restores__>:
    2760:	2a 88       	ldd	r2, Y+18	; 0x12
    2762:	39 88       	ldd	r3, Y+17	; 0x11
    2764:	48 88       	ldd	r4, Y+16	; 0x10
    2766:	5f 84       	ldd	r5, Y+15	; 0x0f
    2768:	6e 84       	ldd	r6, Y+14	; 0x0e
    276a:	7d 84       	ldd	r7, Y+13	; 0x0d
    276c:	8c 84       	ldd	r8, Y+12	; 0x0c
    276e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2770:	aa 84       	ldd	r10, Y+10	; 0x0a
    2772:	b9 84       	ldd	r11, Y+9	; 0x09
    2774:	c8 84       	ldd	r12, Y+8	; 0x08
    2776:	df 80       	ldd	r13, Y+7	; 0x07
    2778:	ee 80       	ldd	r14, Y+6	; 0x06
    277a:	fd 80       	ldd	r15, Y+5	; 0x05
    277c:	0c 81       	ldd	r16, Y+4	; 0x04
    277e:	1b 81       	ldd	r17, Y+3	; 0x03
    2780:	aa 81       	ldd	r26, Y+2	; 0x02
    2782:	b9 81       	ldd	r27, Y+1	; 0x01
    2784:	ce 0f       	add	r28, r30
    2786:	d1 1d       	adc	r29, r1
    2788:	0f b6       	in	r0, 0x3f	; 63
    278a:	f8 94       	cli
    278c:	de bf       	out	0x3e, r29	; 62
    278e:	0f be       	out	0x3f, r0	; 63
    2790:	cd bf       	out	0x3d, r28	; 61
    2792:	ed 01       	movw	r28, r26
    2794:	08 95       	ret

00002796 <_exit>:
    2796:	f8 94       	cli

00002798 <__stop_program>:
    2798:	ff cf       	rjmp	.-2      	; 0x2798 <__stop_program>
