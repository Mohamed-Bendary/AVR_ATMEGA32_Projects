
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001bc4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00001bc4  00001c58  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800068  00800068  00001c60  2**0
                  ALLOC
  3 .stab         00001434  00000000  00000000  00001c60  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000cc8  00000000  00000000  00003094  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00003d5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00003e9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00005c55  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00006b40  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  000078f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00007a50  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00007cdd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000084ab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 95 06 	jmp	0xd2a	; 0xd2a <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a0 37       	cpi	r26, 0x70	; 112
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e4 ec       	ldi	r30, 0xC4	; 196
      78:	fb e1       	ldi	r31, 0x1B	; 27
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 c2 0c 	call	0x1984	; 0x1984 <main>
      8a:	0c 94 e0 0d 	jmp	0x1bc0	; 0x1bc0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 a9 0d 	jmp	0x1b52	; 0x1b52 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 c5 0d 	jmp	0x1b8a	; 0x1b8a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 b5 0d 	jmp	0x1b6a	; 0x1b6a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 d1 0d 	jmp	0x1ba2	; 0x1ba2 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 b5 0d 	jmp	0x1b6a	; 0x1b6a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 d1 0d 	jmp	0x1ba2	; 0x1ba2 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 a9 0d 	jmp	0x1b52	; 0x1b52 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 c5 0d 	jmp	0x1b8a	; 0x1b8a <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 b5 0d 	jmp	0x1b6a	; 0x1b6a <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 d1 0d 	jmp	0x1ba2	; 0x1ba2 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 b5 0d 	jmp	0x1b6a	; 0x1b6a <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 d1 0d 	jmp	0x1ba2	; 0x1ba2 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 b5 0d 	jmp	0x1b6a	; 0x1b6a <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 d1 0d 	jmp	0x1ba2	; 0x1ba2 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 b9 0d 	jmp	0x1b72	; 0x1b72 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 d5 0d 	jmp	0x1baa	; 0x1baa <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <ADC_voidADCInit>:
u8 *ADC_pu8PtrTo_ADCRead =NULL;


//initialize ADC
void ADC_voidADCInit(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	/*Choose the AVCC as a reference voltage*/
	SET_BIT(ADMUX,ADMUX_REFS0);
     b4e:	a7 e2       	ldi	r26, 0x27	; 39
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e7 e2       	ldi	r30, 0x27	; 39
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	80 64       	ori	r24, 0x40	; 64
     b5a:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,ADMUX_REFS1);
     b5c:	a7 e2       	ldi	r26, 0x27	; 39
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e7 e2       	ldi	r30, 0x27	; 39
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	8f 77       	andi	r24, 0x7F	; 127
     b68:	8c 93       	st	X, r24


	/*Enable the left adjust*/
	SET_BIT(ADMUX,ADMUX_ADLAR);
     b6a:	a7 e2       	ldi	r26, 0x27	; 39
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e7 e2       	ldi	r30, 0x27	; 39
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	80 62       	ori	r24, 0x20	; 32
     b76:	8c 93       	st	X, r24

	/*Set the prescalar of our 	ADC clock to 128(divide the 8MHZ by 128)*/
	SET_BIT(ADCSRA,ADCSRA_ADPS0);
     b78:	a6 e2       	ldi	r26, 0x26	; 38
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	e6 e2       	ldi	r30, 0x26	; 38
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	81 60       	ori	r24, 0x01	; 1
     b84:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADCSRA_ADPS1);
     b86:	a6 e2       	ldi	r26, 0x26	; 38
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	e6 e2       	ldi	r30, 0x26	; 38
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	82 60       	ori	r24, 0x02	; 2
     b92:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADCSRA_ADPS2);
     b94:	a6 e2       	ldi	r26, 0x26	; 38
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	e6 e2       	ldi	r30, 0x26	; 38
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	84 60       	ori	r24, 0x04	; 4
     ba0:	8c 93       	st	X, r24



	/*VIP NOTE:make the enabling of any peripheral the last step in the initializing*/
	/*Enable the ADC peripheral*/
	SET_BIT(ADCSRA,ADCSRA_ADEN);
     ba2:	a6 e2       	ldi	r26, 0x26	; 38
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	e6 e2       	ldi	r30, 0x26	; 38
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	80 81       	ld	r24, Z
     bac:	80 68       	ori	r24, 0x80	; 128
     bae:	8c 93       	st	X, r24
}
     bb0:	cf 91       	pop	r28
     bb2:	df 91       	pop	r29
     bb4:	08 95       	ret

00000bb6 <ADC_u8GetChannelReadSynch>:

/*Get the channel read,be careful that the channels is from 0 to 7*/
u8 ADC_u8GetChannelReadSynch(u8 copy_u8Channel)
{
     bb6:	df 93       	push	r29
     bb8:	cf 93       	push	r28
     bba:	00 d0       	rcall	.+0      	; 0xbbc <ADC_u8GetChannelReadSynch+0x6>
     bbc:	00 d0       	rcall	.+0      	; 0xbbe <ADC_u8GetChannelReadSynch+0x8>
     bbe:	00 d0       	rcall	.+0      	; 0xbc0 <ADC_u8GetChannelReadSynch+0xa>
     bc0:	cd b7       	in	r28, 0x3d	; 61
     bc2:	de b7       	in	r29, 0x3e	; 62
     bc4:	8d 83       	std	Y+5, r24	; 0x05
	u32 Local_u32Counter=0;
     bc6:	19 82       	std	Y+1, r1	; 0x01
     bc8:	1a 82       	std	Y+2, r1	; 0x02
     bca:	1b 82       	std	Y+3, r1	; 0x03
     bcc:	1c 82       	std	Y+4, r1	; 0x04
	/*Masking*/
	/*1-Clearing the required bits*/
	ADMUX &=0b11100000;
     bce:	a7 e2       	ldi	r26, 0x27	; 39
     bd0:	b0 e0       	ldi	r27, 0x00	; 0
     bd2:	e7 e2       	ldi	r30, 0x27	; 39
     bd4:	f0 e0       	ldi	r31, 0x00	; 0
     bd6:	80 81       	ld	r24, Z
     bd8:	80 7e       	andi	r24, 0xE0	; 224
     bda:	8c 93       	st	X, r24

	/*2- Set the required bits*/

	ADMUX |=copy_u8Channel;
     bdc:	a7 e2       	ldi	r26, 0x27	; 39
     bde:	b0 e0       	ldi	r27, 0x00	; 0
     be0:	e7 e2       	ldi	r30, 0x27	; 39
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	90 81       	ld	r25, Z
     be6:	8d 81       	ldd	r24, Y+5	; 0x05
     be8:	89 2b       	or	r24, r25
     bea:	8c 93       	st	X, r24

	/*Start the conversion*/
	SET_BIT(ADCSRA,ADCSRA_ADSC);
     bec:	a6 e2       	ldi	r26, 0x26	; 38
     bee:	b0 e0       	ldi	r27, 0x00	; 0
     bf0:	e6 e2       	ldi	r30, 0x26	; 38
     bf2:	f0 e0       	ldi	r31, 0x00	; 0
     bf4:	80 81       	ld	r24, Z
     bf6:	80 64       	ori	r24, 0x40	; 64
     bf8:	8c 93       	st	X, r24
     bfa:	0b c0       	rjmp	.+22     	; 0xc12 <ADC_u8GetChannelReadSynch+0x5c>

	/*polling(busy wait until the conversion is done when the flag is raised or when the ADC reach timout )*/
	while((GET_BIT(ADCSRA,ADCSRA_ADIF)==0)&&(Local_u32Counter<ADC_TIMEOUT))
	{
		Local_u32Counter++;
     bfc:	89 81       	ldd	r24, Y+1	; 0x01
     bfe:	9a 81       	ldd	r25, Y+2	; 0x02
     c00:	ab 81       	ldd	r26, Y+3	; 0x03
     c02:	bc 81       	ldd	r27, Y+4	; 0x04
     c04:	01 96       	adiw	r24, 0x01	; 1
     c06:	a1 1d       	adc	r26, r1
     c08:	b1 1d       	adc	r27, r1
     c0a:	89 83       	std	Y+1, r24	; 0x01
     c0c:	9a 83       	std	Y+2, r25	; 0x02
     c0e:	ab 83       	std	Y+3, r26	; 0x03
     c10:	bc 83       	std	Y+4, r27	; 0x04

	/*Start the conversion*/
	SET_BIT(ADCSRA,ADCSRA_ADSC);

	/*polling(busy wait until the conversion is done when the flag is raised or when the ADC reach timout )*/
	while((GET_BIT(ADCSRA,ADCSRA_ADIF)==0)&&(Local_u32Counter<ADC_TIMEOUT))
     c12:	e6 e2       	ldi	r30, 0x26	; 38
     c14:	f0 e0       	ldi	r31, 0x00	; 0
     c16:	80 81       	ld	r24, Z
     c18:	82 95       	swap	r24
     c1a:	8f 70       	andi	r24, 0x0F	; 15
     c1c:	88 2f       	mov	r24, r24
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	81 70       	andi	r24, 0x01	; 1
     c22:	90 70       	andi	r25, 0x00	; 0
     c24:	00 97       	sbiw	r24, 0x00	; 0
     c26:	61 f4       	brne	.+24     	; 0xc40 <ADC_u8GetChannelReadSynch+0x8a>
     c28:	89 81       	ldd	r24, Y+1	; 0x01
     c2a:	9a 81       	ldd	r25, Y+2	; 0x02
     c2c:	ab 81       	ldd	r26, Y+3	; 0x03
     c2e:	bc 81       	ldd	r27, Y+4	; 0x04
     c30:	80 36       	cpi	r24, 0x60	; 96
     c32:	2a ee       	ldi	r18, 0xEA	; 234
     c34:	92 07       	cpc	r25, r18
     c36:	20 e0       	ldi	r18, 0x00	; 0
     c38:	a2 07       	cpc	r26, r18
     c3a:	20 e0       	ldi	r18, 0x00	; 0
     c3c:	b2 07       	cpc	r27, r18
     c3e:	f0 f2       	brcs	.-68     	; 0xbfc <ADC_u8GetChannelReadSynch+0x46>
	{
		Local_u32Counter++;
	}

	if(Local_u32Counter==ADC_TIMEOUT)
     c40:	89 81       	ldd	r24, Y+1	; 0x01
     c42:	9a 81       	ldd	r25, Y+2	; 0x02
     c44:	ab 81       	ldd	r26, Y+3	; 0x03
     c46:	bc 81       	ldd	r27, Y+4	; 0x04
     c48:	80 36       	cpi	r24, 0x60	; 96
     c4a:	2a ee       	ldi	r18, 0xEA	; 234
     c4c:	92 07       	cpc	r25, r18
     c4e:	20 e0       	ldi	r18, 0x00	; 0
     c50:	a2 07       	cpc	r26, r18
     c52:	20 e0       	ldi	r18, 0x00	; 0
     c54:	b2 07       	cpc	r27, r18
     c56:	69 f0       	breq	.+26     	; 0xc72 <ADC_u8GetChannelReadSynch+0xbc>
	 * fel function ale hoa pointer 34an ab3atlo al ADCH or al ADCL
	 * 34an yet7ato fel holding variable*/
	}
	else{
	/*flag clearing*/
	SET_BIT(ADCSRA,ADCSRA_ADIF);
     c58:	a6 e2       	ldi	r26, 0x26	; 38
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	e6 e2       	ldi	r30, 0x26	; 38
     c5e:	f0 e0       	ldi	r31, 0x00	; 0
     c60:	80 81       	ld	r24, Z
     c62:	80 61       	ori	r24, 0x10	; 16
     c64:	8c 93       	st	X, r24

	/*Finally return the output of the analog to digital conversion which is ADCH because we enabled the left adjustment*/
	return ADCH;
     c66:	e5 e2       	ldi	r30, 0x25	; 37
     c68:	f0 e0       	ldi	r31, 0x00	; 0
     c6a:	80 81       	ld	r24, Z
     c6c:	8e 83       	std	Y+6, r24	; 0x06
	}
}
     c6e:	8e 81       	ldd	r24, Y+6	; 0x06
     c70:	00 c0       	rjmp	.+0      	; 0xc72 <ADC_u8GetChannelReadSynch+0xbc>
     c72:	26 96       	adiw	r28, 0x06	; 6
     c74:	0f b6       	in	r0, 0x3f	; 63
     c76:	f8 94       	cli
     c78:	de bf       	out	0x3e, r29	; 62
     c7a:	0f be       	out	0x3f, r0	; 63
     c7c:	cd bf       	out	0x3d, r28	; 61
     c7e:	cf 91       	pop	r28
     c80:	df 91       	pop	r29
     c82:	08 95       	ret

00000c84 <ADC_u8GetChannelReadAsynch>:



/*Get read function but in Asynch form*/
u8 ADC_u8GetChannelReadAsynch(u8 copy_u8Channel,void (*Copy_pvNotificationfunc) (void),u8 *Copy_pu8ADCRead)
{
     c84:	df 93       	push	r29
     c86:	cf 93       	push	r28
     c88:	00 d0       	rcall	.+0      	; 0xc8a <ADC_u8GetChannelReadAsynch+0x6>
     c8a:	00 d0       	rcall	.+0      	; 0xc8c <ADC_u8GetChannelReadAsynch+0x8>
     c8c:	00 d0       	rcall	.+0      	; 0xc8e <ADC_u8GetChannelReadAsynch+0xa>
     c8e:	cd b7       	in	r28, 0x3d	; 61
     c90:	de b7       	in	r29, 0x3e	; 62
     c92:	8a 83       	std	Y+2, r24	; 0x02
     c94:	7c 83       	std	Y+4, r23	; 0x04
     c96:	6b 83       	std	Y+3, r22	; 0x03
     c98:	5e 83       	std	Y+6, r21	; 0x06
     c9a:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorCode=OK;
     c9c:	81 e0       	ldi	r24, 0x01	; 1
     c9e:	89 83       	std	Y+1, r24	; 0x01
	/*chec; that the addres of the Notification func & the Addres of
	 * the ADC read holding variable are not = 0(NULL)*/
	if((Copy_pvNotificationfunc!=NULL)&&(Copy_pu8ADCRead!=NULL))
     ca0:	8b 81       	ldd	r24, Y+3	; 0x03
     ca2:	9c 81       	ldd	r25, Y+4	; 0x04
     ca4:	00 97       	sbiw	r24, 0x00	; 0
     ca6:	a9 f1       	breq	.+106    	; 0xd12 <ADC_u8GetChannelReadAsynch+0x8e>
     ca8:	8d 81       	ldd	r24, Y+5	; 0x05
     caa:	9e 81       	ldd	r25, Y+6	; 0x06
     cac:	00 97       	sbiw	r24, 0x00	; 0
     cae:	89 f1       	breq	.+98     	; 0xd12 <ADC_u8GetChannelReadAsynch+0x8e>
	{
		/*Put the addresses of the holding variable and the notifunction to
		 * the Globel pointers to be sent to the ISR function
		 * to excute the Notification function
		 * and to send the ADCH or the ADCL to the holding variable */
		ADC_pu8PtrTo_ADCRead=Copy_pu8ADCRead;
     cb0:	8d 81       	ldd	r24, Y+5	; 0x05
     cb2:	9e 81       	ldd	r25, Y+6	; 0x06
     cb4:	90 93 6b 00 	sts	0x006B, r25
     cb8:	80 93 6a 00 	sts	0x006A, r24
		ADC_PtrToNotificationFunc=Copy_pvNotificationfunc;
     cbc:	8b 81       	ldd	r24, Y+3	; 0x03
     cbe:	9c 81       	ldd	r25, Y+4	; 0x04
     cc0:	90 93 69 00 	sts	0x0069, r25
     cc4:	80 93 68 00 	sts	0x0068, r24

		/*Masking*/
		/*1-Clearing the required bits*/
		ADMUX &=0b11100000;
     cc8:	a7 e2       	ldi	r26, 0x27	; 39
     cca:	b0 e0       	ldi	r27, 0x00	; 0
     ccc:	e7 e2       	ldi	r30, 0x27	; 39
     cce:	f0 e0       	ldi	r31, 0x00	; 0
     cd0:	80 81       	ld	r24, Z
     cd2:	80 7e       	andi	r24, 0xE0	; 224
     cd4:	8c 93       	st	X, r24

		/*2- Set the required bits*/
		ADMUX |=copy_u8Channel;
     cd6:	a7 e2       	ldi	r26, 0x27	; 39
     cd8:	b0 e0       	ldi	r27, 0x00	; 0
     cda:	e7 e2       	ldi	r30, 0x27	; 39
     cdc:	f0 e0       	ldi	r31, 0x00	; 0
     cde:	90 81       	ld	r25, Z
     ce0:	8a 81       	ldd	r24, Y+2	; 0x02
     ce2:	89 2b       	or	r24, r25
     ce4:	8c 93       	st	X, r24

		/*Start the conversion*/
		SET_BIT(ADCSRA,ADCSRA_ADSC);
     ce6:	a6 e2       	ldi	r26, 0x26	; 38
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e6 e2       	ldi	r30, 0x26	; 38
     cec:	f0 e0       	ldi	r31, 0x00	; 0
     cee:	80 81       	ld	r24, Z
     cf0:	80 64       	ori	r24, 0x40	; 64
     cf2:	8c 93       	st	X, r24

		/*Enable the ADC Interrupt complete conversion
		 * Note that ADIF is raised when the ADC conversion is done*/
		SET_BIT(SREG,SREG_I);
     cf4:	af e5       	ldi	r26, 0x5F	; 95
     cf6:	b0 e0       	ldi	r27, 0x00	; 0
     cf8:	ef e5       	ldi	r30, 0x5F	; 95
     cfa:	f0 e0       	ldi	r31, 0x00	; 0
     cfc:	80 81       	ld	r24, Z
     cfe:	80 68       	ori	r24, 0x80	; 128
     d00:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,ADCSRA_ADIE);
     d02:	a6 e2       	ldi	r26, 0x26	; 38
     d04:	b0 e0       	ldi	r27, 0x00	; 0
     d06:	e6 e2       	ldi	r30, 0x26	; 38
     d08:	f0 e0       	ldi	r31, 0x00	; 0
     d0a:	80 81       	ld	r24, Z
     d0c:	88 60       	ori	r24, 0x08	; 8
     d0e:	8c 93       	st	X, r24
     d10:	02 c0       	rjmp	.+4      	; 0xd16 <ADC_u8GetChannelReadAsynch+0x92>
	}

	else
	{Local_u8ErrorCode=NOT_OK;}
     d12:	82 e0       	ldi	r24, 0x02	; 2
     d14:	89 83       	std	Y+1, r24	; 0x01

	return Local_u8ErrorCode;
     d16:	89 81       	ldd	r24, Y+1	; 0x01
}
     d18:	26 96       	adiw	r28, 0x06	; 6
     d1a:	0f b6       	in	r0, 0x3f	; 63
     d1c:	f8 94       	cli
     d1e:	de bf       	out	0x3e, r29	; 62
     d20:	0f be       	out	0x3f, r0	; 63
     d22:	cd bf       	out	0x3d, r28	; 61
     d24:	cf 91       	pop	r28
     d26:	df 91       	pop	r29
     d28:	08 95       	ret

00000d2a <__vector_16>:

/*ISR implementation*/

void __vector_16(void) __attribute__((signal));
void __vector_16(void)
{
     d2a:	1f 92       	push	r1
     d2c:	0f 92       	push	r0
     d2e:	0f b6       	in	r0, 0x3f	; 63
     d30:	0f 92       	push	r0
     d32:	11 24       	eor	r1, r1
     d34:	2f 93       	push	r18
     d36:	3f 93       	push	r19
     d38:	4f 93       	push	r20
     d3a:	5f 93       	push	r21
     d3c:	6f 93       	push	r22
     d3e:	7f 93       	push	r23
     d40:	8f 93       	push	r24
     d42:	9f 93       	push	r25
     d44:	af 93       	push	r26
     d46:	bf 93       	push	r27
     d48:	ef 93       	push	r30
     d4a:	ff 93       	push	r31
     d4c:	df 93       	push	r29
     d4e:	cf 93       	push	r28
     d50:	cd b7       	in	r28, 0x3d	; 61
     d52:	de b7       	in	r29, 0x3e	; 62
	/*send the ADC read to the Holding variable in the main.c*/
	*ADC_pu8PtrTo_ADCRead=ADCH;
     d54:	a0 91 6a 00 	lds	r26, 0x006A
     d58:	b0 91 6b 00 	lds	r27, 0x006B
     d5c:	e5 e2       	ldi	r30, 0x25	; 37
     d5e:	f0 e0       	ldi	r31, 0x00	; 0
     d60:	80 81       	ld	r24, Z
     d62:	8c 93       	st	X, r24
	/*Excute the notification function using the global ptr to func*/
	ADC_PtrToNotificationFunc();
     d64:	e0 91 68 00 	lds	r30, 0x0068
     d68:	f0 91 69 00 	lds	r31, 0x0069
     d6c:	09 95       	icall
	/*Extra: Disable the ADC interrupt for power consumption*/
	CLR_BIT(ADCSRA,ADCSRA_ADIE);
     d6e:	a6 e2       	ldi	r26, 0x26	; 38
     d70:	b0 e0       	ldi	r27, 0x00	; 0
     d72:	e6 e2       	ldi	r30, 0x26	; 38
     d74:	f0 e0       	ldi	r31, 0x00	; 0
     d76:	80 81       	ld	r24, Z
     d78:	87 7f       	andi	r24, 0xF7	; 247
     d7a:	8c 93       	st	X, r24
}
     d7c:	cf 91       	pop	r28
     d7e:	df 91       	pop	r29
     d80:	ff 91       	pop	r31
     d82:	ef 91       	pop	r30
     d84:	bf 91       	pop	r27
     d86:	af 91       	pop	r26
     d88:	9f 91       	pop	r25
     d8a:	8f 91       	pop	r24
     d8c:	7f 91       	pop	r23
     d8e:	6f 91       	pop	r22
     d90:	5f 91       	pop	r21
     d92:	4f 91       	pop	r20
     d94:	3f 91       	pop	r19
     d96:	2f 91       	pop	r18
     d98:	0f 90       	pop	r0
     d9a:	0f be       	out	0x3f, r0	; 63
     d9c:	0f 90       	pop	r0
     d9e:	1f 90       	pop	r1
     da0:	18 95       	reti

00000da2 <DIO_voidSetPinDirection>:
#include "DIO_interface.h"
#include "DIO_private.h"



void DIO_voidSetPinDirection(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8PinDirection){
     da2:	df 93       	push	r29
     da4:	cf 93       	push	r28
     da6:	cd b7       	in	r28, 0x3d	; 61
     da8:	de b7       	in	r29, 0x3e	; 62
     daa:	27 97       	sbiw	r28, 0x07	; 7
     dac:	0f b6       	in	r0, 0x3f	; 63
     dae:	f8 94       	cli
     db0:	de bf       	out	0x3e, r29	; 62
     db2:	0f be       	out	0x3f, r0	; 63
     db4:	cd bf       	out	0x3d, r28	; 61
     db6:	89 83       	std	Y+1, r24	; 0x01
     db8:	6a 83       	std	Y+2, r22	; 0x02
     dba:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8Pin<=DIO_u8PIN7){
     dbc:	8a 81       	ldd	r24, Y+2	; 0x02
     dbe:	88 30       	cpi	r24, 0x08	; 8
     dc0:	08 f0       	brcs	.+2      	; 0xdc4 <DIO_voidSetPinDirection+0x22>
     dc2:	ec c0       	rjmp	.+472    	; 0xf9c <DIO_voidSetPinDirection+0x1fa>
		if(Copy_u8PinDirection==DIO_u8PIN_INPUT){
     dc4:	8b 81       	ldd	r24, Y+3	; 0x03
     dc6:	88 23       	and	r24, r24
     dc8:	09 f0       	breq	.+2      	; 0xdcc <DIO_voidSetPinDirection+0x2a>
     dca:	75 c0       	rjmp	.+234    	; 0xeb6 <DIO_voidSetPinDirection+0x114>
			switch(Copy_u8Port)
     dcc:	89 81       	ldd	r24, Y+1	; 0x01
     dce:	28 2f       	mov	r18, r24
     dd0:	30 e0       	ldi	r19, 0x00	; 0
     dd2:	3f 83       	std	Y+7, r19	; 0x07
     dd4:	2e 83       	std	Y+6, r18	; 0x06
     dd6:	8e 81       	ldd	r24, Y+6	; 0x06
     dd8:	9f 81       	ldd	r25, Y+7	; 0x07
     dda:	82 30       	cpi	r24, 0x02	; 2
     ddc:	91 05       	cpc	r25, r1
     dde:	61 f1       	breq	.+88     	; 0xe38 <DIO_voidSetPinDirection+0x96>
     de0:	2e 81       	ldd	r18, Y+6	; 0x06
     de2:	3f 81       	ldd	r19, Y+7	; 0x07
     de4:	23 30       	cpi	r18, 0x03	; 3
     de6:	31 05       	cpc	r19, r1
     de8:	34 f4       	brge	.+12     	; 0xdf6 <DIO_voidSetPinDirection+0x54>
     dea:	8e 81       	ldd	r24, Y+6	; 0x06
     dec:	9f 81       	ldd	r25, Y+7	; 0x07
     dee:	81 30       	cpi	r24, 0x01	; 1
     df0:	91 05       	cpc	r25, r1
     df2:	69 f0       	breq	.+26     	; 0xe0e <DIO_voidSetPinDirection+0x6c>
     df4:	d3 c0       	rjmp	.+422    	; 0xf9c <DIO_voidSetPinDirection+0x1fa>
     df6:	2e 81       	ldd	r18, Y+6	; 0x06
     df8:	3f 81       	ldd	r19, Y+7	; 0x07
     dfa:	23 30       	cpi	r18, 0x03	; 3
     dfc:	31 05       	cpc	r19, r1
     dfe:	89 f1       	breq	.+98     	; 0xe62 <DIO_voidSetPinDirection+0xc0>
     e00:	8e 81       	ldd	r24, Y+6	; 0x06
     e02:	9f 81       	ldd	r25, Y+7	; 0x07
     e04:	84 30       	cpi	r24, 0x04	; 4
     e06:	91 05       	cpc	r25, r1
     e08:	09 f4       	brne	.+2      	; 0xe0c <DIO_voidSetPinDirection+0x6a>
     e0a:	40 c0       	rjmp	.+128    	; 0xe8c <DIO_voidSetPinDirection+0xea>
     e0c:	c7 c0       	rjmp	.+398    	; 0xf9c <DIO_voidSetPinDirection+0x1fa>
			{
			case DIO_u8PORTA: CLR_BIT(DDRA,Copy_u8Pin);break;
     e0e:	aa e3       	ldi	r26, 0x3A	; 58
     e10:	b0 e0       	ldi	r27, 0x00	; 0
     e12:	ea e3       	ldi	r30, 0x3A	; 58
     e14:	f0 e0       	ldi	r31, 0x00	; 0
     e16:	80 81       	ld	r24, Z
     e18:	48 2f       	mov	r20, r24
     e1a:	8a 81       	ldd	r24, Y+2	; 0x02
     e1c:	28 2f       	mov	r18, r24
     e1e:	30 e0       	ldi	r19, 0x00	; 0
     e20:	81 e0       	ldi	r24, 0x01	; 1
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	02 2e       	mov	r0, r18
     e26:	02 c0       	rjmp	.+4      	; 0xe2c <DIO_voidSetPinDirection+0x8a>
     e28:	88 0f       	add	r24, r24
     e2a:	99 1f       	adc	r25, r25
     e2c:	0a 94       	dec	r0
     e2e:	e2 f7       	brpl	.-8      	; 0xe28 <DIO_voidSetPinDirection+0x86>
     e30:	80 95       	com	r24
     e32:	84 23       	and	r24, r20
     e34:	8c 93       	st	X, r24
     e36:	b2 c0       	rjmp	.+356    	; 0xf9c <DIO_voidSetPinDirection+0x1fa>
			case DIO_u8PORTB: CLR_BIT(DDRB,Copy_u8Pin);break;
     e38:	a7 e3       	ldi	r26, 0x37	; 55
     e3a:	b0 e0       	ldi	r27, 0x00	; 0
     e3c:	e7 e3       	ldi	r30, 0x37	; 55
     e3e:	f0 e0       	ldi	r31, 0x00	; 0
     e40:	80 81       	ld	r24, Z
     e42:	48 2f       	mov	r20, r24
     e44:	8a 81       	ldd	r24, Y+2	; 0x02
     e46:	28 2f       	mov	r18, r24
     e48:	30 e0       	ldi	r19, 0x00	; 0
     e4a:	81 e0       	ldi	r24, 0x01	; 1
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	02 2e       	mov	r0, r18
     e50:	02 c0       	rjmp	.+4      	; 0xe56 <DIO_voidSetPinDirection+0xb4>
     e52:	88 0f       	add	r24, r24
     e54:	99 1f       	adc	r25, r25
     e56:	0a 94       	dec	r0
     e58:	e2 f7       	brpl	.-8      	; 0xe52 <DIO_voidSetPinDirection+0xb0>
     e5a:	80 95       	com	r24
     e5c:	84 23       	and	r24, r20
     e5e:	8c 93       	st	X, r24
     e60:	9d c0       	rjmp	.+314    	; 0xf9c <DIO_voidSetPinDirection+0x1fa>
			case DIO_u8PORTC: CLR_BIT(DDRC,Copy_u8Pin);break;
     e62:	a4 e3       	ldi	r26, 0x34	; 52
     e64:	b0 e0       	ldi	r27, 0x00	; 0
     e66:	e4 e3       	ldi	r30, 0x34	; 52
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	80 81       	ld	r24, Z
     e6c:	48 2f       	mov	r20, r24
     e6e:	8a 81       	ldd	r24, Y+2	; 0x02
     e70:	28 2f       	mov	r18, r24
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	81 e0       	ldi	r24, 0x01	; 1
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	02 2e       	mov	r0, r18
     e7a:	02 c0       	rjmp	.+4      	; 0xe80 <DIO_voidSetPinDirection+0xde>
     e7c:	88 0f       	add	r24, r24
     e7e:	99 1f       	adc	r25, r25
     e80:	0a 94       	dec	r0
     e82:	e2 f7       	brpl	.-8      	; 0xe7c <DIO_voidSetPinDirection+0xda>
     e84:	80 95       	com	r24
     e86:	84 23       	and	r24, r20
     e88:	8c 93       	st	X, r24
     e8a:	88 c0       	rjmp	.+272    	; 0xf9c <DIO_voidSetPinDirection+0x1fa>
			case DIO_u8PORTD: CLR_BIT(DDRD,Copy_u8Pin);break;
     e8c:	a1 e3       	ldi	r26, 0x31	; 49
     e8e:	b0 e0       	ldi	r27, 0x00	; 0
     e90:	e1 e3       	ldi	r30, 0x31	; 49
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	80 81       	ld	r24, Z
     e96:	48 2f       	mov	r20, r24
     e98:	8a 81       	ldd	r24, Y+2	; 0x02
     e9a:	28 2f       	mov	r18, r24
     e9c:	30 e0       	ldi	r19, 0x00	; 0
     e9e:	81 e0       	ldi	r24, 0x01	; 1
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	02 2e       	mov	r0, r18
     ea4:	02 c0       	rjmp	.+4      	; 0xeaa <DIO_voidSetPinDirection+0x108>
     ea6:	88 0f       	add	r24, r24
     ea8:	99 1f       	adc	r25, r25
     eaa:	0a 94       	dec	r0
     eac:	e2 f7       	brpl	.-8      	; 0xea6 <DIO_voidSetPinDirection+0x104>
     eae:	80 95       	com	r24
     eb0:	84 23       	and	r24, r20
     eb2:	8c 93       	st	X, r24
     eb4:	73 c0       	rjmp	.+230    	; 0xf9c <DIO_voidSetPinDirection+0x1fa>

			}

		}
		else if(Copy_u8PinDirection==DIO_u8PIN_OUTPUT)
     eb6:	8b 81       	ldd	r24, Y+3	; 0x03
     eb8:	81 30       	cpi	r24, 0x01	; 1
     eba:	09 f0       	breq	.+2      	; 0xebe <DIO_voidSetPinDirection+0x11c>
     ebc:	6f c0       	rjmp	.+222    	; 0xf9c <DIO_voidSetPinDirection+0x1fa>
		{
			switch(Copy_u8Port)
     ebe:	89 81       	ldd	r24, Y+1	; 0x01
     ec0:	28 2f       	mov	r18, r24
     ec2:	30 e0       	ldi	r19, 0x00	; 0
     ec4:	3d 83       	std	Y+5, r19	; 0x05
     ec6:	2c 83       	std	Y+4, r18	; 0x04
     ec8:	8c 81       	ldd	r24, Y+4	; 0x04
     eca:	9d 81       	ldd	r25, Y+5	; 0x05
     ecc:	82 30       	cpi	r24, 0x02	; 2
     ece:	91 05       	cpc	r25, r1
     ed0:	51 f1       	breq	.+84     	; 0xf26 <DIO_voidSetPinDirection+0x184>
     ed2:	2c 81       	ldd	r18, Y+4	; 0x04
     ed4:	3d 81       	ldd	r19, Y+5	; 0x05
     ed6:	23 30       	cpi	r18, 0x03	; 3
     ed8:	31 05       	cpc	r19, r1
     eda:	34 f4       	brge	.+12     	; 0xee8 <DIO_voidSetPinDirection+0x146>
     edc:	8c 81       	ldd	r24, Y+4	; 0x04
     ede:	9d 81       	ldd	r25, Y+5	; 0x05
     ee0:	81 30       	cpi	r24, 0x01	; 1
     ee2:	91 05       	cpc	r25, r1
     ee4:	61 f0       	breq	.+24     	; 0xefe <DIO_voidSetPinDirection+0x15c>
     ee6:	5a c0       	rjmp	.+180    	; 0xf9c <DIO_voidSetPinDirection+0x1fa>
     ee8:	2c 81       	ldd	r18, Y+4	; 0x04
     eea:	3d 81       	ldd	r19, Y+5	; 0x05
     eec:	23 30       	cpi	r18, 0x03	; 3
     eee:	31 05       	cpc	r19, r1
     ef0:	71 f1       	breq	.+92     	; 0xf4e <DIO_voidSetPinDirection+0x1ac>
     ef2:	8c 81       	ldd	r24, Y+4	; 0x04
     ef4:	9d 81       	ldd	r25, Y+5	; 0x05
     ef6:	84 30       	cpi	r24, 0x04	; 4
     ef8:	91 05       	cpc	r25, r1
     efa:	e9 f1       	breq	.+122    	; 0xf76 <DIO_voidSetPinDirection+0x1d4>
     efc:	4f c0       	rjmp	.+158    	; 0xf9c <DIO_voidSetPinDirection+0x1fa>
			{
			case DIO_u8PORTA: SET_BIT(DDRA,Copy_u8Pin);break;
     efe:	aa e3       	ldi	r26, 0x3A	; 58
     f00:	b0 e0       	ldi	r27, 0x00	; 0
     f02:	ea e3       	ldi	r30, 0x3A	; 58
     f04:	f0 e0       	ldi	r31, 0x00	; 0
     f06:	80 81       	ld	r24, Z
     f08:	48 2f       	mov	r20, r24
     f0a:	8a 81       	ldd	r24, Y+2	; 0x02
     f0c:	28 2f       	mov	r18, r24
     f0e:	30 e0       	ldi	r19, 0x00	; 0
     f10:	81 e0       	ldi	r24, 0x01	; 1
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	02 2e       	mov	r0, r18
     f16:	02 c0       	rjmp	.+4      	; 0xf1c <DIO_voidSetPinDirection+0x17a>
     f18:	88 0f       	add	r24, r24
     f1a:	99 1f       	adc	r25, r25
     f1c:	0a 94       	dec	r0
     f1e:	e2 f7       	brpl	.-8      	; 0xf18 <DIO_voidSetPinDirection+0x176>
     f20:	84 2b       	or	r24, r20
     f22:	8c 93       	st	X, r24
     f24:	3b c0       	rjmp	.+118    	; 0xf9c <DIO_voidSetPinDirection+0x1fa>
			case DIO_u8PORTB: SET_BIT(DDRB,Copy_u8Pin);break;
     f26:	a7 e3       	ldi	r26, 0x37	; 55
     f28:	b0 e0       	ldi	r27, 0x00	; 0
     f2a:	e7 e3       	ldi	r30, 0x37	; 55
     f2c:	f0 e0       	ldi	r31, 0x00	; 0
     f2e:	80 81       	ld	r24, Z
     f30:	48 2f       	mov	r20, r24
     f32:	8a 81       	ldd	r24, Y+2	; 0x02
     f34:	28 2f       	mov	r18, r24
     f36:	30 e0       	ldi	r19, 0x00	; 0
     f38:	81 e0       	ldi	r24, 0x01	; 1
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	02 2e       	mov	r0, r18
     f3e:	02 c0       	rjmp	.+4      	; 0xf44 <DIO_voidSetPinDirection+0x1a2>
     f40:	88 0f       	add	r24, r24
     f42:	99 1f       	adc	r25, r25
     f44:	0a 94       	dec	r0
     f46:	e2 f7       	brpl	.-8      	; 0xf40 <DIO_voidSetPinDirection+0x19e>
     f48:	84 2b       	or	r24, r20
     f4a:	8c 93       	st	X, r24
     f4c:	27 c0       	rjmp	.+78     	; 0xf9c <DIO_voidSetPinDirection+0x1fa>
			case DIO_u8PORTC: SET_BIT(DDRC,Copy_u8Pin);break;
     f4e:	a4 e3       	ldi	r26, 0x34	; 52
     f50:	b0 e0       	ldi	r27, 0x00	; 0
     f52:	e4 e3       	ldi	r30, 0x34	; 52
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	80 81       	ld	r24, Z
     f58:	48 2f       	mov	r20, r24
     f5a:	8a 81       	ldd	r24, Y+2	; 0x02
     f5c:	28 2f       	mov	r18, r24
     f5e:	30 e0       	ldi	r19, 0x00	; 0
     f60:	81 e0       	ldi	r24, 0x01	; 1
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	02 2e       	mov	r0, r18
     f66:	02 c0       	rjmp	.+4      	; 0xf6c <DIO_voidSetPinDirection+0x1ca>
     f68:	88 0f       	add	r24, r24
     f6a:	99 1f       	adc	r25, r25
     f6c:	0a 94       	dec	r0
     f6e:	e2 f7       	brpl	.-8      	; 0xf68 <DIO_voidSetPinDirection+0x1c6>
     f70:	84 2b       	or	r24, r20
     f72:	8c 93       	st	X, r24
     f74:	13 c0       	rjmp	.+38     	; 0xf9c <DIO_voidSetPinDirection+0x1fa>
			case DIO_u8PORTD: SET_BIT(DDRD,Copy_u8Pin);break;
     f76:	a1 e3       	ldi	r26, 0x31	; 49
     f78:	b0 e0       	ldi	r27, 0x00	; 0
     f7a:	e1 e3       	ldi	r30, 0x31	; 49
     f7c:	f0 e0       	ldi	r31, 0x00	; 0
     f7e:	80 81       	ld	r24, Z
     f80:	48 2f       	mov	r20, r24
     f82:	8a 81       	ldd	r24, Y+2	; 0x02
     f84:	28 2f       	mov	r18, r24
     f86:	30 e0       	ldi	r19, 0x00	; 0
     f88:	81 e0       	ldi	r24, 0x01	; 1
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	02 2e       	mov	r0, r18
     f8e:	02 c0       	rjmp	.+4      	; 0xf94 <DIO_voidSetPinDirection+0x1f2>
     f90:	88 0f       	add	r24, r24
     f92:	99 1f       	adc	r25, r25
     f94:	0a 94       	dec	r0
     f96:	e2 f7       	brpl	.-8      	; 0xf90 <DIO_voidSetPinDirection+0x1ee>
     f98:	84 2b       	or	r24, r20
     f9a:	8c 93       	st	X, r24
			}
		}

	}
}
     f9c:	27 96       	adiw	r28, 0x07	; 7
     f9e:	0f b6       	in	r0, 0x3f	; 63
     fa0:	f8 94       	cli
     fa2:	de bf       	out	0x3e, r29	; 62
     fa4:	0f be       	out	0x3f, r0	; 63
     fa6:	cd bf       	out	0x3d, r28	; 61
     fa8:	cf 91       	pop	r28
     faa:	df 91       	pop	r29
     fac:	08 95       	ret

00000fae <DIO_voidSetPortDirection>:

	void DIO_voidSetPortDirection(u8 Copy_u8Port,u8 Copy_u8PortDirection)
	{
     fae:	df 93       	push	r29
     fb0:	cf 93       	push	r28
     fb2:	00 d0       	rcall	.+0      	; 0xfb4 <DIO_voidSetPortDirection+0x6>
     fb4:	00 d0       	rcall	.+0      	; 0xfb6 <DIO_voidSetPortDirection+0x8>
     fb6:	cd b7       	in	r28, 0x3d	; 61
     fb8:	de b7       	in	r29, 0x3e	; 62
     fba:	89 83       	std	Y+1, r24	; 0x01
     fbc:	6a 83       	std	Y+2, r22	; 0x02



		switch(Copy_u8Port)
     fbe:	89 81       	ldd	r24, Y+1	; 0x01
     fc0:	28 2f       	mov	r18, r24
     fc2:	30 e0       	ldi	r19, 0x00	; 0
     fc4:	3c 83       	std	Y+4, r19	; 0x04
     fc6:	2b 83       	std	Y+3, r18	; 0x03
     fc8:	8b 81       	ldd	r24, Y+3	; 0x03
     fca:	9c 81       	ldd	r25, Y+4	; 0x04
     fcc:	82 30       	cpi	r24, 0x02	; 2
     fce:	91 05       	cpc	r25, r1
     fd0:	d9 f0       	breq	.+54     	; 0x1008 <DIO_voidSetPortDirection+0x5a>
     fd2:	2b 81       	ldd	r18, Y+3	; 0x03
     fd4:	3c 81       	ldd	r19, Y+4	; 0x04
     fd6:	23 30       	cpi	r18, 0x03	; 3
     fd8:	31 05       	cpc	r19, r1
     fda:	34 f4       	brge	.+12     	; 0xfe8 <DIO_voidSetPortDirection+0x3a>
     fdc:	8b 81       	ldd	r24, Y+3	; 0x03
     fde:	9c 81       	ldd	r25, Y+4	; 0x04
     fe0:	81 30       	cpi	r24, 0x01	; 1
     fe2:	91 05       	cpc	r25, r1
     fe4:	61 f0       	breq	.+24     	; 0xffe <DIO_voidSetPortDirection+0x50>
     fe6:	1e c0       	rjmp	.+60     	; 0x1024 <DIO_voidSetPortDirection+0x76>
     fe8:	2b 81       	ldd	r18, Y+3	; 0x03
     fea:	3c 81       	ldd	r19, Y+4	; 0x04
     fec:	23 30       	cpi	r18, 0x03	; 3
     fee:	31 05       	cpc	r19, r1
     ff0:	81 f0       	breq	.+32     	; 0x1012 <DIO_voidSetPortDirection+0x64>
     ff2:	8b 81       	ldd	r24, Y+3	; 0x03
     ff4:	9c 81       	ldd	r25, Y+4	; 0x04
     ff6:	84 30       	cpi	r24, 0x04	; 4
     ff8:	91 05       	cpc	r25, r1
     ffa:	81 f0       	breq	.+32     	; 0x101c <DIO_voidSetPortDirection+0x6e>
     ffc:	13 c0       	rjmp	.+38     	; 0x1024 <DIO_voidSetPortDirection+0x76>
		{
		case DIO_u8PORTA: DDRA=Copy_u8PortDirection;break;
     ffe:	ea e3       	ldi	r30, 0x3A	; 58
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	8a 81       	ldd	r24, Y+2	; 0x02
    1004:	80 83       	st	Z, r24
    1006:	0e c0       	rjmp	.+28     	; 0x1024 <DIO_voidSetPortDirection+0x76>
		case DIO_u8PORTB: DDRB=Copy_u8PortDirection;break;
    1008:	e7 e3       	ldi	r30, 0x37	; 55
    100a:	f0 e0       	ldi	r31, 0x00	; 0
    100c:	8a 81       	ldd	r24, Y+2	; 0x02
    100e:	80 83       	st	Z, r24
    1010:	09 c0       	rjmp	.+18     	; 0x1024 <DIO_voidSetPortDirection+0x76>
		case DIO_u8PORTC: DDRC=Copy_u8PortDirection;break;
    1012:	e4 e3       	ldi	r30, 0x34	; 52
    1014:	f0 e0       	ldi	r31, 0x00	; 0
    1016:	8a 81       	ldd	r24, Y+2	; 0x02
    1018:	80 83       	st	Z, r24
    101a:	04 c0       	rjmp	.+8      	; 0x1024 <DIO_voidSetPortDirection+0x76>
		case DIO_u8PORTD: DDRD=Copy_u8PortDirection;break;
    101c:	e1 e3       	ldi	r30, 0x31	; 49
    101e:	f0 e0       	ldi	r31, 0x00	; 0
    1020:	8a 81       	ldd	r24, Y+2	; 0x02
    1022:	80 83       	st	Z, r24
		}

	}
    1024:	0f 90       	pop	r0
    1026:	0f 90       	pop	r0
    1028:	0f 90       	pop	r0
    102a:	0f 90       	pop	r0
    102c:	cf 91       	pop	r28
    102e:	df 91       	pop	r29
    1030:	08 95       	ret

00001032 <DIO_voidSetPinValue>:


	void DIO_voidSetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8PinValue)
	{
    1032:	df 93       	push	r29
    1034:	cf 93       	push	r28
    1036:	cd b7       	in	r28, 0x3d	; 61
    1038:	de b7       	in	r29, 0x3e	; 62
    103a:	27 97       	sbiw	r28, 0x07	; 7
    103c:	0f b6       	in	r0, 0x3f	; 63
    103e:	f8 94       	cli
    1040:	de bf       	out	0x3e, r29	; 62
    1042:	0f be       	out	0x3f, r0	; 63
    1044:	cd bf       	out	0x3d, r28	; 61
    1046:	89 83       	std	Y+1, r24	; 0x01
    1048:	6a 83       	std	Y+2, r22	; 0x02
    104a:	4b 83       	std	Y+3, r20	; 0x03

		if(Copy_u8Pin<=DIO_u8PIN7){
    104c:	8a 81       	ldd	r24, Y+2	; 0x02
    104e:	88 30       	cpi	r24, 0x08	; 8
    1050:	08 f0       	brcs	.+2      	; 0x1054 <DIO_voidSetPinValue+0x22>
    1052:	ec c0       	rjmp	.+472    	; 0x122c <DIO_voidSetPinValue+0x1fa>
			if(Copy_u8PinValue==DIO_u8PIN_LOW){
    1054:	8b 81       	ldd	r24, Y+3	; 0x03
    1056:	88 23       	and	r24, r24
    1058:	09 f0       	breq	.+2      	; 0x105c <DIO_voidSetPinValue+0x2a>
    105a:	75 c0       	rjmp	.+234    	; 0x1146 <DIO_voidSetPinValue+0x114>
				switch(Copy_u8Port)
    105c:	89 81       	ldd	r24, Y+1	; 0x01
    105e:	28 2f       	mov	r18, r24
    1060:	30 e0       	ldi	r19, 0x00	; 0
    1062:	3f 83       	std	Y+7, r19	; 0x07
    1064:	2e 83       	std	Y+6, r18	; 0x06
    1066:	8e 81       	ldd	r24, Y+6	; 0x06
    1068:	9f 81       	ldd	r25, Y+7	; 0x07
    106a:	82 30       	cpi	r24, 0x02	; 2
    106c:	91 05       	cpc	r25, r1
    106e:	61 f1       	breq	.+88     	; 0x10c8 <DIO_voidSetPinValue+0x96>
    1070:	2e 81       	ldd	r18, Y+6	; 0x06
    1072:	3f 81       	ldd	r19, Y+7	; 0x07
    1074:	23 30       	cpi	r18, 0x03	; 3
    1076:	31 05       	cpc	r19, r1
    1078:	34 f4       	brge	.+12     	; 0x1086 <DIO_voidSetPinValue+0x54>
    107a:	8e 81       	ldd	r24, Y+6	; 0x06
    107c:	9f 81       	ldd	r25, Y+7	; 0x07
    107e:	81 30       	cpi	r24, 0x01	; 1
    1080:	91 05       	cpc	r25, r1
    1082:	69 f0       	breq	.+26     	; 0x109e <DIO_voidSetPinValue+0x6c>
    1084:	d3 c0       	rjmp	.+422    	; 0x122c <DIO_voidSetPinValue+0x1fa>
    1086:	2e 81       	ldd	r18, Y+6	; 0x06
    1088:	3f 81       	ldd	r19, Y+7	; 0x07
    108a:	23 30       	cpi	r18, 0x03	; 3
    108c:	31 05       	cpc	r19, r1
    108e:	89 f1       	breq	.+98     	; 0x10f2 <DIO_voidSetPinValue+0xc0>
    1090:	8e 81       	ldd	r24, Y+6	; 0x06
    1092:	9f 81       	ldd	r25, Y+7	; 0x07
    1094:	84 30       	cpi	r24, 0x04	; 4
    1096:	91 05       	cpc	r25, r1
    1098:	09 f4       	brne	.+2      	; 0x109c <DIO_voidSetPinValue+0x6a>
    109a:	40 c0       	rjmp	.+128    	; 0x111c <DIO_voidSetPinValue+0xea>
    109c:	c7 c0       	rjmp	.+398    	; 0x122c <DIO_voidSetPinValue+0x1fa>
				{
				case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin);break;
    109e:	ab e3       	ldi	r26, 0x3B	; 59
    10a0:	b0 e0       	ldi	r27, 0x00	; 0
    10a2:	eb e3       	ldi	r30, 0x3B	; 59
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	80 81       	ld	r24, Z
    10a8:	48 2f       	mov	r20, r24
    10aa:	8a 81       	ldd	r24, Y+2	; 0x02
    10ac:	28 2f       	mov	r18, r24
    10ae:	30 e0       	ldi	r19, 0x00	; 0
    10b0:	81 e0       	ldi	r24, 0x01	; 1
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	02 2e       	mov	r0, r18
    10b6:	02 c0       	rjmp	.+4      	; 0x10bc <DIO_voidSetPinValue+0x8a>
    10b8:	88 0f       	add	r24, r24
    10ba:	99 1f       	adc	r25, r25
    10bc:	0a 94       	dec	r0
    10be:	e2 f7       	brpl	.-8      	; 0x10b8 <DIO_voidSetPinValue+0x86>
    10c0:	80 95       	com	r24
    10c2:	84 23       	and	r24, r20
    10c4:	8c 93       	st	X, r24
    10c6:	b2 c0       	rjmp	.+356    	; 0x122c <DIO_voidSetPinValue+0x1fa>
				case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin);break;
    10c8:	a8 e3       	ldi	r26, 0x38	; 56
    10ca:	b0 e0       	ldi	r27, 0x00	; 0
    10cc:	e8 e3       	ldi	r30, 0x38	; 56
    10ce:	f0 e0       	ldi	r31, 0x00	; 0
    10d0:	80 81       	ld	r24, Z
    10d2:	48 2f       	mov	r20, r24
    10d4:	8a 81       	ldd	r24, Y+2	; 0x02
    10d6:	28 2f       	mov	r18, r24
    10d8:	30 e0       	ldi	r19, 0x00	; 0
    10da:	81 e0       	ldi	r24, 0x01	; 1
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	02 2e       	mov	r0, r18
    10e0:	02 c0       	rjmp	.+4      	; 0x10e6 <DIO_voidSetPinValue+0xb4>
    10e2:	88 0f       	add	r24, r24
    10e4:	99 1f       	adc	r25, r25
    10e6:	0a 94       	dec	r0
    10e8:	e2 f7       	brpl	.-8      	; 0x10e2 <DIO_voidSetPinValue+0xb0>
    10ea:	80 95       	com	r24
    10ec:	84 23       	and	r24, r20
    10ee:	8c 93       	st	X, r24
    10f0:	9d c0       	rjmp	.+314    	; 0x122c <DIO_voidSetPinValue+0x1fa>
				case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin);break;
    10f2:	a5 e3       	ldi	r26, 0x35	; 53
    10f4:	b0 e0       	ldi	r27, 0x00	; 0
    10f6:	e5 e3       	ldi	r30, 0x35	; 53
    10f8:	f0 e0       	ldi	r31, 0x00	; 0
    10fa:	80 81       	ld	r24, Z
    10fc:	48 2f       	mov	r20, r24
    10fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1100:	28 2f       	mov	r18, r24
    1102:	30 e0       	ldi	r19, 0x00	; 0
    1104:	81 e0       	ldi	r24, 0x01	; 1
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	02 2e       	mov	r0, r18
    110a:	02 c0       	rjmp	.+4      	; 0x1110 <DIO_voidSetPinValue+0xde>
    110c:	88 0f       	add	r24, r24
    110e:	99 1f       	adc	r25, r25
    1110:	0a 94       	dec	r0
    1112:	e2 f7       	brpl	.-8      	; 0x110c <DIO_voidSetPinValue+0xda>
    1114:	80 95       	com	r24
    1116:	84 23       	and	r24, r20
    1118:	8c 93       	st	X, r24
    111a:	88 c0       	rjmp	.+272    	; 0x122c <DIO_voidSetPinValue+0x1fa>
				case DIO_u8PORTD: CLR_BIT(PORTD,Copy_u8Pin);break;
    111c:	a2 e3       	ldi	r26, 0x32	; 50
    111e:	b0 e0       	ldi	r27, 0x00	; 0
    1120:	e2 e3       	ldi	r30, 0x32	; 50
    1122:	f0 e0       	ldi	r31, 0x00	; 0
    1124:	80 81       	ld	r24, Z
    1126:	48 2f       	mov	r20, r24
    1128:	8a 81       	ldd	r24, Y+2	; 0x02
    112a:	28 2f       	mov	r18, r24
    112c:	30 e0       	ldi	r19, 0x00	; 0
    112e:	81 e0       	ldi	r24, 0x01	; 1
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	02 2e       	mov	r0, r18
    1134:	02 c0       	rjmp	.+4      	; 0x113a <DIO_voidSetPinValue+0x108>
    1136:	88 0f       	add	r24, r24
    1138:	99 1f       	adc	r25, r25
    113a:	0a 94       	dec	r0
    113c:	e2 f7       	brpl	.-8      	; 0x1136 <DIO_voidSetPinValue+0x104>
    113e:	80 95       	com	r24
    1140:	84 23       	and	r24, r20
    1142:	8c 93       	st	X, r24
    1144:	73 c0       	rjmp	.+230    	; 0x122c <DIO_voidSetPinValue+0x1fa>

				}

			}
			else if(Copy_u8PinValue==DIO_u8PIN_HIGH)
    1146:	8b 81       	ldd	r24, Y+3	; 0x03
    1148:	81 30       	cpi	r24, 0x01	; 1
    114a:	09 f0       	breq	.+2      	; 0x114e <DIO_voidSetPinValue+0x11c>
    114c:	6f c0       	rjmp	.+222    	; 0x122c <DIO_voidSetPinValue+0x1fa>
			{
				switch(Copy_u8Port)
    114e:	89 81       	ldd	r24, Y+1	; 0x01
    1150:	28 2f       	mov	r18, r24
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	3d 83       	std	Y+5, r19	; 0x05
    1156:	2c 83       	std	Y+4, r18	; 0x04
    1158:	8c 81       	ldd	r24, Y+4	; 0x04
    115a:	9d 81       	ldd	r25, Y+5	; 0x05
    115c:	82 30       	cpi	r24, 0x02	; 2
    115e:	91 05       	cpc	r25, r1
    1160:	51 f1       	breq	.+84     	; 0x11b6 <DIO_voidSetPinValue+0x184>
    1162:	2c 81       	ldd	r18, Y+4	; 0x04
    1164:	3d 81       	ldd	r19, Y+5	; 0x05
    1166:	23 30       	cpi	r18, 0x03	; 3
    1168:	31 05       	cpc	r19, r1
    116a:	34 f4       	brge	.+12     	; 0x1178 <DIO_voidSetPinValue+0x146>
    116c:	8c 81       	ldd	r24, Y+4	; 0x04
    116e:	9d 81       	ldd	r25, Y+5	; 0x05
    1170:	81 30       	cpi	r24, 0x01	; 1
    1172:	91 05       	cpc	r25, r1
    1174:	61 f0       	breq	.+24     	; 0x118e <DIO_voidSetPinValue+0x15c>
    1176:	5a c0       	rjmp	.+180    	; 0x122c <DIO_voidSetPinValue+0x1fa>
    1178:	2c 81       	ldd	r18, Y+4	; 0x04
    117a:	3d 81       	ldd	r19, Y+5	; 0x05
    117c:	23 30       	cpi	r18, 0x03	; 3
    117e:	31 05       	cpc	r19, r1
    1180:	71 f1       	breq	.+92     	; 0x11de <DIO_voidSetPinValue+0x1ac>
    1182:	8c 81       	ldd	r24, Y+4	; 0x04
    1184:	9d 81       	ldd	r25, Y+5	; 0x05
    1186:	84 30       	cpi	r24, 0x04	; 4
    1188:	91 05       	cpc	r25, r1
    118a:	e9 f1       	breq	.+122    	; 0x1206 <DIO_voidSetPinValue+0x1d4>
    118c:	4f c0       	rjmp	.+158    	; 0x122c <DIO_voidSetPinValue+0x1fa>
				{
				case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin);break;
    118e:	ab e3       	ldi	r26, 0x3B	; 59
    1190:	b0 e0       	ldi	r27, 0x00	; 0
    1192:	eb e3       	ldi	r30, 0x3B	; 59
    1194:	f0 e0       	ldi	r31, 0x00	; 0
    1196:	80 81       	ld	r24, Z
    1198:	48 2f       	mov	r20, r24
    119a:	8a 81       	ldd	r24, Y+2	; 0x02
    119c:	28 2f       	mov	r18, r24
    119e:	30 e0       	ldi	r19, 0x00	; 0
    11a0:	81 e0       	ldi	r24, 0x01	; 1
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	02 2e       	mov	r0, r18
    11a6:	02 c0       	rjmp	.+4      	; 0x11ac <DIO_voidSetPinValue+0x17a>
    11a8:	88 0f       	add	r24, r24
    11aa:	99 1f       	adc	r25, r25
    11ac:	0a 94       	dec	r0
    11ae:	e2 f7       	brpl	.-8      	; 0x11a8 <DIO_voidSetPinValue+0x176>
    11b0:	84 2b       	or	r24, r20
    11b2:	8c 93       	st	X, r24
    11b4:	3b c0       	rjmp	.+118    	; 0x122c <DIO_voidSetPinValue+0x1fa>
				case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin);break;
    11b6:	a8 e3       	ldi	r26, 0x38	; 56
    11b8:	b0 e0       	ldi	r27, 0x00	; 0
    11ba:	e8 e3       	ldi	r30, 0x38	; 56
    11bc:	f0 e0       	ldi	r31, 0x00	; 0
    11be:	80 81       	ld	r24, Z
    11c0:	48 2f       	mov	r20, r24
    11c2:	8a 81       	ldd	r24, Y+2	; 0x02
    11c4:	28 2f       	mov	r18, r24
    11c6:	30 e0       	ldi	r19, 0x00	; 0
    11c8:	81 e0       	ldi	r24, 0x01	; 1
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	02 2e       	mov	r0, r18
    11ce:	02 c0       	rjmp	.+4      	; 0x11d4 <DIO_voidSetPinValue+0x1a2>
    11d0:	88 0f       	add	r24, r24
    11d2:	99 1f       	adc	r25, r25
    11d4:	0a 94       	dec	r0
    11d6:	e2 f7       	brpl	.-8      	; 0x11d0 <DIO_voidSetPinValue+0x19e>
    11d8:	84 2b       	or	r24, r20
    11da:	8c 93       	st	X, r24
    11dc:	27 c0       	rjmp	.+78     	; 0x122c <DIO_voidSetPinValue+0x1fa>
				case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin);break;
    11de:	a5 e3       	ldi	r26, 0x35	; 53
    11e0:	b0 e0       	ldi	r27, 0x00	; 0
    11e2:	e5 e3       	ldi	r30, 0x35	; 53
    11e4:	f0 e0       	ldi	r31, 0x00	; 0
    11e6:	80 81       	ld	r24, Z
    11e8:	48 2f       	mov	r20, r24
    11ea:	8a 81       	ldd	r24, Y+2	; 0x02
    11ec:	28 2f       	mov	r18, r24
    11ee:	30 e0       	ldi	r19, 0x00	; 0
    11f0:	81 e0       	ldi	r24, 0x01	; 1
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	02 2e       	mov	r0, r18
    11f6:	02 c0       	rjmp	.+4      	; 0x11fc <DIO_voidSetPinValue+0x1ca>
    11f8:	88 0f       	add	r24, r24
    11fa:	99 1f       	adc	r25, r25
    11fc:	0a 94       	dec	r0
    11fe:	e2 f7       	brpl	.-8      	; 0x11f8 <DIO_voidSetPinValue+0x1c6>
    1200:	84 2b       	or	r24, r20
    1202:	8c 93       	st	X, r24
    1204:	13 c0       	rjmp	.+38     	; 0x122c <DIO_voidSetPinValue+0x1fa>
				case DIO_u8PORTD: SET_BIT(PORTD,Copy_u8Pin);break;
    1206:	a2 e3       	ldi	r26, 0x32	; 50
    1208:	b0 e0       	ldi	r27, 0x00	; 0
    120a:	e2 e3       	ldi	r30, 0x32	; 50
    120c:	f0 e0       	ldi	r31, 0x00	; 0
    120e:	80 81       	ld	r24, Z
    1210:	48 2f       	mov	r20, r24
    1212:	8a 81       	ldd	r24, Y+2	; 0x02
    1214:	28 2f       	mov	r18, r24
    1216:	30 e0       	ldi	r19, 0x00	; 0
    1218:	81 e0       	ldi	r24, 0x01	; 1
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	02 2e       	mov	r0, r18
    121e:	02 c0       	rjmp	.+4      	; 0x1224 <DIO_voidSetPinValue+0x1f2>
    1220:	88 0f       	add	r24, r24
    1222:	99 1f       	adc	r25, r25
    1224:	0a 94       	dec	r0
    1226:	e2 f7       	brpl	.-8      	; 0x1220 <DIO_voidSetPinValue+0x1ee>
    1228:	84 2b       	or	r24, r20
    122a:	8c 93       	st	X, r24
			}



		}
	}
    122c:	27 96       	adiw	r28, 0x07	; 7
    122e:	0f b6       	in	r0, 0x3f	; 63
    1230:	f8 94       	cli
    1232:	de bf       	out	0x3e, r29	; 62
    1234:	0f be       	out	0x3f, r0	; 63
    1236:	cd bf       	out	0x3d, r28	; 61
    1238:	cf 91       	pop	r28
    123a:	df 91       	pop	r29
    123c:	08 95       	ret

0000123e <DIO_voidSetPortValue>:
	void DIO_voidSetPortValue(u8 Copy_u8Port,u8 Copy_u8PortValue)
	{
    123e:	df 93       	push	r29
    1240:	cf 93       	push	r28
    1242:	00 d0       	rcall	.+0      	; 0x1244 <DIO_voidSetPortValue+0x6>
    1244:	00 d0       	rcall	.+0      	; 0x1246 <DIO_voidSetPortValue+0x8>
    1246:	cd b7       	in	r28, 0x3d	; 61
    1248:	de b7       	in	r29, 0x3e	; 62
    124a:	89 83       	std	Y+1, r24	; 0x01
    124c:	6a 83       	std	Y+2, r22	; 0x02
		switch(Copy_u8Port)
    124e:	89 81       	ldd	r24, Y+1	; 0x01
    1250:	28 2f       	mov	r18, r24
    1252:	30 e0       	ldi	r19, 0x00	; 0
    1254:	3c 83       	std	Y+4, r19	; 0x04
    1256:	2b 83       	std	Y+3, r18	; 0x03
    1258:	8b 81       	ldd	r24, Y+3	; 0x03
    125a:	9c 81       	ldd	r25, Y+4	; 0x04
    125c:	82 30       	cpi	r24, 0x02	; 2
    125e:	91 05       	cpc	r25, r1
    1260:	d9 f0       	breq	.+54     	; 0x1298 <DIO_voidSetPortValue+0x5a>
    1262:	2b 81       	ldd	r18, Y+3	; 0x03
    1264:	3c 81       	ldd	r19, Y+4	; 0x04
    1266:	23 30       	cpi	r18, 0x03	; 3
    1268:	31 05       	cpc	r19, r1
    126a:	34 f4       	brge	.+12     	; 0x1278 <DIO_voidSetPortValue+0x3a>
    126c:	8b 81       	ldd	r24, Y+3	; 0x03
    126e:	9c 81       	ldd	r25, Y+4	; 0x04
    1270:	81 30       	cpi	r24, 0x01	; 1
    1272:	91 05       	cpc	r25, r1
    1274:	61 f0       	breq	.+24     	; 0x128e <DIO_voidSetPortValue+0x50>
    1276:	1e c0       	rjmp	.+60     	; 0x12b4 <DIO_voidSetPortValue+0x76>
    1278:	2b 81       	ldd	r18, Y+3	; 0x03
    127a:	3c 81       	ldd	r19, Y+4	; 0x04
    127c:	23 30       	cpi	r18, 0x03	; 3
    127e:	31 05       	cpc	r19, r1
    1280:	81 f0       	breq	.+32     	; 0x12a2 <DIO_voidSetPortValue+0x64>
    1282:	8b 81       	ldd	r24, Y+3	; 0x03
    1284:	9c 81       	ldd	r25, Y+4	; 0x04
    1286:	84 30       	cpi	r24, 0x04	; 4
    1288:	91 05       	cpc	r25, r1
    128a:	81 f0       	breq	.+32     	; 0x12ac <DIO_voidSetPortValue+0x6e>
    128c:	13 c0       	rjmp	.+38     	; 0x12b4 <DIO_voidSetPortValue+0x76>
		{
		case DIO_u8PORTA: PORTA=Copy_u8PortValue;break;
    128e:	eb e3       	ldi	r30, 0x3B	; 59
    1290:	f0 e0       	ldi	r31, 0x00	; 0
    1292:	8a 81       	ldd	r24, Y+2	; 0x02
    1294:	80 83       	st	Z, r24
    1296:	0e c0       	rjmp	.+28     	; 0x12b4 <DIO_voidSetPortValue+0x76>
		case DIO_u8PORTB: PORTB=Copy_u8PortValue;break;
    1298:	e8 e3       	ldi	r30, 0x38	; 56
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	8a 81       	ldd	r24, Y+2	; 0x02
    129e:	80 83       	st	Z, r24
    12a0:	09 c0       	rjmp	.+18     	; 0x12b4 <DIO_voidSetPortValue+0x76>
		case DIO_u8PORTC: PORTC=Copy_u8PortValue;break;
    12a2:	e5 e3       	ldi	r30, 0x35	; 53
    12a4:	f0 e0       	ldi	r31, 0x00	; 0
    12a6:	8a 81       	ldd	r24, Y+2	; 0x02
    12a8:	80 83       	st	Z, r24
    12aa:	04 c0       	rjmp	.+8      	; 0x12b4 <DIO_voidSetPortValue+0x76>
		case DIO_u8PORTD: PORTD=Copy_u8PortValue;break;
    12ac:	e2 e3       	ldi	r30, 0x32	; 50
    12ae:	f0 e0       	ldi	r31, 0x00	; 0
    12b0:	8a 81       	ldd	r24, Y+2	; 0x02
    12b2:	80 83       	st	Z, r24
		}

	}
    12b4:	0f 90       	pop	r0
    12b6:	0f 90       	pop	r0
    12b8:	0f 90       	pop	r0
    12ba:	0f 90       	pop	r0
    12bc:	cf 91       	pop	r28
    12be:	df 91       	pop	r29
    12c0:	08 95       	ret

000012c2 <DIO_u8GetPinValue>:


	u8 DIO_u8GetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin)
	{
    12c2:	df 93       	push	r29
    12c4:	cf 93       	push	r28
    12c6:	00 d0       	rcall	.+0      	; 0x12c8 <DIO_u8GetPinValue+0x6>
    12c8:	00 d0       	rcall	.+0      	; 0x12ca <DIO_u8GetPinValue+0x8>
    12ca:	0f 92       	push	r0
    12cc:	cd b7       	in	r28, 0x3d	; 61
    12ce:	de b7       	in	r29, 0x3e	; 62
    12d0:	8a 83       	std	Y+2, r24	; 0x02
    12d2:	6b 83       	std	Y+3, r22	; 0x03
		u8 Local_u8PinValue=0;
    12d4:	19 82       	std	Y+1, r1	; 0x01
		switch(Copy_u8Port){
    12d6:	8a 81       	ldd	r24, Y+2	; 0x02
    12d8:	28 2f       	mov	r18, r24
    12da:	30 e0       	ldi	r19, 0x00	; 0
    12dc:	3d 83       	std	Y+5, r19	; 0x05
    12de:	2c 83       	std	Y+4, r18	; 0x04
    12e0:	4c 81       	ldd	r20, Y+4	; 0x04
    12e2:	5d 81       	ldd	r21, Y+5	; 0x05
    12e4:	42 30       	cpi	r20, 0x02	; 2
    12e6:	51 05       	cpc	r21, r1
    12e8:	41 f1       	breq	.+80     	; 0x133a <DIO_u8GetPinValue+0x78>
    12ea:	8c 81       	ldd	r24, Y+4	; 0x04
    12ec:	9d 81       	ldd	r25, Y+5	; 0x05
    12ee:	83 30       	cpi	r24, 0x03	; 3
    12f0:	91 05       	cpc	r25, r1
    12f2:	34 f4       	brge	.+12     	; 0x1300 <DIO_u8GetPinValue+0x3e>
    12f4:	2c 81       	ldd	r18, Y+4	; 0x04
    12f6:	3d 81       	ldd	r19, Y+5	; 0x05
    12f8:	21 30       	cpi	r18, 0x01	; 1
    12fa:	31 05       	cpc	r19, r1
    12fc:	61 f0       	breq	.+24     	; 0x1316 <DIO_u8GetPinValue+0x54>
    12fe:	52 c0       	rjmp	.+164    	; 0x13a4 <DIO_u8GetPinValue+0xe2>
    1300:	4c 81       	ldd	r20, Y+4	; 0x04
    1302:	5d 81       	ldd	r21, Y+5	; 0x05
    1304:	43 30       	cpi	r20, 0x03	; 3
    1306:	51 05       	cpc	r21, r1
    1308:	51 f1       	breq	.+84     	; 0x135e <DIO_u8GetPinValue+0x9c>
    130a:	8c 81       	ldd	r24, Y+4	; 0x04
    130c:	9d 81       	ldd	r25, Y+5	; 0x05
    130e:	84 30       	cpi	r24, 0x04	; 4
    1310:	91 05       	cpc	r25, r1
    1312:	b9 f1       	breq	.+110    	; 0x1382 <DIO_u8GetPinValue+0xc0>
    1314:	47 c0       	rjmp	.+142    	; 0x13a4 <DIO_u8GetPinValue+0xe2>
		case DIO_u8PORTA: Local_u8PinValue =GET_BIT(PINA,Copy_u8Pin); break;
    1316:	e9 e3       	ldi	r30, 0x39	; 57
    1318:	f0 e0       	ldi	r31, 0x00	; 0
    131a:	80 81       	ld	r24, Z
    131c:	28 2f       	mov	r18, r24
    131e:	30 e0       	ldi	r19, 0x00	; 0
    1320:	8b 81       	ldd	r24, Y+3	; 0x03
    1322:	88 2f       	mov	r24, r24
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	a9 01       	movw	r20, r18
    1328:	02 c0       	rjmp	.+4      	; 0x132e <DIO_u8GetPinValue+0x6c>
    132a:	55 95       	asr	r21
    132c:	47 95       	ror	r20
    132e:	8a 95       	dec	r24
    1330:	e2 f7       	brpl	.-8      	; 0x132a <DIO_u8GetPinValue+0x68>
    1332:	ca 01       	movw	r24, r20
    1334:	81 70       	andi	r24, 0x01	; 1
    1336:	89 83       	std	Y+1, r24	; 0x01
    1338:	35 c0       	rjmp	.+106    	; 0x13a4 <DIO_u8GetPinValue+0xe2>
        case DIO_u8PORTB: Local_u8PinValue =GET_BIT(PINB,Copy_u8Pin); break;
    133a:	e6 e3       	ldi	r30, 0x36	; 54
    133c:	f0 e0       	ldi	r31, 0x00	; 0
    133e:	80 81       	ld	r24, Z
    1340:	28 2f       	mov	r18, r24
    1342:	30 e0       	ldi	r19, 0x00	; 0
    1344:	8b 81       	ldd	r24, Y+3	; 0x03
    1346:	88 2f       	mov	r24, r24
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	a9 01       	movw	r20, r18
    134c:	02 c0       	rjmp	.+4      	; 0x1352 <DIO_u8GetPinValue+0x90>
    134e:	55 95       	asr	r21
    1350:	47 95       	ror	r20
    1352:	8a 95       	dec	r24
    1354:	e2 f7       	brpl	.-8      	; 0x134e <DIO_u8GetPinValue+0x8c>
    1356:	ca 01       	movw	r24, r20
    1358:	81 70       	andi	r24, 0x01	; 1
    135a:	89 83       	std	Y+1, r24	; 0x01
    135c:	23 c0       	rjmp	.+70     	; 0x13a4 <DIO_u8GetPinValue+0xe2>
		case DIO_u8PORTC: Local_u8PinValue =GET_BIT(PINC,Copy_u8Pin); break;
    135e:	e3 e3       	ldi	r30, 0x33	; 51
    1360:	f0 e0       	ldi	r31, 0x00	; 0
    1362:	80 81       	ld	r24, Z
    1364:	28 2f       	mov	r18, r24
    1366:	30 e0       	ldi	r19, 0x00	; 0
    1368:	8b 81       	ldd	r24, Y+3	; 0x03
    136a:	88 2f       	mov	r24, r24
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	a9 01       	movw	r20, r18
    1370:	02 c0       	rjmp	.+4      	; 0x1376 <DIO_u8GetPinValue+0xb4>
    1372:	55 95       	asr	r21
    1374:	47 95       	ror	r20
    1376:	8a 95       	dec	r24
    1378:	e2 f7       	brpl	.-8      	; 0x1372 <DIO_u8GetPinValue+0xb0>
    137a:	ca 01       	movw	r24, r20
    137c:	81 70       	andi	r24, 0x01	; 1
    137e:	89 83       	std	Y+1, r24	; 0x01
    1380:	11 c0       	rjmp	.+34     	; 0x13a4 <DIO_u8GetPinValue+0xe2>
		case DIO_u8PORTD: Local_u8PinValue =GET_BIT(PIND,Copy_u8Pin); break;
    1382:	e0 e3       	ldi	r30, 0x30	; 48
    1384:	f0 e0       	ldi	r31, 0x00	; 0
    1386:	80 81       	ld	r24, Z
    1388:	28 2f       	mov	r18, r24
    138a:	30 e0       	ldi	r19, 0x00	; 0
    138c:	8b 81       	ldd	r24, Y+3	; 0x03
    138e:	88 2f       	mov	r24, r24
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	a9 01       	movw	r20, r18
    1394:	02 c0       	rjmp	.+4      	; 0x139a <DIO_u8GetPinValue+0xd8>
    1396:	55 95       	asr	r21
    1398:	47 95       	ror	r20
    139a:	8a 95       	dec	r24
    139c:	e2 f7       	brpl	.-8      	; 0x1396 <DIO_u8GetPinValue+0xd4>
    139e:	ca 01       	movw	r24, r20
    13a0:	81 70       	andi	r24, 0x01	; 1
    13a2:	89 83       	std	Y+1, r24	; 0x01
				}
		return Local_u8PinValue;
    13a4:	89 81       	ldd	r24, Y+1	; 0x01
	}
    13a6:	0f 90       	pop	r0
    13a8:	0f 90       	pop	r0
    13aa:	0f 90       	pop	r0
    13ac:	0f 90       	pop	r0
    13ae:	0f 90       	pop	r0
    13b0:	cf 91       	pop	r28
    13b2:	df 91       	pop	r29
    13b4:	08 95       	ret

000013b6 <LCD_voidSendCommand>:

#include"LCD_interface.h"
#include"LCD_config.h"
#include"LCD_private.h"
void LCD_voidSendCommand(u8 Copy_u8Command)
{
    13b6:	df 93       	push	r29
    13b8:	cf 93       	push	r28
    13ba:	cd b7       	in	r28, 0x3d	; 61
    13bc:	de b7       	in	r29, 0x3e	; 62
    13be:	2f 97       	sbiw	r28, 0x0f	; 15
    13c0:	0f b6       	in	r0, 0x3f	; 63
    13c2:	f8 94       	cli
    13c4:	de bf       	out	0x3e, r29	; 62
    13c6:	0f be       	out	0x3f, r0	; 63
    13c8:	cd bf       	out	0x3d, r28	; 61
    13ca:	8f 87       	std	Y+15, r24	; 0x0f
	/*NOTE:ana ha3mel al port wel pin direction fel Init function*/
	/*to send command, put RS to low(0)*/


	DIO_voidSetPinValue(LCD_Control_Port,LCD_RS_PIN,DIO_u8PIN_LOW);// 7ATET AL RS be zero
    13cc:	84 e0       	ldi	r24, 0x04	; 4
    13ce:	65 e0       	ldi	r22, 0x05	; 5
    13d0:	40 e0       	ldi	r20, 0x00	; 0
    13d2:	0e 94 19 08 	call	0x1032	; 0x1032 <DIO_voidSetPinValue>
	/*to get to write mode, u have to et RW to low(0)*/
	DIO_voidSetPinValue(LCD_Control_Port,LCD_RW_PIN,DIO_u8PIN_LOW);
    13d6:	84 e0       	ldi	r24, 0x04	; 4
    13d8:	66 e0       	ldi	r22, 0x06	; 6
    13da:	40 e0       	ldi	r20, 0x00	; 0
    13dc:	0e 94 19 08 	call	0x1032	; 0x1032 <DIO_voidSetPinValue>
	/*7ot b2a al command al user hayb3to fel data port(D0---D7)*/
	DIO_voidSetPortValue(LCD_Data_Port,Copy_u8Command);
    13e0:	83 e0       	ldi	r24, 0x03	; 3
    13e2:	6f 85       	ldd	r22, Y+15	; 0x0f
    13e4:	0e 94 1f 09 	call	0x123e	; 0x123e <DIO_voidSetPortValue>
	/*4a8al al enable---HIGH-delay-low*/
	DIO_voidSetPinValue(LCD_Control_Port,LCD_E_PIN,DIO_u8PIN_HIGH);
    13e8:	84 e0       	ldi	r24, 0x04	; 4
    13ea:	67 e0       	ldi	r22, 0x07	; 7
    13ec:	41 e0       	ldi	r20, 0x01	; 1
    13ee:	0e 94 19 08 	call	0x1032	; 0x1032 <DIO_voidSetPinValue>
    13f2:	80 e0       	ldi	r24, 0x00	; 0
    13f4:	90 e0       	ldi	r25, 0x00	; 0
    13f6:	a0 e0       	ldi	r26, 0x00	; 0
    13f8:	b0 e4       	ldi	r27, 0x40	; 64
    13fa:	8b 87       	std	Y+11, r24	; 0x0b
    13fc:	9c 87       	std	Y+12, r25	; 0x0c
    13fe:	ad 87       	std	Y+13, r26	; 0x0d
    1400:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1402:	6b 85       	ldd	r22, Y+11	; 0x0b
    1404:	7c 85       	ldd	r23, Y+12	; 0x0c
    1406:	8d 85       	ldd	r24, Y+13	; 0x0d
    1408:	9e 85       	ldd	r25, Y+14	; 0x0e
    140a:	20 e0       	ldi	r18, 0x00	; 0
    140c:	30 e0       	ldi	r19, 0x00	; 0
    140e:	4a ef       	ldi	r20, 0xFA	; 250
    1410:	54 e4       	ldi	r21, 0x44	; 68
    1412:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1416:	dc 01       	movw	r26, r24
    1418:	cb 01       	movw	r24, r22
    141a:	8f 83       	std	Y+7, r24	; 0x07
    141c:	98 87       	std	Y+8, r25	; 0x08
    141e:	a9 87       	std	Y+9, r26	; 0x09
    1420:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1422:	6f 81       	ldd	r22, Y+7	; 0x07
    1424:	78 85       	ldd	r23, Y+8	; 0x08
    1426:	89 85       	ldd	r24, Y+9	; 0x09
    1428:	9a 85       	ldd	r25, Y+10	; 0x0a
    142a:	20 e0       	ldi	r18, 0x00	; 0
    142c:	30 e0       	ldi	r19, 0x00	; 0
    142e:	40 e8       	ldi	r20, 0x80	; 128
    1430:	5f e3       	ldi	r21, 0x3F	; 63
    1432:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1436:	88 23       	and	r24, r24
    1438:	2c f4       	brge	.+10     	; 0x1444 <LCD_voidSendCommand+0x8e>
		__ticks = 1;
    143a:	81 e0       	ldi	r24, 0x01	; 1
    143c:	90 e0       	ldi	r25, 0x00	; 0
    143e:	9e 83       	std	Y+6, r25	; 0x06
    1440:	8d 83       	std	Y+5, r24	; 0x05
    1442:	3f c0       	rjmp	.+126    	; 0x14c2 <LCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
    1444:	6f 81       	ldd	r22, Y+7	; 0x07
    1446:	78 85       	ldd	r23, Y+8	; 0x08
    1448:	89 85       	ldd	r24, Y+9	; 0x09
    144a:	9a 85       	ldd	r25, Y+10	; 0x0a
    144c:	20 e0       	ldi	r18, 0x00	; 0
    144e:	3f ef       	ldi	r19, 0xFF	; 255
    1450:	4f e7       	ldi	r20, 0x7F	; 127
    1452:	57 e4       	ldi	r21, 0x47	; 71
    1454:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1458:	18 16       	cp	r1, r24
    145a:	4c f5       	brge	.+82     	; 0x14ae <LCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    145c:	6b 85       	ldd	r22, Y+11	; 0x0b
    145e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1460:	8d 85       	ldd	r24, Y+13	; 0x0d
    1462:	9e 85       	ldd	r25, Y+14	; 0x0e
    1464:	20 e0       	ldi	r18, 0x00	; 0
    1466:	30 e0       	ldi	r19, 0x00	; 0
    1468:	40 e2       	ldi	r20, 0x20	; 32
    146a:	51 e4       	ldi	r21, 0x41	; 65
    146c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1470:	dc 01       	movw	r26, r24
    1472:	cb 01       	movw	r24, r22
    1474:	bc 01       	movw	r22, r24
    1476:	cd 01       	movw	r24, r26
    1478:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    147c:	dc 01       	movw	r26, r24
    147e:	cb 01       	movw	r24, r22
    1480:	9e 83       	std	Y+6, r25	; 0x06
    1482:	8d 83       	std	Y+5, r24	; 0x05
    1484:	0f c0       	rjmp	.+30     	; 0x14a4 <LCD_voidSendCommand+0xee>
    1486:	88 ec       	ldi	r24, 0xC8	; 200
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	9c 83       	std	Y+4, r25	; 0x04
    148c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    148e:	8b 81       	ldd	r24, Y+3	; 0x03
    1490:	9c 81       	ldd	r25, Y+4	; 0x04
    1492:	01 97       	sbiw	r24, 0x01	; 1
    1494:	f1 f7       	brne	.-4      	; 0x1492 <LCD_voidSendCommand+0xdc>
    1496:	9c 83       	std	Y+4, r25	; 0x04
    1498:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    149a:	8d 81       	ldd	r24, Y+5	; 0x05
    149c:	9e 81       	ldd	r25, Y+6	; 0x06
    149e:	01 97       	sbiw	r24, 0x01	; 1
    14a0:	9e 83       	std	Y+6, r25	; 0x06
    14a2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14a4:	8d 81       	ldd	r24, Y+5	; 0x05
    14a6:	9e 81       	ldd	r25, Y+6	; 0x06
    14a8:	00 97       	sbiw	r24, 0x00	; 0
    14aa:	69 f7       	brne	.-38     	; 0x1486 <LCD_voidSendCommand+0xd0>
    14ac:	14 c0       	rjmp	.+40     	; 0x14d6 <LCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14ae:	6f 81       	ldd	r22, Y+7	; 0x07
    14b0:	78 85       	ldd	r23, Y+8	; 0x08
    14b2:	89 85       	ldd	r24, Y+9	; 0x09
    14b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    14b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14ba:	dc 01       	movw	r26, r24
    14bc:	cb 01       	movw	r24, r22
    14be:	9e 83       	std	Y+6, r25	; 0x06
    14c0:	8d 83       	std	Y+5, r24	; 0x05
    14c2:	8d 81       	ldd	r24, Y+5	; 0x05
    14c4:	9e 81       	ldd	r25, Y+6	; 0x06
    14c6:	9a 83       	std	Y+2, r25	; 0x02
    14c8:	89 83       	std	Y+1, r24	; 0x01
    14ca:	89 81       	ldd	r24, Y+1	; 0x01
    14cc:	9a 81       	ldd	r25, Y+2	; 0x02
    14ce:	01 97       	sbiw	r24, 0x01	; 1
    14d0:	f1 f7       	brne	.-4      	; 0x14ce <LCD_voidSendCommand+0x118>
    14d2:	9a 83       	std	Y+2, r25	; 0x02
    14d4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);//han3raf leh 2 millisecond 2odam
	DIO_voidSetPinValue(LCD_Control_Port,LCD_E_PIN,DIO_u8PIN_LOW);
    14d6:	84 e0       	ldi	r24, 0x04	; 4
    14d8:	67 e0       	ldi	r22, 0x07	; 7
    14da:	40 e0       	ldi	r20, 0x00	; 0
    14dc:	0e 94 19 08 	call	0x1032	; 0x1032 <DIO_voidSetPinValue>
}
    14e0:	2f 96       	adiw	r28, 0x0f	; 15
    14e2:	0f b6       	in	r0, 0x3f	; 63
    14e4:	f8 94       	cli
    14e6:	de bf       	out	0x3e, r29	; 62
    14e8:	0f be       	out	0x3f, r0	; 63
    14ea:	cd bf       	out	0x3d, r28	; 61
    14ec:	cf 91       	pop	r28
    14ee:	df 91       	pop	r29
    14f0:	08 95       	ret

000014f2 <LCD_voidSendCharacter>:

void LCD_voidSendCharacter(u8 Copy_u8Character)
{
    14f2:	df 93       	push	r29
    14f4:	cf 93       	push	r28
    14f6:	cd b7       	in	r28, 0x3d	; 61
    14f8:	de b7       	in	r29, 0x3e	; 62
    14fa:	2f 97       	sbiw	r28, 0x0f	; 15
    14fc:	0f b6       	in	r0, 0x3f	; 63
    14fe:	f8 94       	cli
    1500:	de bf       	out	0x3e, r29	; 62
    1502:	0f be       	out	0x3f, r0	; 63
    1504:	cd bf       	out	0x3d, r28	; 61
    1506:	8f 87       	std	Y+15, r24	; 0x0f
	/*to send data, put RS to high(1)*/

	DIO_voidSetPinValue(LCD_Control_Port,LCD_RS_PIN,DIO_u8PIN_HIGH);// 7ATET AL RS be zero
    1508:	84 e0       	ldi	r24, 0x04	; 4
    150a:	65 e0       	ldi	r22, 0x05	; 5
    150c:	41 e0       	ldi	r20, 0x01	; 1
    150e:	0e 94 19 08 	call	0x1032	; 0x1032 <DIO_voidSetPinValue>
	/*to get to write mode, u have to et RW to low(0)*/
	DIO_voidSetPinValue(LCD_Control_Port,LCD_RW_PIN,DIO_u8PIN_LOW);
    1512:	84 e0       	ldi	r24, 0x04	; 4
    1514:	66 e0       	ldi	r22, 0x06	; 6
    1516:	40 e0       	ldi	r20, 0x00	; 0
    1518:	0e 94 19 08 	call	0x1032	; 0x1032 <DIO_voidSetPinValue>
	/*7ot b2a al data al user hayb3to fel data port(D0---D7)*/
	DIO_voidSetPortValue(LCD_Data_Port,Copy_u8Character);
    151c:	83 e0       	ldi	r24, 0x03	; 3
    151e:	6f 85       	ldd	r22, Y+15	; 0x0f
    1520:	0e 94 1f 09 	call	0x123e	; 0x123e <DIO_voidSetPortValue>
	/*4a8al al enable*/
	DIO_voidSetPinValue(LCD_Control_Port,LCD_E_PIN,DIO_u8PIN_HIGH);
    1524:	84 e0       	ldi	r24, 0x04	; 4
    1526:	67 e0       	ldi	r22, 0x07	; 7
    1528:	41 e0       	ldi	r20, 0x01	; 1
    152a:	0e 94 19 08 	call	0x1032	; 0x1032 <DIO_voidSetPinValue>
    152e:	80 e0       	ldi	r24, 0x00	; 0
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	a0 e0       	ldi	r26, 0x00	; 0
    1534:	b0 e4       	ldi	r27, 0x40	; 64
    1536:	8b 87       	std	Y+11, r24	; 0x0b
    1538:	9c 87       	std	Y+12, r25	; 0x0c
    153a:	ad 87       	std	Y+13, r26	; 0x0d
    153c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    153e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1540:	7c 85       	ldd	r23, Y+12	; 0x0c
    1542:	8d 85       	ldd	r24, Y+13	; 0x0d
    1544:	9e 85       	ldd	r25, Y+14	; 0x0e
    1546:	20 e0       	ldi	r18, 0x00	; 0
    1548:	30 e0       	ldi	r19, 0x00	; 0
    154a:	4a ef       	ldi	r20, 0xFA	; 250
    154c:	54 e4       	ldi	r21, 0x44	; 68
    154e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1552:	dc 01       	movw	r26, r24
    1554:	cb 01       	movw	r24, r22
    1556:	8f 83       	std	Y+7, r24	; 0x07
    1558:	98 87       	std	Y+8, r25	; 0x08
    155a:	a9 87       	std	Y+9, r26	; 0x09
    155c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    155e:	6f 81       	ldd	r22, Y+7	; 0x07
    1560:	78 85       	ldd	r23, Y+8	; 0x08
    1562:	89 85       	ldd	r24, Y+9	; 0x09
    1564:	9a 85       	ldd	r25, Y+10	; 0x0a
    1566:	20 e0       	ldi	r18, 0x00	; 0
    1568:	30 e0       	ldi	r19, 0x00	; 0
    156a:	40 e8       	ldi	r20, 0x80	; 128
    156c:	5f e3       	ldi	r21, 0x3F	; 63
    156e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1572:	88 23       	and	r24, r24
    1574:	2c f4       	brge	.+10     	; 0x1580 <LCD_voidSendCharacter+0x8e>
		__ticks = 1;
    1576:	81 e0       	ldi	r24, 0x01	; 1
    1578:	90 e0       	ldi	r25, 0x00	; 0
    157a:	9e 83       	std	Y+6, r25	; 0x06
    157c:	8d 83       	std	Y+5, r24	; 0x05
    157e:	3f c0       	rjmp	.+126    	; 0x15fe <LCD_voidSendCharacter+0x10c>
	else if (__tmp > 65535)
    1580:	6f 81       	ldd	r22, Y+7	; 0x07
    1582:	78 85       	ldd	r23, Y+8	; 0x08
    1584:	89 85       	ldd	r24, Y+9	; 0x09
    1586:	9a 85       	ldd	r25, Y+10	; 0x0a
    1588:	20 e0       	ldi	r18, 0x00	; 0
    158a:	3f ef       	ldi	r19, 0xFF	; 255
    158c:	4f e7       	ldi	r20, 0x7F	; 127
    158e:	57 e4       	ldi	r21, 0x47	; 71
    1590:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1594:	18 16       	cp	r1, r24
    1596:	4c f5       	brge	.+82     	; 0x15ea <LCD_voidSendCharacter+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1598:	6b 85       	ldd	r22, Y+11	; 0x0b
    159a:	7c 85       	ldd	r23, Y+12	; 0x0c
    159c:	8d 85       	ldd	r24, Y+13	; 0x0d
    159e:	9e 85       	ldd	r25, Y+14	; 0x0e
    15a0:	20 e0       	ldi	r18, 0x00	; 0
    15a2:	30 e0       	ldi	r19, 0x00	; 0
    15a4:	40 e2       	ldi	r20, 0x20	; 32
    15a6:	51 e4       	ldi	r21, 0x41	; 65
    15a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15ac:	dc 01       	movw	r26, r24
    15ae:	cb 01       	movw	r24, r22
    15b0:	bc 01       	movw	r22, r24
    15b2:	cd 01       	movw	r24, r26
    15b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15b8:	dc 01       	movw	r26, r24
    15ba:	cb 01       	movw	r24, r22
    15bc:	9e 83       	std	Y+6, r25	; 0x06
    15be:	8d 83       	std	Y+5, r24	; 0x05
    15c0:	0f c0       	rjmp	.+30     	; 0x15e0 <LCD_voidSendCharacter+0xee>
    15c2:	88 ec       	ldi	r24, 0xC8	; 200
    15c4:	90 e0       	ldi	r25, 0x00	; 0
    15c6:	9c 83       	std	Y+4, r25	; 0x04
    15c8:	8b 83       	std	Y+3, r24	; 0x03
    15ca:	8b 81       	ldd	r24, Y+3	; 0x03
    15cc:	9c 81       	ldd	r25, Y+4	; 0x04
    15ce:	01 97       	sbiw	r24, 0x01	; 1
    15d0:	f1 f7       	brne	.-4      	; 0x15ce <LCD_voidSendCharacter+0xdc>
    15d2:	9c 83       	std	Y+4, r25	; 0x04
    15d4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15d6:	8d 81       	ldd	r24, Y+5	; 0x05
    15d8:	9e 81       	ldd	r25, Y+6	; 0x06
    15da:	01 97       	sbiw	r24, 0x01	; 1
    15dc:	9e 83       	std	Y+6, r25	; 0x06
    15de:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15e0:	8d 81       	ldd	r24, Y+5	; 0x05
    15e2:	9e 81       	ldd	r25, Y+6	; 0x06
    15e4:	00 97       	sbiw	r24, 0x00	; 0
    15e6:	69 f7       	brne	.-38     	; 0x15c2 <LCD_voidSendCharacter+0xd0>
    15e8:	14 c0       	rjmp	.+40     	; 0x1612 <LCD_voidSendCharacter+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15ea:	6f 81       	ldd	r22, Y+7	; 0x07
    15ec:	78 85       	ldd	r23, Y+8	; 0x08
    15ee:	89 85       	ldd	r24, Y+9	; 0x09
    15f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    15f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15f6:	dc 01       	movw	r26, r24
    15f8:	cb 01       	movw	r24, r22
    15fa:	9e 83       	std	Y+6, r25	; 0x06
    15fc:	8d 83       	std	Y+5, r24	; 0x05
    15fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1600:	9e 81       	ldd	r25, Y+6	; 0x06
    1602:	9a 83       	std	Y+2, r25	; 0x02
    1604:	89 83       	std	Y+1, r24	; 0x01
    1606:	89 81       	ldd	r24, Y+1	; 0x01
    1608:	9a 81       	ldd	r25, Y+2	; 0x02
    160a:	01 97       	sbiw	r24, 0x01	; 1
    160c:	f1 f7       	brne	.-4      	; 0x160a <LCD_voidSendCharacter+0x118>
    160e:	9a 83       	std	Y+2, r25	; 0x02
    1610:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);//han3raf leh 2 millisecond 2odam
	DIO_voidSetPinValue(LCD_Control_Port,LCD_E_PIN,DIO_u8PIN_LOW);
    1612:	84 e0       	ldi	r24, 0x04	; 4
    1614:	67 e0       	ldi	r22, 0x07	; 7
    1616:	40 e0       	ldi	r20, 0x00	; 0
    1618:	0e 94 19 08 	call	0x1032	; 0x1032 <DIO_voidSetPinValue>



}
    161c:	2f 96       	adiw	r28, 0x0f	; 15
    161e:	0f b6       	in	r0, 0x3f	; 63
    1620:	f8 94       	cli
    1622:	de bf       	out	0x3e, r29	; 62
    1624:	0f be       	out	0x3f, r0	; 63
    1626:	cd bf       	out	0x3d, r28	; 61
    1628:	cf 91       	pop	r28
    162a:	df 91       	pop	r29
    162c:	08 95       	ret

0000162e <LCD_voidInit>:
void LCD_voidInit(void)//hena ha7ot al direction bta3 pins al data wel control
{
    162e:	df 93       	push	r29
    1630:	cf 93       	push	r28
    1632:	cd b7       	in	r28, 0x3d	; 61
    1634:	de b7       	in	r29, 0x3e	; 62
    1636:	2e 97       	sbiw	r28, 0x0e	; 14
    1638:	0f b6       	in	r0, 0x3f	; 63
    163a:	f8 94       	cli
    163c:	de bf       	out	0x3e, r29	; 62
    163e:	0f be       	out	0x3f, r0	; 63
    1640:	cd bf       	out	0x3d, r28	; 61
	/*ha5aly al data pins output, hya keda 3la tol ayan kan hatla3 commands wla data*/
	DIO_voidSetPortDirection(LCD_Data_Port,DIO_u8PORT_OUTPUT);
    1642:	83 e0       	ldi	r24, 0x03	; 3
    1644:	6f ef       	ldi	r22, 0xFF	; 255
    1646:	0e 94 d7 07 	call	0xfae	; 0xfae <DIO_voidSetPortDirection>
	/*ha5aly bardo al control pins kol wa7da output,bla4 a5aly al control port kolo output 34an dol 3 pins momkn ast3mel nafs al port al 5 pins al ba2yeen fe 7aga tanya*/
	DIO_voidSetPinDirection(LCD_Control_Port,LCD_RS_PIN,DIO_u8PIN_OUTPUT);
    164a:	84 e0       	ldi	r24, 0x04	; 4
    164c:	65 e0       	ldi	r22, 0x05	; 5
    164e:	41 e0       	ldi	r20, 0x01	; 1
    1650:	0e 94 d1 06 	call	0xda2	; 0xda2 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_Control_Port,LCD_RW_PIN,DIO_u8PIN_OUTPUT);
    1654:	84 e0       	ldi	r24, 0x04	; 4
    1656:	66 e0       	ldi	r22, 0x06	; 6
    1658:	41 e0       	ldi	r20, 0x01	; 1
    165a:	0e 94 d1 06 	call	0xda2	; 0xda2 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_Control_Port,LCD_E_PIN,DIO_u8PIN_OUTPUT);
    165e:	84 e0       	ldi	r24, 0x04	; 4
    1660:	67 e0       	ldi	r22, 0x07	; 7
    1662:	41 e0       	ldi	r20, 0x01	; 1
    1664:	0e 94 d1 06 	call	0xda2	; 0xda2 <DIO_voidSetPinDirection>
    1668:	80 e0       	ldi	r24, 0x00	; 0
    166a:	90 e0       	ldi	r25, 0x00	; 0
    166c:	a0 e2       	ldi	r26, 0x20	; 32
    166e:	b2 e4       	ldi	r27, 0x42	; 66
    1670:	8b 87       	std	Y+11, r24	; 0x0b
    1672:	9c 87       	std	Y+12, r25	; 0x0c
    1674:	ad 87       	std	Y+13, r26	; 0x0d
    1676:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1678:	6b 85       	ldd	r22, Y+11	; 0x0b
    167a:	7c 85       	ldd	r23, Y+12	; 0x0c
    167c:	8d 85       	ldd	r24, Y+13	; 0x0d
    167e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1680:	20 e0       	ldi	r18, 0x00	; 0
    1682:	30 e0       	ldi	r19, 0x00	; 0
    1684:	4a ef       	ldi	r20, 0xFA	; 250
    1686:	54 e4       	ldi	r21, 0x44	; 68
    1688:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    168c:	dc 01       	movw	r26, r24
    168e:	cb 01       	movw	r24, r22
    1690:	8f 83       	std	Y+7, r24	; 0x07
    1692:	98 87       	std	Y+8, r25	; 0x08
    1694:	a9 87       	std	Y+9, r26	; 0x09
    1696:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1698:	6f 81       	ldd	r22, Y+7	; 0x07
    169a:	78 85       	ldd	r23, Y+8	; 0x08
    169c:	89 85       	ldd	r24, Y+9	; 0x09
    169e:	9a 85       	ldd	r25, Y+10	; 0x0a
    16a0:	20 e0       	ldi	r18, 0x00	; 0
    16a2:	30 e0       	ldi	r19, 0x00	; 0
    16a4:	40 e8       	ldi	r20, 0x80	; 128
    16a6:	5f e3       	ldi	r21, 0x3F	; 63
    16a8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16ac:	88 23       	and	r24, r24
    16ae:	2c f4       	brge	.+10     	; 0x16ba <LCD_voidInit+0x8c>
		__ticks = 1;
    16b0:	81 e0       	ldi	r24, 0x01	; 1
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	9e 83       	std	Y+6, r25	; 0x06
    16b6:	8d 83       	std	Y+5, r24	; 0x05
    16b8:	3f c0       	rjmp	.+126    	; 0x1738 <LCD_voidInit+0x10a>
	else if (__tmp > 65535)
    16ba:	6f 81       	ldd	r22, Y+7	; 0x07
    16bc:	78 85       	ldd	r23, Y+8	; 0x08
    16be:	89 85       	ldd	r24, Y+9	; 0x09
    16c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    16c2:	20 e0       	ldi	r18, 0x00	; 0
    16c4:	3f ef       	ldi	r19, 0xFF	; 255
    16c6:	4f e7       	ldi	r20, 0x7F	; 127
    16c8:	57 e4       	ldi	r21, 0x47	; 71
    16ca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16ce:	18 16       	cp	r1, r24
    16d0:	4c f5       	brge	.+82     	; 0x1724 <LCD_voidInit+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    16d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    16d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    16d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    16da:	20 e0       	ldi	r18, 0x00	; 0
    16dc:	30 e0       	ldi	r19, 0x00	; 0
    16de:	40 e2       	ldi	r20, 0x20	; 32
    16e0:	51 e4       	ldi	r21, 0x41	; 65
    16e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16e6:	dc 01       	movw	r26, r24
    16e8:	cb 01       	movw	r24, r22
    16ea:	bc 01       	movw	r22, r24
    16ec:	cd 01       	movw	r24, r26
    16ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16f2:	dc 01       	movw	r26, r24
    16f4:	cb 01       	movw	r24, r22
    16f6:	9e 83       	std	Y+6, r25	; 0x06
    16f8:	8d 83       	std	Y+5, r24	; 0x05
    16fa:	0f c0       	rjmp	.+30     	; 0x171a <LCD_voidInit+0xec>
    16fc:	88 ec       	ldi	r24, 0xC8	; 200
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	9c 83       	std	Y+4, r25	; 0x04
    1702:	8b 83       	std	Y+3, r24	; 0x03
    1704:	8b 81       	ldd	r24, Y+3	; 0x03
    1706:	9c 81       	ldd	r25, Y+4	; 0x04
    1708:	01 97       	sbiw	r24, 0x01	; 1
    170a:	f1 f7       	brne	.-4      	; 0x1708 <LCD_voidInit+0xda>
    170c:	9c 83       	std	Y+4, r25	; 0x04
    170e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1710:	8d 81       	ldd	r24, Y+5	; 0x05
    1712:	9e 81       	ldd	r25, Y+6	; 0x06
    1714:	01 97       	sbiw	r24, 0x01	; 1
    1716:	9e 83       	std	Y+6, r25	; 0x06
    1718:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    171a:	8d 81       	ldd	r24, Y+5	; 0x05
    171c:	9e 81       	ldd	r25, Y+6	; 0x06
    171e:	00 97       	sbiw	r24, 0x00	; 0
    1720:	69 f7       	brne	.-38     	; 0x16fc <LCD_voidInit+0xce>
    1722:	14 c0       	rjmp	.+40     	; 0x174c <LCD_voidInit+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1724:	6f 81       	ldd	r22, Y+7	; 0x07
    1726:	78 85       	ldd	r23, Y+8	; 0x08
    1728:	89 85       	ldd	r24, Y+9	; 0x09
    172a:	9a 85       	ldd	r25, Y+10	; 0x0a
    172c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1730:	dc 01       	movw	r26, r24
    1732:	cb 01       	movw	r24, r22
    1734:	9e 83       	std	Y+6, r25	; 0x06
    1736:	8d 83       	std	Y+5, r24	; 0x05
    1738:	8d 81       	ldd	r24, Y+5	; 0x05
    173a:	9e 81       	ldd	r25, Y+6	; 0x06
    173c:	9a 83       	std	Y+2, r25	; 0x02
    173e:	89 83       	std	Y+1, r24	; 0x01
    1740:	89 81       	ldd	r24, Y+1	; 0x01
    1742:	9a 81       	ldd	r25, Y+2	; 0x02
    1744:	01 97       	sbiw	r24, 0x01	; 1
    1746:	f1 f7       	brne	.-4      	; 0x1744 <LCD_voidInit+0x116>
    1748:	9a 83       	std	Y+2, r25	; 0x02
    174a:	89 83       	std	Y+1, r24	; 0x01
_delay_ms(40);
/*In 8 bit initialization (data sheet) we have to send commands of 0b0011NFxx(Ma4ro7a fel kashkol)
 *N:Number of lines, 0:for 1 line, 1:for two lines
 *F:Font size, 0:for 5*8 ,1:for 5*11
 *x:Dont care (0 or 1 doesnt matter)*/
  LCD_voidSendCommand(0b00111000);
    174c:	88 e3       	ldi	r24, 0x38	; 56
    174e:	0e 94 db 09 	call	0x13b6	; 0x13b6 <LCD_voidSendCommand>
  /*Initialize display on-off
   *D:display 0:disable 1: enable
   *C:cursor 0: disable 1: enable
   *B: blinking cursor : 0: fixed 1: blinking  */
  LCD_voidSendCommand(0b00001100);
    1752:	8c e0       	ldi	r24, 0x0C	; 12
    1754:	0e 94 db 09 	call	0x13b6	; 0x13b6 <LCD_voidSendCommand>
/*To clear display(tenadaf ale etkatab 2abl keda)*/
  LCD_voidSendCommand(0b00000001);
    1758:	81 e0       	ldi	r24, 0x01	; 1
    175a:	0e 94 db 09 	call	0x13b6	; 0x13b6 <LCD_voidSendCommand>

}
    175e:	2e 96       	adiw	r28, 0x0e	; 14
    1760:	0f b6       	in	r0, 0x3f	; 63
    1762:	f8 94       	cli
    1764:	de bf       	out	0x3e, r29	; 62
    1766:	0f be       	out	0x3f, r0	; 63
    1768:	cd bf       	out	0x3d, r28	; 61
    176a:	cf 91       	pop	r28
    176c:	df 91       	pop	r29
    176e:	08 95       	ret

00001770 <LCD_voidPosition>:
void LCD_voidPosition(u8 Copy_u8RowPos,u8 Copy_u8ColPos){
    1770:	df 93       	push	r29
    1772:	cf 93       	push	r28
    1774:	00 d0       	rcall	.+0      	; 0x1776 <LCD_voidPosition+0x6>
    1776:	0f 92       	push	r0
    1778:	cd b7       	in	r28, 0x3d	; 61
    177a:	de b7       	in	r29, 0x3e	; 62
    177c:	8a 83       	std	Y+2, r24	; 0x02
    177e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Address;
	/*Setting the address location if the user wants to set the posion in the first row*/
	if(Copy_u8RowPos==0){
    1780:	8a 81       	ldd	r24, Y+2	; 0x02
    1782:	88 23       	and	r24, r24
    1784:	19 f4       	brne	.+6      	; 0x178c <LCD_voidPosition+0x1c>
		Local_u8Address=Copy_u8ColPos;
    1786:	8b 81       	ldd	r24, Y+3	; 0x03
    1788:	89 83       	std	Y+1, r24	; 0x01
    178a:	06 c0       	rjmp	.+12     	; 0x1798 <LCD_voidPosition+0x28>

	}
	/*Setting the address location if the user wants to set the posion in the second row*/
	else if(Copy_u8RowPos==1){
    178c:	8a 81       	ldd	r24, Y+2	; 0x02
    178e:	81 30       	cpi	r24, 0x01	; 1
    1790:	19 f4       	brne	.+6      	; 0x1798 <LCD_voidPosition+0x28>
		Local_u8Address=Copy_u8ColPos+0x40;
    1792:	8b 81       	ldd	r24, Y+3	; 0x03
    1794:	80 5c       	subi	r24, 0xC0	; 192
    1796:	89 83       	std	Y+1, r24	; 0x01
	}
	/*ana keda 3rf al location na2es ab3to lel LCD ,mawgoda fel datasheet ezay ab3t al address lel DDRAM*/
	//ma4o7a fel ka4kol
	LCD_voidSendCommand(Local_u8Address+128);
    1798:	89 81       	ldd	r24, Y+1	; 0x01
    179a:	80 58       	subi	r24, 0x80	; 128
    179c:	0e 94 db 09 	call	0x13b6	; 0x13b6 <LCD_voidSendCommand>
	}
    17a0:	0f 90       	pop	r0
    17a2:	0f 90       	pop	r0
    17a4:	0f 90       	pop	r0
    17a6:	cf 91       	pop	r28
    17a8:	df 91       	pop	r29
    17aa:	08 95       	ret

000017ac <LCD_voidSendString>:



/*String is an array of charachters, and the last charachter is (/0)
 */
void LCD_voidSendString(char*Copy_pcString){
    17ac:	df 93       	push	r29
    17ae:	cf 93       	push	r28
    17b0:	00 d0       	rcall	.+0      	; 0x17b2 <LCD_voidSendString+0x6>
    17b2:	0f 92       	push	r0
    17b4:	cd b7       	in	r28, 0x3d	; 61
    17b6:	de b7       	in	r29, 0x3e	; 62
    17b8:	9b 83       	std	Y+3, r25	; 0x03
    17ba:	8a 83       	std	Y+2, r24	; 0x02
    17bc:	0e c0       	rjmp	.+28     	; 0x17da <LCD_voidSendString+0x2e>

	u8 Local_u8Counter;
	while(Copy_pcString[Local_u8Counter]!='\0')
	{
		LCD_voidSendCharacter(Copy_pcString[Local_u8Counter]);
    17be:	89 81       	ldd	r24, Y+1	; 0x01
    17c0:	28 2f       	mov	r18, r24
    17c2:	30 e0       	ldi	r19, 0x00	; 0
    17c4:	8a 81       	ldd	r24, Y+2	; 0x02
    17c6:	9b 81       	ldd	r25, Y+3	; 0x03
    17c8:	fc 01       	movw	r30, r24
    17ca:	e2 0f       	add	r30, r18
    17cc:	f3 1f       	adc	r31, r19
    17ce:	80 81       	ld	r24, Z
    17d0:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <LCD_voidSendCharacter>
		Local_u8Counter++;
    17d4:	89 81       	ldd	r24, Y+1	; 0x01
    17d6:	8f 5f       	subi	r24, 0xFF	; 255
    17d8:	89 83       	std	Y+1, r24	; 0x01
/*String is an array of charachters, and the last charachter is (/0)
 */
void LCD_voidSendString(char*Copy_pcString){

	u8 Local_u8Counter;
	while(Copy_pcString[Local_u8Counter]!='\0')
    17da:	89 81       	ldd	r24, Y+1	; 0x01
    17dc:	28 2f       	mov	r18, r24
    17de:	30 e0       	ldi	r19, 0x00	; 0
    17e0:	8a 81       	ldd	r24, Y+2	; 0x02
    17e2:	9b 81       	ldd	r25, Y+3	; 0x03
    17e4:	fc 01       	movw	r30, r24
    17e6:	e2 0f       	add	r30, r18
    17e8:	f3 1f       	adc	r31, r19
    17ea:	80 81       	ld	r24, Z
    17ec:	88 23       	and	r24, r24
    17ee:	39 f7       	brne	.-50     	; 0x17be <LCD_voidSendString+0x12>
	{
		LCD_voidSendCharacter(Copy_pcString[Local_u8Counter]);
		Local_u8Counter++;
	}

}
    17f0:	0f 90       	pop	r0
    17f2:	0f 90       	pop	r0
    17f4:	0f 90       	pop	r0
    17f6:	cf 91       	pop	r28
    17f8:	df 91       	pop	r29
    17fa:	08 95       	ret

000017fc <LCD_voidDrawSpecialCharachter>:


void LCD_voidDrawSpecialCharachter(u8*Copy_pu8Pattern,u8 Copy_u8LocationNum,u8 Copy_u8RowNum,u8 Copy_u8ColNum)
{
    17fc:	df 93       	push	r29
    17fe:	cf 93       	push	r28
    1800:	cd b7       	in	r28, 0x3d	; 61
    1802:	de b7       	in	r29, 0x3e	; 62
    1804:	27 97       	sbiw	r28, 0x07	; 7
    1806:	0f b6       	in	r0, 0x3f	; 63
    1808:	f8 94       	cli
    180a:	de bf       	out	0x3e, r29	; 62
    180c:	0f be       	out	0x3f, r0	; 63
    180e:	cd bf       	out	0x3d, r28	; 61
    1810:	9c 83       	std	Y+4, r25	; 0x04
    1812:	8b 83       	std	Y+3, r24	; 0x03
    1814:	6d 83       	std	Y+5, r22	; 0x05
    1816:	4e 83       	std	Y+6, r20	; 0x06
    1818:	2f 83       	std	Y+7, r18	; 0x07
/*Accessing the CGRAM address*/
	u8 Local_u8CGRAMAddress,Local_u8Counter;
	Local_u8CGRAMAddress=Copy_u8LocationNum*8;//ma4ro7a fel ka4kol
    181a:	8d 81       	ldd	r24, Y+5	; 0x05
    181c:	88 2f       	mov	r24, r24
    181e:	90 e0       	ldi	r25, 0x00	; 0
    1820:	88 0f       	add	r24, r24
    1822:	99 1f       	adc	r25, r25
    1824:	88 0f       	add	r24, r24
    1826:	99 1f       	adc	r25, r25
    1828:	88 0f       	add	r24, r24
    182a:	99 1f       	adc	r25, r25
    182c:	8a 83       	std	Y+2, r24	; 0x02
	/*Accesing CGRAM of lcd by command 0b01xxxxxx*/
LCD_voidSendCommand(Local_u8CGRAMAddress+64);
    182e:	8a 81       	ldd	r24, Y+2	; 0x02
    1830:	80 5c       	subi	r24, 0xC0	; 192
    1832:	0e 94 db 09 	call	0x13b6	; 0x13b6 <LCD_voidSendCommand>
/*Write the pattern on CGRAM*/
/*zy makont ba3mel fel string ha3mel hena , bas al fekra ane hawa2f al loop 3nd (((8))) ale howa max bytes in a location in the CGRAM fal user masaln e5tar location 0 fa2a5ro feh 8 charachters ale homa 8 bytes*/
for(Local_u8Counter=0;Local_u8Counter<8;Local_u8Counter++)
    1836:	19 82       	std	Y+1, r1	; 0x01
    1838:	0e c0       	rjmp	.+28     	; 0x1856 <LCD_voidDrawSpecialCharachter+0x5a>
{
LCD_voidSendCharacter(Copy_pu8Pattern[Local_u8Counter]);
    183a:	89 81       	ldd	r24, Y+1	; 0x01
    183c:	28 2f       	mov	r18, r24
    183e:	30 e0       	ldi	r19, 0x00	; 0
    1840:	8b 81       	ldd	r24, Y+3	; 0x03
    1842:	9c 81       	ldd	r25, Y+4	; 0x04
    1844:	fc 01       	movw	r30, r24
    1846:	e2 0f       	add	r30, r18
    1848:	f3 1f       	adc	r31, r19
    184a:	80 81       	ld	r24, Z
    184c:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <LCD_voidSendCharacter>
	Local_u8CGRAMAddress=Copy_u8LocationNum*8;//ma4ro7a fel ka4kol
	/*Accesing CGRAM of lcd by command 0b01xxxxxx*/
LCD_voidSendCommand(Local_u8CGRAMAddress+64);
/*Write the pattern on CGRAM*/
/*zy makont ba3mel fel string ha3mel hena , bas al fekra ane hawa2f al loop 3nd (((8))) ale howa max bytes in a location in the CGRAM fal user masaln e5tar location 0 fa2a5ro feh 8 charachters ale homa 8 bytes*/
for(Local_u8Counter=0;Local_u8Counter<8;Local_u8Counter++)
    1850:	89 81       	ldd	r24, Y+1	; 0x01
    1852:	8f 5f       	subi	r24, 0xFF	; 255
    1854:	89 83       	std	Y+1, r24	; 0x01
    1856:	89 81       	ldd	r24, Y+1	; 0x01
    1858:	88 30       	cpi	r24, 0x08	; 8
    185a:	78 f3       	brcs	.-34     	; 0x183a <LCD_voidDrawSpecialCharachter+0x3e>
{
LCD_voidSendCharacter(Copy_pu8Pattern[Local_u8Counter]);
}
/*Keda e7na 7atena al pattern fe location mo3yn fel CGRAM, fa na2esna bas neb3at al pattern lel DDRAM 34an n7oto fel LCD */
/*kona fo2 3malna command 34an ne access al CGRAM 34an ne access al DDRAM lazem command tany,,wel set position feha asln al command dah*/
LCD_voidPosition(Copy_u8RowNum,Copy_u8ColNum);
    185c:	8e 81       	ldd	r24, Y+6	; 0x06
    185e:	6f 81       	ldd	r22, Y+7	; 0x07
    1860:	0e 94 b8 0b 	call	0x1770	; 0x1770 <LCD_voidPosition>
LCD_voidSendCharacter(Copy_u8LocationNum);
    1864:	8d 81       	ldd	r24, Y+5	; 0x05
    1866:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <LCD_voidSendCharacter>
}
    186a:	27 96       	adiw	r28, 0x07	; 7
    186c:	0f b6       	in	r0, 0x3f	; 63
    186e:	f8 94       	cli
    1870:	de bf       	out	0x3e, r29	; 62
    1872:	0f be       	out	0x3f, r0	; 63
    1874:	cd bf       	out	0x3d, r28	; 61
    1876:	cf 91       	pop	r28
    1878:	df 91       	pop	r29
    187a:	08 95       	ret

0000187c <LCD_voidClear>:

void LCD_voidClear(void)
{
    187c:	df 93       	push	r29
    187e:	cf 93       	push	r28
    1880:	cd b7       	in	r28, 0x3d	; 61
    1882:	de b7       	in	r29, 0x3e	; 62

	LCD_voidSendCommand(0b00000001);
    1884:	81 e0       	ldi	r24, 0x01	; 1
    1886:	0e 94 db 09 	call	0x13b6	; 0x13b6 <LCD_voidSendCommand>
}
    188a:	cf 91       	pop	r28
    188c:	df 91       	pop	r29
    188e:	08 95       	ret

00001890 <LCD_voidWriteNum>:
void LCD_voidWriteNum(u32 copy_u32Number)
{
    1890:	df 93       	push	r29
    1892:	cf 93       	push	r28
    1894:	cd b7       	in	r28, 0x3d	; 61
    1896:	de b7       	in	r29, 0x3e	; 62
    1898:	29 97       	sbiw	r28, 0x09	; 9
    189a:	0f b6       	in	r0, 0x3f	; 63
    189c:	f8 94       	cli
    189e:	de bf       	out	0x3e, r29	; 62
    18a0:	0f be       	out	0x3f, r0	; 63
    18a2:	cd bf       	out	0x3d, r28	; 61
    18a4:	6e 83       	std	Y+6, r22	; 0x06
    18a6:	7f 83       	std	Y+7, r23	; 0x07
    18a8:	88 87       	std	Y+8, r24	; 0x08
    18aa:	99 87       	std	Y+9, r25	; 0x09
	u8 FirstDigit=0;
    18ac:	1d 82       	std	Y+5, r1	; 0x05
	for(u32 i=1000000000;i>0;i/=10)
    18ae:	80 e0       	ldi	r24, 0x00	; 0
    18b0:	9a ec       	ldi	r25, 0xCA	; 202
    18b2:	aa e9       	ldi	r26, 0x9A	; 154
    18b4:	bb e3       	ldi	r27, 0x3B	; 59
    18b6:	89 83       	std	Y+1, r24	; 0x01
    18b8:	9a 83       	std	Y+2, r25	; 0x02
    18ba:	ab 83       	std	Y+3, r26	; 0x03
    18bc:	bc 83       	std	Y+4, r27	; 0x04
    18be:	50 c0       	rjmp	.+160    	; 0x1960 <LCD_voidWriteNum+0xd0>
	{

		if(copy_u32Number/i>0)
    18c0:	8e 81       	ldd	r24, Y+6	; 0x06
    18c2:	9f 81       	ldd	r25, Y+7	; 0x07
    18c4:	a8 85       	ldd	r26, Y+8	; 0x08
    18c6:	b9 85       	ldd	r27, Y+9	; 0x09
    18c8:	29 81       	ldd	r18, Y+1	; 0x01
    18ca:	3a 81       	ldd	r19, Y+2	; 0x02
    18cc:	4b 81       	ldd	r20, Y+3	; 0x03
    18ce:	5c 81       	ldd	r21, Y+4	; 0x04
    18d0:	bc 01       	movw	r22, r24
    18d2:	cd 01       	movw	r24, r26
    18d4:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <__udivmodsi4>
    18d8:	da 01       	movw	r26, r20
    18da:	c9 01       	movw	r24, r18
    18dc:	00 97       	sbiw	r24, 0x00	; 0
    18de:	a1 05       	cpc	r26, r1
    18e0:	b1 05       	cpc	r27, r1
    18e2:	31 f1       	breq	.+76     	; 0x1930 <LCD_voidWriteNum+0xa0>
		{
			LCD_voidSendCharacter(copy_u32Number/i+48);
    18e4:	8e 81       	ldd	r24, Y+6	; 0x06
    18e6:	9f 81       	ldd	r25, Y+7	; 0x07
    18e8:	a8 85       	ldd	r26, Y+8	; 0x08
    18ea:	b9 85       	ldd	r27, Y+9	; 0x09
    18ec:	29 81       	ldd	r18, Y+1	; 0x01
    18ee:	3a 81       	ldd	r19, Y+2	; 0x02
    18f0:	4b 81       	ldd	r20, Y+3	; 0x03
    18f2:	5c 81       	ldd	r21, Y+4	; 0x04
    18f4:	bc 01       	movw	r22, r24
    18f6:	cd 01       	movw	r24, r26
    18f8:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <__udivmodsi4>
    18fc:	da 01       	movw	r26, r20
    18fe:	c9 01       	movw	r24, r18
    1900:	80 5d       	subi	r24, 0xD0	; 208
    1902:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <LCD_voidSendCharacter>
			copy_u32Number%=i;
    1906:	8e 81       	ldd	r24, Y+6	; 0x06
    1908:	9f 81       	ldd	r25, Y+7	; 0x07
    190a:	a8 85       	ldd	r26, Y+8	; 0x08
    190c:	b9 85       	ldd	r27, Y+9	; 0x09
    190e:	29 81       	ldd	r18, Y+1	; 0x01
    1910:	3a 81       	ldd	r19, Y+2	; 0x02
    1912:	4b 81       	ldd	r20, Y+3	; 0x03
    1914:	5c 81       	ldd	r21, Y+4	; 0x04
    1916:	bc 01       	movw	r22, r24
    1918:	cd 01       	movw	r24, r26
    191a:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <__udivmodsi4>
    191e:	dc 01       	movw	r26, r24
    1920:	cb 01       	movw	r24, r22
    1922:	8e 83       	std	Y+6, r24	; 0x06
    1924:	9f 83       	std	Y+7, r25	; 0x07
    1926:	a8 87       	std	Y+8, r26	; 0x08
    1928:	b9 87       	std	Y+9, r27	; 0x09
			FirstDigit=1;
    192a:	81 e0       	ldi	r24, 0x01	; 1
    192c:	8d 83       	std	Y+5, r24	; 0x05
    192e:	06 c0       	rjmp	.+12     	; 0x193c <LCD_voidWriteNum+0xac>
		}
		// print 0 after the first digit
		else if(FirstDigit==1)
    1930:	8d 81       	ldd	r24, Y+5	; 0x05
    1932:	81 30       	cpi	r24, 0x01	; 1
    1934:	19 f4       	brne	.+6      	; 0x193c <LCD_voidWriteNum+0xac>
		{
			LCD_voidSendCharacter(48);
    1936:	80 e3       	ldi	r24, 0x30	; 48
    1938:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <LCD_voidSendCharacter>
	LCD_voidSendCommand(0b00000001);
}
void LCD_voidWriteNum(u32 copy_u32Number)
{
	u8 FirstDigit=0;
	for(u32 i=1000000000;i>0;i/=10)
    193c:	89 81       	ldd	r24, Y+1	; 0x01
    193e:	9a 81       	ldd	r25, Y+2	; 0x02
    1940:	ab 81       	ldd	r26, Y+3	; 0x03
    1942:	bc 81       	ldd	r27, Y+4	; 0x04
    1944:	2a e0       	ldi	r18, 0x0A	; 10
    1946:	30 e0       	ldi	r19, 0x00	; 0
    1948:	40 e0       	ldi	r20, 0x00	; 0
    194a:	50 e0       	ldi	r21, 0x00	; 0
    194c:	bc 01       	movw	r22, r24
    194e:	cd 01       	movw	r24, r26
    1950:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <__udivmodsi4>
    1954:	da 01       	movw	r26, r20
    1956:	c9 01       	movw	r24, r18
    1958:	89 83       	std	Y+1, r24	; 0x01
    195a:	9a 83       	std	Y+2, r25	; 0x02
    195c:	ab 83       	std	Y+3, r26	; 0x03
    195e:	bc 83       	std	Y+4, r27	; 0x04
    1960:	89 81       	ldd	r24, Y+1	; 0x01
    1962:	9a 81       	ldd	r25, Y+2	; 0x02
    1964:	ab 81       	ldd	r26, Y+3	; 0x03
    1966:	bc 81       	ldd	r27, Y+4	; 0x04
    1968:	00 97       	sbiw	r24, 0x00	; 0
    196a:	a1 05       	cpc	r26, r1
    196c:	b1 05       	cpc	r27, r1
    196e:	09 f0       	breq	.+2      	; 0x1972 <LCD_voidWriteNum+0xe2>
    1970:	a7 cf       	rjmp	.-178    	; 0x18c0 <LCD_voidWriteNum+0x30>
		else if(FirstDigit==1)
		{
			LCD_voidSendCharacter(48);
		}
	}
}
    1972:	29 96       	adiw	r28, 0x09	; 9
    1974:	0f b6       	in	r0, 0x3f	; 63
    1976:	f8 94       	cli
    1978:	de bf       	out	0x3e, r29	; 62
    197a:	0f be       	out	0x3f, r0	; 63
    197c:	cd bf       	out	0x3d, r28	; 61
    197e:	cf 91       	pop	r28
    1980:	df 91       	pop	r29
    1982:	08 95       	ret

00001984 <main>:


void Lamp_On (void);
void Lamp_OFF(void);
void main(void)
{
    1984:	df 93       	push	r29
    1986:	cf 93       	push	r28
    1988:	cd b7       	in	r28, 0x3d	; 61
    198a:	de b7       	in	r29, 0x3e	; 62
    198c:	2e 97       	sbiw	r28, 0x0e	; 14
    198e:	0f b6       	in	r0, 0x3f	; 63
    1990:	f8 94       	cli
    1992:	de bf       	out	0x3e, r29	; 62
    1994:	0f be       	out	0x3f, r0	; 63
    1996:	cd bf       	out	0x3d, r28	; 61
	/*Defining the lamp pin as output*/
		DIO_voidSetPinDirection(DIO_u8PORTB,DIO_u8PIN4,DIO_u8PIN_OUTPUT);
    1998:	82 e0       	ldi	r24, 0x02	; 2
    199a:	64 e0       	ldi	r22, 0x04	; 4
    199c:	41 e0       	ldi	r20, 0x01	; 1
    199e:	0e 94 d1 06 	call	0xda2	; 0xda2 <DIO_voidSetPinDirection>

	 /*Setting the ADC channel pin to input*/
	 DIO_voidSetPinDirection(DIO_u8PORTA,DIO_u8PIN7,DIO_u8PIN_INPUT);
    19a2:	81 e0       	ldi	r24, 0x01	; 1
    19a4:	67 e0       	ldi	r22, 0x07	; 7
    19a6:	40 e0       	ldi	r20, 0x00	; 0
    19a8:	0e 94 d1 06 	call	0xda2	; 0xda2 <DIO_voidSetPinDirection>

	 /*Initializing the ADC*/
	 ADC_voidADCInit();
    19ac:	0e 94 a3 05 	call	0xb46	; 0xb46 <ADC_voidADCInit>

     /*Initiazlize the LCD*/
	 LCD_voidInit();
    19b0:	0e 94 17 0b 	call	0x162e	; 0x162e <LCD_voidInit>

	 /*Clearing the LCD*/
	 LCD_voidClear();
    19b4:	0e 94 3e 0c 	call	0x187c	; 0x187c <LCD_voidClear>

	 /*Setting Starting position*/
	 LCD_voidPosition(0,0);
    19b8:	80 e0       	ldi	r24, 0x00	; 0
    19ba:	60 e0       	ldi	r22, 0x00	; 0
    19bc:	0e 94 b8 0b 	call	0x1770	; 0x1770 <LCD_voidPosition>
	 Lamp_On();
    19c0:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <Lamp_On>


	while(1)
	{

    App_u8DigitalChannelRead=ADC_u8GetChannelReadSynch(7);
    19c4:	87 e0       	ldi	r24, 0x07	; 7
    19c6:	0e 94 db 05 	call	0xbb6	; 0xbb6 <ADC_u8GetChannelReadSynch>
    19ca:	80 93 6c 00 	sts	0x006C, r24
   // App_AnalogValue_millivolt=((u32)App_u8DigitalChannelRead*5000UL)/256UL;
    //App_TempretureReading=App_AnalogValue_millivolt/10;
    App_TempretureReading=App_u8DigitalChannelRead/2;
    19ce:	80 91 6c 00 	lds	r24, 0x006C
    19d2:	86 95       	lsr	r24
    19d4:	80 93 6f 00 	sts	0x006F, r24
    LCD_voidWriteNum(App_TempretureReading);
    19d8:	80 91 6f 00 	lds	r24, 0x006F
    19dc:	88 2f       	mov	r24, r24
    19de:	90 e0       	ldi	r25, 0x00	; 0
    19e0:	a0 e0       	ldi	r26, 0x00	; 0
    19e2:	b0 e0       	ldi	r27, 0x00	; 0
    19e4:	bc 01       	movw	r22, r24
    19e6:	cd 01       	movw	r24, r26
    19e8:	0e 94 48 0c 	call	0x1890	; 0x1890 <LCD_voidWriteNum>
    19ec:	80 e0       	ldi	r24, 0x00	; 0
    19ee:	90 e0       	ldi	r25, 0x00	; 0
    19f0:	aa e7       	ldi	r26, 0x7A	; 122
    19f2:	b4 e4       	ldi	r27, 0x44	; 68
    19f4:	8b 87       	std	Y+11, r24	; 0x0b
    19f6:	9c 87       	std	Y+12, r25	; 0x0c
    19f8:	ad 87       	std	Y+13, r26	; 0x0d
    19fa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    19fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a00:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a02:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a04:	20 e0       	ldi	r18, 0x00	; 0
    1a06:	30 e0       	ldi	r19, 0x00	; 0
    1a08:	4a ef       	ldi	r20, 0xFA	; 250
    1a0a:	54 e4       	ldi	r21, 0x44	; 68
    1a0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a10:	dc 01       	movw	r26, r24
    1a12:	cb 01       	movw	r24, r22
    1a14:	8f 83       	std	Y+7, r24	; 0x07
    1a16:	98 87       	std	Y+8, r25	; 0x08
    1a18:	a9 87       	std	Y+9, r26	; 0x09
    1a1a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a1c:	6f 81       	ldd	r22, Y+7	; 0x07
    1a1e:	78 85       	ldd	r23, Y+8	; 0x08
    1a20:	89 85       	ldd	r24, Y+9	; 0x09
    1a22:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a24:	20 e0       	ldi	r18, 0x00	; 0
    1a26:	30 e0       	ldi	r19, 0x00	; 0
    1a28:	40 e8       	ldi	r20, 0x80	; 128
    1a2a:	5f e3       	ldi	r21, 0x3F	; 63
    1a2c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a30:	88 23       	and	r24, r24
    1a32:	2c f4       	brge	.+10     	; 0x1a3e <main+0xba>
		__ticks = 1;
    1a34:	81 e0       	ldi	r24, 0x01	; 1
    1a36:	90 e0       	ldi	r25, 0x00	; 0
    1a38:	9e 83       	std	Y+6, r25	; 0x06
    1a3a:	8d 83       	std	Y+5, r24	; 0x05
    1a3c:	3f c0       	rjmp	.+126    	; 0x1abc <main+0x138>
	else if (__tmp > 65535)
    1a3e:	6f 81       	ldd	r22, Y+7	; 0x07
    1a40:	78 85       	ldd	r23, Y+8	; 0x08
    1a42:	89 85       	ldd	r24, Y+9	; 0x09
    1a44:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a46:	20 e0       	ldi	r18, 0x00	; 0
    1a48:	3f ef       	ldi	r19, 0xFF	; 255
    1a4a:	4f e7       	ldi	r20, 0x7F	; 127
    1a4c:	57 e4       	ldi	r21, 0x47	; 71
    1a4e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a52:	18 16       	cp	r1, r24
    1a54:	4c f5       	brge	.+82     	; 0x1aa8 <main+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a56:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a58:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a5a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a5c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a5e:	20 e0       	ldi	r18, 0x00	; 0
    1a60:	30 e0       	ldi	r19, 0x00	; 0
    1a62:	40 e2       	ldi	r20, 0x20	; 32
    1a64:	51 e4       	ldi	r21, 0x41	; 65
    1a66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a6a:	dc 01       	movw	r26, r24
    1a6c:	cb 01       	movw	r24, r22
    1a6e:	bc 01       	movw	r22, r24
    1a70:	cd 01       	movw	r24, r26
    1a72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a76:	dc 01       	movw	r26, r24
    1a78:	cb 01       	movw	r24, r22
    1a7a:	9e 83       	std	Y+6, r25	; 0x06
    1a7c:	8d 83       	std	Y+5, r24	; 0x05
    1a7e:	0f c0       	rjmp	.+30     	; 0x1a9e <main+0x11a>
    1a80:	88 ec       	ldi	r24, 0xC8	; 200
    1a82:	90 e0       	ldi	r25, 0x00	; 0
    1a84:	9c 83       	std	Y+4, r25	; 0x04
    1a86:	8b 83       	std	Y+3, r24	; 0x03
    1a88:	8b 81       	ldd	r24, Y+3	; 0x03
    1a8a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a8c:	01 97       	sbiw	r24, 0x01	; 1
    1a8e:	f1 f7       	brne	.-4      	; 0x1a8c <main+0x108>
    1a90:	9c 83       	std	Y+4, r25	; 0x04
    1a92:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a94:	8d 81       	ldd	r24, Y+5	; 0x05
    1a96:	9e 81       	ldd	r25, Y+6	; 0x06
    1a98:	01 97       	sbiw	r24, 0x01	; 1
    1a9a:	9e 83       	std	Y+6, r25	; 0x06
    1a9c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a9e:	8d 81       	ldd	r24, Y+5	; 0x05
    1aa0:	9e 81       	ldd	r25, Y+6	; 0x06
    1aa2:	00 97       	sbiw	r24, 0x00	; 0
    1aa4:	69 f7       	brne	.-38     	; 0x1a80 <main+0xfc>
    1aa6:	14 c0       	rjmp	.+40     	; 0x1ad0 <main+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aa8:	6f 81       	ldd	r22, Y+7	; 0x07
    1aaa:	78 85       	ldd	r23, Y+8	; 0x08
    1aac:	89 85       	ldd	r24, Y+9	; 0x09
    1aae:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ab0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ab4:	dc 01       	movw	r26, r24
    1ab6:	cb 01       	movw	r24, r22
    1ab8:	9e 83       	std	Y+6, r25	; 0x06
    1aba:	8d 83       	std	Y+5, r24	; 0x05
    1abc:	8d 81       	ldd	r24, Y+5	; 0x05
    1abe:	9e 81       	ldd	r25, Y+6	; 0x06
    1ac0:	9a 83       	std	Y+2, r25	; 0x02
    1ac2:	89 83       	std	Y+1, r24	; 0x01
    1ac4:	89 81       	ldd	r24, Y+1	; 0x01
    1ac6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ac8:	01 97       	sbiw	r24, 0x01	; 1
    1aca:	f1 f7       	brne	.-4      	; 0x1ac8 <main+0x144>
    1acc:	9a 83       	std	Y+2, r25	; 0x02
    1ace:	89 83       	std	Y+1, r24	; 0x01

     _delay_ms(1000);
LCD_voidClear();
    1ad0:	0e 94 3e 0c 	call	0x187c	; 0x187c <LCD_voidClear>
LCD_voidPosition(0,0);
    1ad4:	80 e0       	ldi	r24, 0x00	; 0
    1ad6:	60 e0       	ldi	r22, 0x00	; 0
    1ad8:	0e 94 b8 0b 	call	0x1770	; 0x1770 <LCD_voidPosition>
    1adc:	73 cf       	rjmp	.-282    	; 0x19c4 <main+0x40>

00001ade <Lamp_On>:

}


void Lamp_On (void)
{
    1ade:	df 93       	push	r29
    1ae0:	cf 93       	push	r28
    1ae2:	cd b7       	in	r28, 0x3d	; 61
    1ae4:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue(DIO_u8PORTB,DIO_u8PIN4,DIO_u8PIN_HIGH);
    1ae6:	82 e0       	ldi	r24, 0x02	; 2
    1ae8:	64 e0       	ldi	r22, 0x04	; 4
    1aea:	41 e0       	ldi	r20, 0x01	; 1
    1aec:	0e 94 19 08 	call	0x1032	; 0x1032 <DIO_voidSetPinValue>
}
    1af0:	cf 91       	pop	r28
    1af2:	df 91       	pop	r29
    1af4:	08 95       	ret

00001af6 <Lamp_OFF>:

void Lamp_OFF(void)
{
    1af6:	df 93       	push	r29
    1af8:	cf 93       	push	r28
    1afa:	cd b7       	in	r28, 0x3d	; 61
    1afc:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue(DIO_u8PORTB,DIO_u8PIN4,DIO_u8PIN_LOW);
    1afe:	82 e0       	ldi	r24, 0x02	; 2
    1b00:	64 e0       	ldi	r22, 0x04	; 4
    1b02:	40 e0       	ldi	r20, 0x00	; 0
    1b04:	0e 94 19 08 	call	0x1032	; 0x1032 <DIO_voidSetPinValue>
}
    1b08:	cf 91       	pop	r28
    1b0a:	df 91       	pop	r29
    1b0c:	08 95       	ret

00001b0e <__udivmodsi4>:
    1b0e:	a1 e2       	ldi	r26, 0x21	; 33
    1b10:	1a 2e       	mov	r1, r26
    1b12:	aa 1b       	sub	r26, r26
    1b14:	bb 1b       	sub	r27, r27
    1b16:	fd 01       	movw	r30, r26
    1b18:	0d c0       	rjmp	.+26     	; 0x1b34 <__udivmodsi4_ep>

00001b1a <__udivmodsi4_loop>:
    1b1a:	aa 1f       	adc	r26, r26
    1b1c:	bb 1f       	adc	r27, r27
    1b1e:	ee 1f       	adc	r30, r30
    1b20:	ff 1f       	adc	r31, r31
    1b22:	a2 17       	cp	r26, r18
    1b24:	b3 07       	cpc	r27, r19
    1b26:	e4 07       	cpc	r30, r20
    1b28:	f5 07       	cpc	r31, r21
    1b2a:	20 f0       	brcs	.+8      	; 0x1b34 <__udivmodsi4_ep>
    1b2c:	a2 1b       	sub	r26, r18
    1b2e:	b3 0b       	sbc	r27, r19
    1b30:	e4 0b       	sbc	r30, r20
    1b32:	f5 0b       	sbc	r31, r21

00001b34 <__udivmodsi4_ep>:
    1b34:	66 1f       	adc	r22, r22
    1b36:	77 1f       	adc	r23, r23
    1b38:	88 1f       	adc	r24, r24
    1b3a:	99 1f       	adc	r25, r25
    1b3c:	1a 94       	dec	r1
    1b3e:	69 f7       	brne	.-38     	; 0x1b1a <__udivmodsi4_loop>
    1b40:	60 95       	com	r22
    1b42:	70 95       	com	r23
    1b44:	80 95       	com	r24
    1b46:	90 95       	com	r25
    1b48:	9b 01       	movw	r18, r22
    1b4a:	ac 01       	movw	r20, r24
    1b4c:	bd 01       	movw	r22, r26
    1b4e:	cf 01       	movw	r24, r30
    1b50:	08 95       	ret

00001b52 <__prologue_saves__>:
    1b52:	2f 92       	push	r2
    1b54:	3f 92       	push	r3
    1b56:	4f 92       	push	r4
    1b58:	5f 92       	push	r5
    1b5a:	6f 92       	push	r6
    1b5c:	7f 92       	push	r7
    1b5e:	8f 92       	push	r8
    1b60:	9f 92       	push	r9
    1b62:	af 92       	push	r10
    1b64:	bf 92       	push	r11
    1b66:	cf 92       	push	r12
    1b68:	df 92       	push	r13
    1b6a:	ef 92       	push	r14
    1b6c:	ff 92       	push	r15
    1b6e:	0f 93       	push	r16
    1b70:	1f 93       	push	r17
    1b72:	cf 93       	push	r28
    1b74:	df 93       	push	r29
    1b76:	cd b7       	in	r28, 0x3d	; 61
    1b78:	de b7       	in	r29, 0x3e	; 62
    1b7a:	ca 1b       	sub	r28, r26
    1b7c:	db 0b       	sbc	r29, r27
    1b7e:	0f b6       	in	r0, 0x3f	; 63
    1b80:	f8 94       	cli
    1b82:	de bf       	out	0x3e, r29	; 62
    1b84:	0f be       	out	0x3f, r0	; 63
    1b86:	cd bf       	out	0x3d, r28	; 61
    1b88:	09 94       	ijmp

00001b8a <__epilogue_restores__>:
    1b8a:	2a 88       	ldd	r2, Y+18	; 0x12
    1b8c:	39 88       	ldd	r3, Y+17	; 0x11
    1b8e:	48 88       	ldd	r4, Y+16	; 0x10
    1b90:	5f 84       	ldd	r5, Y+15	; 0x0f
    1b92:	6e 84       	ldd	r6, Y+14	; 0x0e
    1b94:	7d 84       	ldd	r7, Y+13	; 0x0d
    1b96:	8c 84       	ldd	r8, Y+12	; 0x0c
    1b98:	9b 84       	ldd	r9, Y+11	; 0x0b
    1b9a:	aa 84       	ldd	r10, Y+10	; 0x0a
    1b9c:	b9 84       	ldd	r11, Y+9	; 0x09
    1b9e:	c8 84       	ldd	r12, Y+8	; 0x08
    1ba0:	df 80       	ldd	r13, Y+7	; 0x07
    1ba2:	ee 80       	ldd	r14, Y+6	; 0x06
    1ba4:	fd 80       	ldd	r15, Y+5	; 0x05
    1ba6:	0c 81       	ldd	r16, Y+4	; 0x04
    1ba8:	1b 81       	ldd	r17, Y+3	; 0x03
    1baa:	aa 81       	ldd	r26, Y+2	; 0x02
    1bac:	b9 81       	ldd	r27, Y+1	; 0x01
    1bae:	ce 0f       	add	r28, r30
    1bb0:	d1 1d       	adc	r29, r1
    1bb2:	0f b6       	in	r0, 0x3f	; 63
    1bb4:	f8 94       	cli
    1bb6:	de bf       	out	0x3e, r29	; 62
    1bb8:	0f be       	out	0x3f, r0	; 63
    1bba:	cd bf       	out	0x3d, r28	; 61
    1bbc:	ed 01       	movw	r28, r26
    1bbe:	08 95       	ret

00001bc0 <_exit>:
    1bc0:	f8 94       	cli

00001bc2 <__stop_program>:
    1bc2:	ff cf       	rjmp	.-2      	; 0x1bc2 <__stop_program>
